
# This material is inherited from the Linux Makefile: arch/mips/Makefile:
#

ifdef CONFIG_CPU_LITTLE_ENDIAN
tool-prefix	= mipsel-linux-
else
tool-prefix	= mips-linux-
endif

ifdef CONFIG_CROSSCOMPILE
CROSS_COMPILE  = $(tool-prefix)
endif

#
# The ELF GCC uses -G0 -mabicalls -fpic as default.  We don't need PIC
# code in the kernel since it only slows down the whole thing.  For the
# old GCC these options are just the defaults.  At some point we might
# make use of global pointer optimizations.
#
# The DECStation requires an ECOFF kernel for remote booting, other MIPS
# machines may also.  Since BFD is incredibly buggy with respect to
# crossformat linking we rely on the elf2ecoff tool for format conversion.
#
GCCFLAGS	:= -G 0 -mno-abicalls -fno-pic
LINKFLAGS	+= -static -G 0
MODFLAGS	+= -mlong-calls

ifdef CONFIG_REMOTE_DEBUG
CFLAGS		:= $(CFLAGS) -g
endif

#
# CPU-dependent compiler/assembler options for optimization.
#
ifdef CONFIG_CPU_R3000
GCCFLAGS	+= -mcpu=r3000 -mips1
endif
ifdef CONFIG_CPU_R6000
GCCFLAGS	+= -mcpu=r6000 -mips2 -Wa,--trap
endif
ifdef CONFIG_CPU_R4300
GCCFLAGS	+= -mcpu=r4300 -mips2 -Wa,--trap
endif
ifdef CONFIG_CPU_R4X00
GCCFLAGS	+= -mcpu=r4600 -mips2 -Wa,--trap
endif
ifdef CONFIG_CPU_R5000
GCCFLAGS	+= -mcpu=r8000 -mips2 -Wa,--trap
endif
ifdef CONFIG_CPU_NEVADA
GCCFLAGS	+= -mcpu=r8000 -mips2 -Wa,--trap -mmad
endif
ifdef CONFIG_CPU_RM7000
GCCFLAGS	+= -mcpu=r8000 -mips2 -Wa,--trap
endif
ifdef CONFIG_CPU_R8000
GCCFLAGS	+= -mcpu=r8000 -mips2 -Wa,--trap
endif
ifdef CONFIG_CPU_R10000
GCCFLAGS	+= -mcpu=r8000 -mips2 -Wa,--trap
endif
ifdef CONFIG_CPU_VR41XX
CFLAGS		+= -mcpu=r4600 -mips2 -Wa,-m4100,--trap
endif
ifdef CONFIG_CPU_R39XX
# if your toolchain supports this, change to
# CFLAGS	+= -mcpu=r3900 -mips1
CFLAGS		+= -mcpu=r3000 -mips1
endif

ifdef CONFIG_MIPS_FPU_EMULATOR
CORE_FILES      +=arch/mips/fpu_emulator/fpu_emulator.o
SUBDIRS         +=arch/mips/fpu_emulator
endif

#
# The pipe options is bad for my low-mem machine
# Uncomment this if you want this.
#
GCCFLAGS	+= -pipe

CFLAGS		+= $(GCCFLAGS) $(MODFLAGS)
AFLAGS		+= $(GCCFLAGS)

#
# Board-dependent options and extra files
#
ifdef CONFIG_ALGOR_P4032
CORE_FILES    += arch/mips/algor/algor.o
SUBDIRS       += arch/mips/algor
#LOADADDR      += 0x80000000
endif

#
# DECstation family
#
ifdef CONFIG_DECSTATION
CORE_FILES    += arch/mips/dec/dec.o
SUBDIRS       += arch/mips/dec arch/mips/dec/prom
LIBS          += arch/mips/dec/prom/rexlib.a
LOADADDR      += 0x80040000
endif

#
# Acer PICA 61, Mips Magnum 4000 and Olivetti M700.
#
ifdef CONFIG_MIPS_JAZZ
CORE_FILES    += arch/mips/jazz/jazz.o
SUBDIRS       += arch/mips/jazz arch/mips/arc
LIBS          += arch/mips/arc/arclib.a
LOADADDR      += 0x80080000
endif

ifdef CONFIG_COBALT_MICRO_SERVER
ARCHIVES      += arch/mips/cobalt/cobalt.o
SUBDIRS       += arch/mips/cobalt
LOADADDR      += 0x80000000
endif

ifdef CONFIG_SNI_RM200_PCI
CORE_FILES    += arch/mips/sni/sni.o
SUBDIRS       += arch/mips/sni arch/mips/arc
LIBS          += arch/mips/arc/arclib.a
LOADADDR      += 0x80080000
endif

ifdef CONFIG_SGI_IP22
LIBS          += arch/mips/sgi/kernel/sgikern.a arch/mips/arc/arclib.a
SUBDIRS       += arch/mips/sgi/kernel arch/mips/arc
#
# Set LOADADDR to >= 0x88069000 if you want to leave space for symmon,
# 0x88002000 for production kernels.  Note that the value must be
# 8kb aligned or the handling of the current variable will break.
#
LOADADDR      += 0x88002000
endif

#
# Baget/MIPS
#
ifdef CONFIG_BAGET_MIPS
SUBDIRS       += arch/mips/baget arch/mips/baget/prom
LIBS          += arch/mips/baget/baget.a arch/mips/baget/prom/bagetlib.a
LOADADDR      += 0x80001000
endif

#
# NEC DDB Vrc-5074
#
ifdef CONFIG_DDB5074
SUBDIRS       += arch/mips/ddb5074
LIBS          += arch/mips/ddb5074/ddb5074.a
LOADADDR      += 0x80080000
endif

#
# Orion Board
#
ifdef CONFIG_ORION
LIBS          += arch/mips/orion/orionkern.a
SUBDIRS       += arch/mips/orion
LINKSCRIPT    = arch/mips/orion/ld.script.orion
endif

#
# VR41XX-based devices
#
ifdef CONFIG_CPU_VR41XX
  CORE_FILES    += arch/mips/vr41xx/vr41xx.o
  SUBDIRS       += arch/mips/vr41xx

  # Link kernel just above exception vectors (default).
  LOADADDR      = 0x80001000

  # arch/mips/config.in can provide .text and .data addresses.
  ifdef CONFIG_LINK_TEXT
    LOADADDR = $(CONFIG_LINK_TEXT)
  endif

  ifdef CONFIG_LINK_DATA
    DATAADDR = $(CONFIG_LINK_DATA)
  endif

  ifdef CONFIG_XIP_ROM
    ifndef CONFIG_LINK_TEXT
      # For XIP ROM, .text address is likely to vary from platform to platform,
      # and even from device to device depending on ROM configuration,
      # so instead of providing a default and giving a potententially
      # false sense of well-being, cause an error instead.
      LOADADDR = Error_no_link_text_address_specified_for_xip_rom.
    endif

    LINKSCRIPT    = arch/mips/vr41xx/rom.lds
  endif
endif

#
# R39XX-based devices
#
ifdef CONFIG_CPU_R39XX
CORE_FILES    += arch/mips/r39xx/r39xx.o
SUBDIRS       += arch/mips/r39xx arch/mips/r39xx/prom
LIBS          += arch/mips/r39xx/prom/r39xxlib.a

ifdef CONFIG_VTECH_HELIO
  ifndef CONFIG_XIP_ROM
    # This is really a condition on whether we plan to use hfload.  Fix later.
    # Stay away from the bootloader.
    LOADADDR      += 0x80004000
  else
    LOADADDR      = 0x80000000

    # arch/mips/config.in can provide .text and .data addresses.
    ifdef CONFIG_LINK_TEXT
      LOADADDR = $(CONFIG_LINK_TEXT)
    endif

    ifdef CONFIG_LINK_DATA
      DATAADDR = $(CONFIG_LINK_DATA)
    endif

    ifndef CONFIG_LINK_TEXT
      # For XIP ROM, .text address is likely to vary from platform to platform,
      # and even from device to device depending on ROM configuration,
      # so instead of providing a default and giving a potententially
      # false sense of well-being, cause an error instead.
      LOADADDR = Error_no_link_text_address_specified_for_xip_rom.
    endif

    LINKSCRIPT    = arch/mips/r39xx/rom.lds
  endif
endif
endif

# Choosing incompatible machines durings configuration will result in
# error messages during linking.  Select a default linkscript if
# none has been choosen above.
#
ifndef LINKSCRIPT
ifndef CONFIG_CPU_LITTLE_ENDIAN
LINKSCRIPT    = arch/mips/ld.script.big
else
LINKSCRIPT    = arch/mips/ld.script.little
endif
endif
LINKFLAGS     += -T $(word 1,$(LINKSCRIPT))

ifdef LOADADDR
LINKFLAGS     += -Ttext $(word 1,$(LOADADDR))
endif

ifdef DATAADDR
LINKFLAGS     += -Tdata $(word 1,$(DATAADDR))
endif
