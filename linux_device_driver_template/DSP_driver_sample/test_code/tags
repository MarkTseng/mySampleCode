!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
AACWAVEFORMAT	wave_fmt.h	/^}   __attribute__ ((packed)) AACWAVEFORMAT;$/;"	t	typeref:struct:tAACWAVEFORMAT
AAMUT	drv_ssd.h	/^            UINT32 AAMUT     :1;$/;"	m	struct:__anon125::__anon126::__anon127
ADC_Adjust_Level	tvfe_audio.h	/^    INT8 ADC_Adjust_Level;		\/\/applied for line-in ADC path$/;"	m	struct:_TVFE_Audio_Level_Adjust_t
ADU	drv_ssd.h	/^            UINT32 ADU       :1;$/;"	m	struct:__anon125::__anon126::__anon127
ADW	drv_ssd.h	/^            UINT32 ADW       :11;$/;"	m	struct:__anon125::__anon130::__anon131
ALPHA_BLEND	ffplay.c	402;"	d	file:
AL_EQBand_t	audio_api.c	/^} AL_EQBand_t;$/;"	t	typeref:enum:__anon3	file:
AL_EQ_BAND_1000HZ	audio_api.c	/^     AL_EQ_BAND_1000HZ,$/;"	e	enum:__anon3	file:
AL_EQ_BAND_100HZ	audio_api.c	/^     AL_EQ_BAND_100HZ,$/;"	e	enum:__anon3	file:
AL_EQ_BAND_3000HZ	audio_api.c	/^     AL_EQ_BAND_3000HZ,$/;"	e	enum:__anon3	file:
AL_EQ_BAND_300HZ	audio_api.c	/^     AL_EQ_BAND_300HZ,$/;"	e	enum:__anon3	file:
AL_EQ_BAND_8000HZ	audio_api.c	/^     AL_EQ_BAND_8000HZ,$/;"	e	enum:__anon3	file:
AL_EQ_BAND_MAX	audio_api.c	/^     AL_EQ_BAND_MAX,$/;"	e	enum:__anon3	file:
AM_AGCConfigParam	tvfe_api.h	/^    TVFE_AudioSIFAGCConfig_t  AM_AGCConfigParam;$/;"	m	struct:__anon122
APP_AUDIO_MODE_CH_CHANGE	audio_api.c	/^    APP_AUDIO_MODE_CH_CHANGE,$/;"	e	enum:_APP_Audio_Mode_e	file:
APP_AUDIO_MODE_CH_SEARCH	audio_api.c	/^    APP_AUDIO_MODE_CH_SEARCH,$/;"	e	enum:_APP_Audio_Mode_e	file:
APP_AUDIO_MODE_FAVORITE	audio_api.c	/^    APP_AUDIO_MODE_FAVORITE,$/;"	e	enum:_APP_AudioSoundMode_t	file:
APP_AUDIO_MODE_MAX	audio_api.c	/^    APP_AUDIO_MODE_MAX,$/;"	e	enum:_APP_AudioSoundMode_t	file:
APP_AUDIO_MODE_MOVIE	audio_api.c	/^    APP_AUDIO_MODE_MOVIE,$/;"	e	enum:_APP_AudioSoundMode_t	file:
APP_AUDIO_MODE_MUSIC	audio_api.c	/^    APP_AUDIO_MODE_MUSIC,$/;"	e	enum:_APP_AudioSoundMode_t	file:
APP_AUDIO_MODE_NO_SIGNALE	audio_api.c	/^    APP_AUDIO_MODE_NO_SIGNALE	= 0,$/;"	e	enum:_APP_Audio_Mode_e	file:
APP_AUDIO_MODE_SIGNAL_DETECT	audio_api.c	/^    APP_AUDIO_MODE_SIGNAL_DETECT,$/;"	e	enum:_APP_Audio_Mode_e	file:
APP_AUDIO_MODE_SPEECH	audio_api.c	/^    APP_AUDIO_MODE_SPEECH,$/;"	e	enum:_APP_AudioSoundMode_t	file:
APP_AUDIO_MODE_STANDARD	audio_api.c	/^    APP_AUDIO_MODE_STANDARD = 0,$/;"	e	enum:_APP_AudioSoundMode_t	file:
APP_AUDIO_MODE_STATEMAX	audio_api.c	/^    APP_AUDIO_MODE_STATEMAX,$/;"	e	enum:_APP_Audio_Mode_e	file:
APP_AUDIO_SPDIF_BITSTREAM	audio_api.c	/^    APP_AUDIO_SPDIF_BITSTREAM,$/;"	e	enum:_APP_Audio_SPDIF_Output_Config_e	file:
APP_AUDIO_SPDIF_IECRX	audio_api.c	/^    APP_AUDIO_SPDIF_IECRX,$/;"	e	enum:_APP_Audio_SPDIF_Output_Config_e	file:
APP_AUDIO_SPDIF_OFF	audio_api.c	/^    APP_AUDIO_SPDIF_OFF	= 0,$/;"	e	enum:_APP_Audio_SPDIF_Output_Config_e	file:
APP_AUDIO_SPDIF_Output_SmpRate_192K	audio_api.c	/^    APP_AUDIO_SPDIF_Output_SmpRate_192K,$/;"	e	enum:_APP_Audio_SPDIF_Output_SmpRate_Config_e	file:
APP_AUDIO_SPDIF_Output_SmpRate_32K	audio_api.c	/^    APP_AUDIO_SPDIF_Output_SmpRate_32K,$/;"	e	enum:_APP_Audio_SPDIF_Output_SmpRate_Config_e	file:
APP_AUDIO_SPDIF_Output_SmpRate_44K	audio_api.c	/^    APP_AUDIO_SPDIF_Output_SmpRate_44K,$/;"	e	enum:_APP_Audio_SPDIF_Output_SmpRate_Config_e	file:
APP_AUDIO_SPDIF_Output_SmpRate_48K	audio_api.c	/^    APP_AUDIO_SPDIF_Output_SmpRate_48K = 0,$/;"	e	enum:_APP_Audio_SPDIF_Output_SmpRate_Config_e	file:
APP_AUDIO_SPDIF_Output_SmpRate_96K	audio_api.c	/^    APP_AUDIO_SPDIF_Output_SmpRate_96K,$/;"	e	enum:_APP_Audio_SPDIF_Output_SmpRate_Config_e	file:
APP_AUDIO_SPDIF_PCM	audio_api.c	/^    APP_AUDIO_SPDIF_PCM,$/;"	e	enum:_APP_Audio_SPDIF_Output_Config_e	file:
APP_AUDIO_SPDIF_REENC	audio_api.c	/^    APP_AUDIO_SPDIF_REENC,$/;"	e	enum:_APP_Audio_SPDIF_Output_Config_e	file:
APP_AudioSoundModeSetting_t	audio_api.c	/^} APP_AudioSoundModeSetting_t;$/;"	t	typeref:struct:_APP_AudioSoundModeSetting_t	file:
APP_AudioSoundMode_t	audio_api.c	/^} APP_AudioSoundMode_t;$/;"	t	typeref:enum:_APP_AudioSoundMode_t	file:
APP_Audio_GetAudioSoundModeEqualizerSetting	audio_api.c	/^TVFE_Audio_Equalizer_Config_t APP_Audio_GetAudioSoundModeEqualizerSetting(APP_AudioSoundMode_t Mode)$/;"	f	signature:(APP_AudioSoundMode_t Mode)
APP_Audio_GetAudioSoundModeSetting	audio_api.c	/^APP_AudioSoundModeSetting_t APP_Audio_GetAudioSoundModeSetting(APP_AudioSoundMode_t Mode)$/;"	f	signature:(APP_AudioSoundMode_t Mode)
APP_Audio_GetSIFWorkingMode	audio_api.c	/^APP_BOOL APP_Audio_GetSIFWorkingMode(TVFE_AudioSIFMode_e *peCurrentMode)$/;"	f	signature:(TVFE_AudioSIFMode_e *peCurrentMode)
APP_Audio_GetSifAvailableMode	audio_api.c	/^APP_BOOL APP_Audio_GetSifAvailableMode(TVFE_AudioSIFAvailableMode_e *peSifAvaiMode)$/;"	f	signature:(TVFE_AudioSIFAvailableMode_e *peSifAvaiMode)
APP_Audio_GetTunerValueType	audio_api.c	/^APP_BOOL APP_Audio_GetTunerValueType(TVFE_SoundStd_e *peSoundStdType)$/;"	f	signature:(TVFE_SoundStd_e *peSoundStdType)
APP_Audio_Mode_e	audio_api.c	/^} APP_Audio_Mode_e;$/;"	t	typeref:enum:_APP_Audio_Mode_e	file:
APP_Audio_SIF_SetCurrentMode	audio_api.c	/^APP_BOOL APP_Audio_SIF_SetCurrentMode(TVFE_AudioSIFMode_e eSifMode)$/;"	f	signature:(TVFE_AudioSIFMode_e eSifMode)
APP_Audio_SPDIF_Output_Config_e	audio_api.c	/^} APP_Audio_SPDIF_Output_Config_e;$/;"	t	typeref:enum:_APP_Audio_SPDIF_Output_Config_e	file:
APP_Audio_SPDIF_Output_SmpRate_Config_e	audio_api.c	/^} APP_Audio_SPDIF_Output_SmpRate_Config_e;$/;"	t	typeref:enum:_APP_Audio_SPDIF_Output_SmpRate_Config_e	file:
APP_Audio_SetSifAvailableMode	audio_api.c	/^APP_BOOL APP_Audio_SetSifAvailableMode(TVFE_AudioSIFAvailableMode_e eSIFAvailableMode)$/;"	f	signature:(TVFE_AudioSIFAvailableMode_e eSIFAvailableMode)
APP_Audio_SetTunerValueType	audio_api.c	/^APP_BOOL APP_Audio_SetTunerValueType(TVFE_SoundStd_e eSoundStdType)$/;"	f	signature:(TVFE_SoundStd_e eSoundStdType)
APP_Audio_Set_SIFHandler	audio_api.c	/^APP_BOOL APP_Audio_Set_SIFHandler(UINT32 Param0)$/;"	f	signature:(UINT32 Param0)
APP_Audio_Set_Sound_Source	audio_api.c	/^APP_BOOL APP_Audio_Set_Sound_Source(PLF_AVSourcePinConfig_st *pCurrSrc)$/;"	f	signature:(PLF_AVSourcePinConfig_st *pCurrSrc)
APP_BOOL	audio_api.c	/^typedef unsigned char       APP_BOOL;$/;"	t	file:
APP_FALSE	audio_api.c	878;"	d	file:
APP_FALSE	audio_api.c	888;"	d	file:
APP_Get_SIF_FrontEndParam	audio_api.c	/^APP_BOOL APP_Get_SIF_FrontEndParam(TVFE_AudioFrontEndParam_t *pFrontEndParam)$/;"	f	signature:(TVFE_AudioFrontEndParam_t *pFrontEndParam)
APP_PCB_AUDIO_BALANCE_TABLE_SIZE	audio_api.c	884;"	d	file:
APP_PCB_AUDIO_BASS_TABLE_SIZE	audio_api.c	881;"	d	file:
APP_PCB_AUDIO_CARRIER1_MAGNITUDE_THRESHOLD_DEFAULT	audio_api.c	1173;"	d	file:
APP_PCB_AUDIO_EIAJ_SUB_CARRIER_MAGNITUDE_THRESHOLD_LOW_DEFAULT	audio_api.c	1179;"	d	file:
APP_PCB_AUDIO_EIAJ_SUB_CARRIER_MAGNITUDE_THRESHOLD_UP_DEFAULT	audio_api.c	1180;"	d	file:
APP_PCB_AUDIO_ENABLE_SUB_CARRIER_DETECT_DEFAULT	audio_api.c	1178;"	d	file:
APP_PCB_AUDIO_EQ_TABLE_SIZE	audio_api.c	883;"	d	file:
APP_PCB_AUDIO_MPX_MAGNITUDE_THRESHOLD_LOW_DEFAULT	audio_api.c	1174;"	d	file:
APP_PCB_AUDIO_MPX_MAGNITUDE_THRESHOLD_UP_DEFAULT	audio_api.c	1175;"	d	file:
APP_PCB_AUDIO_OUTPUT_MAX	audio_api.c	/^    APP_PCB_AUDIO_OUTPUT_MAX,$/;"	e	enum:_APP_PCB_Audio_OutputTarget_t	file:
APP_PCB_AUDIO_OUTPUT_START	audio_api.c	/^    APP_PCB_AUDIO_OUTPUT_START = 0,$/;"	e	enum:_APP_PCB_Audio_OutputTarget_t	file:
APP_PCB_AUDIO_OUTPUT_VIA_HEADPHONE	audio_api.c	/^    APP_PCB_AUDIO_OUTPUT_VIA_HEADPHONE,$/;"	e	enum:_APP_PCB_Audio_OutputTarget_t	file:
APP_PCB_AUDIO_OUTPUT_VIA_RCA_JACK	audio_api.c	/^    APP_PCB_AUDIO_OUTPUT_VIA_RCA_JACK,$/;"	e	enum:_APP_PCB_Audio_OutputTarget_t	file:
APP_PCB_AUDIO_OUTPUT_VIA_RCA_JACK_1	audio_api.c	/^    APP_PCB_AUDIO_OUTPUT_VIA_RCA_JACK_1,$/;"	e	enum:_APP_PCB_Audio_OutputTarget_t	file:
APP_PCB_AUDIO_OUTPUT_VIA_SPEAKER	audio_api.c	/^    APP_PCB_AUDIO_OUTPUT_VIA_SPEAKER = APP_PCB_AUDIO_OUTPUT_START,$/;"	e	enum:_APP_PCB_Audio_OutputTarget_t	file:
APP_PCB_AUDIO_SAP_MAGNITUDE_THRESHOLD_LOW_DEFAULT	audio_api.c	1176;"	d	file:
APP_PCB_AUDIO_SAP_MAGNITUDE_THRESHOLD_UP_DEFAULT	audio_api.c	1177;"	d	file:
APP_PCB_AUDIO_TREBLE_TABLE_SIZE	audio_api.c	882;"	d	file:
APP_PCB_AUDIO_VOLUME_TABLE_SIZE	audio_api.c	880;"	d	file:
APP_PCB_AudioOutputConfig_t	audio_api.c	/^} APP_PCB_AudioOutputConfig_t;$/;"	t	typeref:struct:_APP_PCB_AudioOutputConfig_t	file:
APP_PCB_Audio_Initial	audio_api.c	/^APP_BOOL APP_PCB_Audio_Initial(UINT32 Param)$/;"	f	signature:(UINT32 Param)
APP_PCB_Audio_OutputTarget_t	audio_api.c	/^} APP_PCB_Audio_OutputTarget_t;$/;"	t	typeref:enum:_APP_PCB_Audio_OutputTarget_t	file:
APP_PCB_Audio_Set_Audio_Mode	audio_api.c	/^APP_BOOL APP_PCB_Audio_Set_Audio_Mode(UINT32 Param0, UINT32 Param1, UINT32 Param2)$/;"	f	signature:(UINT32 Param0, UINT32 Param1, UINT32 Param2)
APP_PCB_Audio_Set_Balance	audio_api.c	/^APP_BOOL APP_PCB_Audio_Set_Balance(UINT32 Param)$/;"	f	signature:(UINT32 Param)
APP_PCB_Audio_Set_Bass	audio_api.c	/^APP_BOOL APP_PCB_Audio_Set_Bass(UINT32 Param)$/;"	f	signature:(UINT32 Param)
APP_PCB_Audio_Set_DAC_Power	audio_api.c	/^APP_BOOL APP_PCB_Audio_Set_DAC_Power(UINT32 Param0, UINT32 Param1)$/;"	f	signature:(UINT32 Param0, UINT32 Param1)
APP_PCB_Audio_Set_Level_Adjust	audio_api.c	/^APP_BOOL APP_PCB_Audio_Set_Level_Adjust(UINT32 Param)$/;"	f	signature:(UINT32 Param)
APP_PCB_Audio_Set_Lip_Sync	audio_api.c	/^APP_BOOL APP_PCB_Audio_Set_Lip_Sync(UINT32 Param0, UINT32 Param1)$/;"	f	signature:(UINT32 Param0, UINT32 Param1)
APP_PCB_Audio_Set_MainEqulizer	audio_api.c	/^APP_BOOL APP_PCB_Audio_Set_MainEqulizer(UINT32 Param0,UINT32 Param1)$/;"	f	signature:(UINT32 Param0,UINT32 Param1)
APP_PCB_Audio_Set_Mute	audio_api.c	/^APP_BOOL APP_PCB_Audio_Set_Mute(APP_BOOL IsMute, APP_BOOL fRefVideoInSatus, APP_Audio_Mode_e IsMode, PLF_AVType_e SourceType)$/;"	f	signature:(APP_BOOL IsMute, APP_BOOL fRefVideoInSatus, APP_Audio_Mode_e IsMode, PLF_AVType_e SourceType)
APP_PCB_Audio_Set_Mute_All	audio_api.c	/^APP_BOOL APP_PCB_Audio_Set_Mute_All(UINT32 Param)$/;"	f	signature:(UINT32 Param)
APP_PCB_Audio_Set_Mute_RCA_Jack	audio_api.c	/^APP_BOOL APP_PCB_Audio_Set_Mute_RCA_Jack(UINT32 Param)$/;"	f	signature:(UINT32 Param)
APP_PCB_Audio_Set_Mute_Speaker	audio_api.c	/^APP_BOOL APP_PCB_Audio_Set_Mute_Speaker(UINT32 Param)$/;"	f	signature:(UINT32 Param)
APP_PCB_Audio_Set_Output_Selection	audio_api.c	/^APP_BOOL APP_PCB_Audio_Set_Output_Selection(PLF_AVType_e eSrcVideoType)$/;"	f	signature:(PLF_AVType_e eSrcVideoType)
APP_PCB_Audio_Set_Perfect_Sound	audio_api.c	/^APP_BOOL APP_PCB_Audio_Set_Perfect_Sound(UINT32 Param)$/;"	f	signature:(UINT32 Param)
APP_PCB_Audio_Set_SCART_Output	audio_api.c	/^APP_BOOL APP_PCB_Audio_Set_SCART_Output(UINT32 Param0,PLF_AVType_e eSrcVideoType)$/;"	f	signature:(UINT32 Param0,PLF_AVType_e eSrcVideoType)
APP_PCB_Audio_Set_SPDIF_Output	audio_api.c	/^APP_BOOL APP_PCB_Audio_Set_SPDIF_Output(APP_Audio_SPDIF_Output_Config_e SPDIF_Output_Config,APP_Audio_SPDIF_Output_SmpRate_Config_e SPDIF_SmpRate)$/;"	f	signature:(APP_Audio_SPDIF_Output_Config_e SPDIF_Output_Config,APP_Audio_SPDIF_Output_SmpRate_Config_e SPDIF_SmpRate)
APP_PCB_Audio_Set_Surround	audio_api.c	/^APP_BOOL APP_PCB_Audio_Set_Surround(UINT32 Param)$/;"	f	signature:(UINT32 Param)
APP_PCB_Audio_Set_Treble	audio_api.c	/^APP_BOOL APP_PCB_Audio_Set_Treble(UINT32 Param)$/;"	f	signature:(UINT32 Param)
APP_PCB_Audio_Set_Volume	audio_api.c	/^APP_BOOL APP_PCB_Audio_Set_Volume(UINT32 Param0, UINT32 Param1)$/;"	f	signature:(UINT32 Param0, UINT32 Param1)
APP_PCB_GetAudioOutputConfig	audio_api.c	/^const APP_PCB_AudioOutputConfig_t* APP_PCB_GetAudioOutputConfig(APP_PCB_Audio_OutputTarget_t target)$/;"	f	signature:(APP_PCB_Audio_OutputTarget_t target)
APP_PCB_SOURCE_CVBS0	audio_api.c	/^    APP_PCB_SOURCE_CVBS0,$/;"	e	enum:_APP_PCB_Source_t	file:
APP_PCB_SOURCE_HDMI0	audio_api.c	/^    APP_PCB_SOURCE_HDMI0,$/;"	e	enum:_APP_PCB_Source_t	file:
APP_PCB_SOURCE_MAX	audio_api.c	/^    APP_PCB_SOURCE_MAX,$/;"	e	enum:_APP_PCB_Source_t	file:
APP_PCB_SOURCE_MULTIMEDIA	audio_api.c	/^    APP_PCB_SOURCE_MULTIMEDIA,$/;"	e	enum:_APP_PCB_Source_t	file:
APP_PCB_SOURCE_TUNER0	audio_api.c	/^    APP_PCB_SOURCE_TUNER0 = 0,$/;"	e	enum:_APP_PCB_Source_t	file:
APP_PCB_SOURCE_VGA0	audio_api.c	/^    APP_PCB_SOURCE_VGA0,$/;"	e	enum:_APP_PCB_Source_t	file:
APP_PCB_SOURCE_YPBPR0	audio_api.c	/^    APP_PCB_SOURCE_YPBPR0,$/;"	e	enum:_APP_PCB_Source_t	file:
APP_PCB_Set_SourceType	audio_api.c	/^APP_BOOL APP_PCB_Set_SourceType(eSource_Type_t Param)$/;"	f	signature:(eSource_Type_t Param)
APP_PCB_Source_t	audio_api.c	/^} APP_PCB_Source_t;$/;"	t	typeref:enum:_APP_PCB_Source_t	file:
APP_Set_SIF_Connect	audio_api.c	/^APP_BOOL APP_Set_SIF_Connect(TVFE_AudioSIFStandardMask_e eSIFStandardMask)$/;"	f	signature:(TVFE_AudioSIFStandardMask_e eSIFStandardMask)
APP_TRUE	audio_api.c	877;"	d	file:
APP_TRUE	audio_api.c	887;"	d	file:
AR	Makefile	/^AR = $(CROSS_COMPILE)ar$/;"	m
AS	Makefile	/^AS = $(CROSS_COMPILE)as$/;"	m
AST	drv_ssd.h	/^            UINT32 AST       :1;$/;"	m	struct:__anon125::__anon126::__anon127
AUDIF_ADC_SOURCE_ADC0	dsp_ioctl.h	/^	AUDIF_ADC_SOURCE_ADC0   = 0x0,  \/*!scart*\/$/;"	e	enum:__anon7
AUDIF_ADC_SOURCE_ADC1	dsp_ioctl.h	/^	AUDIF_ADC_SOURCE_ADC1   = 0x5,  \/*!default*\/$/;"	e	enum:__anon7
AUDIF_ADC_SOURCE_ADC2	dsp_ioctl.h	/^	AUDIF_ADC_SOURCE_ADC2   = 0xA,$/;"	e	enum:__anon7
AUDIF_ADC_SOURCE_ADC3	dsp_ioctl.h	/^	AUDIF_ADC_SOURCE_ADC3   = 0xF,$/;"	e	enum:__anon7
AUDIF_ADC_SOURCE_MAX	dsp_ioctl.h	/^	AUDIF_ADC_SOURCE_MAX    = 0xF,$/;"	e	enum:__anon7
AUDIF_AUX1_PATH_AUX	dsp_ioctl.h	/^    AUDIF_AUX1_PATH_AUX       = 0x2,    $/;"	e	enum:__anon9
AUDIF_AUX1_PATH_LFE	dsp_ioctl.h	/^    AUDIF_AUX1_PATH_LFE       = 0x4,            $/;"	e	enum:__anon9
AUDIF_AUX1_PATH_MAX	dsp_ioctl.h	/^    AUDIF_AUX1_PATH_MAX       = 0x4,                $/;"	e	enum:__anon9
AUDIF_AUX1_PATH_MIXER	dsp_ioctl.h	/^    AUDIF_AUX1_PATH_MIXER     = 0x0,$/;"	e	enum:__anon9
AUDIF_AUX1_PATH_OFF	dsp_ioctl.h	/^    AUDIF_AUX1_PATH_OFF       = 0x3,        $/;"	e	enum:__anon9
AUDIF_AUX1_PATH_SIF	dsp_ioctl.h	/^    AUDIF_AUX1_PATH_SIF       = 0x1,    $/;"	e	enum:__anon9
AUDIF_AUX2_PATH_AUX	dsp_ioctl.h	/^    AUDIF_AUX2_PATH_AUX       = 0x2,    $/;"	e	enum:__anon10
AUDIF_AUX2_PATH_MAX	dsp_ioctl.h	/^    AUDIF_AUX2_PATH_MAX       = 0x3,                    $/;"	e	enum:__anon10
AUDIF_AUX2_PATH_MIXER	dsp_ioctl.h	/^    AUDIF_AUX2_PATH_MIXER     = 0x0,$/;"	e	enum:__anon10
AUDIF_AUX2_PATH_OFF	dsp_ioctl.h	/^    AUDIF_AUX2_PATH_OFF       = 0x3,        $/;"	e	enum:__anon10
AUDIF_AUX2_PATH_SIF	dsp_ioctl.h	/^    AUDIF_AUX2_PATH_SIF       = 0x1,    $/;"	e	enum:__anon10
AUDIF_AdcSourceSelect_e	dsp_ioctl.h	/^} AUDIF_AdcSourceSelect_e;$/;"	t	typeref:enum:__anon7
AUDIF_Aux1Path_e	dsp_ioctl.h	/^} AUDIF_Aux1Path_e;$/;"	t	typeref:enum:__anon9
AUDIF_Aux2Path_e	dsp_ioctl.h	/^} AUDIF_Aux2Path_e;$/;"	t	typeref:enum:__anon10
AUDIF_DAC_MAP_PCM0_L	dsp_ioctl.h	/^    AUDIF_DAC_MAP_PCM0_L    = 0x0,$/;"	e	enum:__anon11
AUDIF_DAC_MAP_PCM0_R	dsp_ioctl.h	/^    AUDIF_DAC_MAP_PCM0_R    = 0x1,$/;"	e	enum:__anon11
AUDIF_DAC_MAP_PCM1_L	dsp_ioctl.h	/^    AUDIF_DAC_MAP_PCM1_L    = 0x2,$/;"	e	enum:__anon11
AUDIF_DAC_MAP_PCM1_R	dsp_ioctl.h	/^    AUDIF_DAC_MAP_PCM1_R    = 0x3,$/;"	e	enum:__anon11
AUDIF_DAC_MAP_PCM2_L	dsp_ioctl.h	/^    AUDIF_DAC_MAP_PCM2_L    = 0x4,$/;"	e	enum:__anon11
AUDIF_DAC_MAP_PCM2_R	dsp_ioctl.h	/^    AUDIF_DAC_MAP_PCM2_R    = 0x5,$/;"	e	enum:__anon11
AUDIF_DAC_MAP_PCM_MASK	dsp_ioctl.h	/^    AUDIF_DAC_MAP_PCM_MASK  = 0x7,$/;"	e	enum:__anon11
AUDIF_DacMapping_e	dsp_ioctl.h	/^} AUDIF_DacMapping_e;$/;"	t	typeref:enum:__anon11
AUDIF_DacMapping_t	dsp_ioctl.h	/^}AUDIF_DacMapping_t;$/;"	t	typeref:struct:__anon20
AUDIF_ERR_BSBUF_FEED	dsp_ioctl.h	/^	AUDIF_ERR_BSBUF_FEED,$/;"	e	enum:_AUDIF_Status_e
AUDIF_ERR_BSBUF_ID	dsp_ioctl.h	/^	AUDIF_ERR_BSBUF_ID,$/;"	e	enum:_AUDIF_Status_e
AUDIF_ERR_BS_WAIT	dsp_ioctl.h	/^	AUDIF_ERR_BS_WAIT,$/;"	e	enum:_AUDIF_Status_e
AUDIF_ERR_BankID	dsp_ioctl.h	/^	AUDIF_ERR_BankID = -1,$/;"	e	enum:_AUDIF_Status_e
AUDIF_ERR_Download_Failed	dsp_ioctl.h	/^	AUDIF_ERR_Download_Failed = -6,$/;"	e	enum:_AUDIF_Status_e
AUDIF_ERR_FIFOSpmCntMode	dsp_ioctl.h	/^	AUDIF_ERR_FIFOSpmCntMode = -2,$/;"	e	enum:_AUDIF_Status_e
AUDIF_ERR_INVALID_OP	dsp_ioctl.h	/^	AUDIF_ERR_INVALID_OP,$/;"	e	enum:_AUDIF_Status_e
AUDIF_ERR_INVALID_PARAM	dsp_ioctl.h	/^	AUDIF_ERR_INVALID_PARAM = -3,$/;"	e	enum:_AUDIF_Status_e
AUDIF_ERR_INVALID_State	dsp_ioctl.h	/^	AUDIF_ERR_INVALID_State,$/;"	e	enum:_AUDIF_Status_e
AUDIF_ERR_INVALID_USED	dsp_ioctl.h	/^	AUDIF_ERR_INVALID_USED,$/;"	e	enum:_AUDIF_Status_e
AUDIF_ERR_MEMORY_ALLOC	dsp_ioctl.h	/^	AUDIF_ERR_MEMORY_ALLOC,$/;"	e	enum:_AUDIF_Status_e
AUDIF_ERR_UnUsed	dsp_ioctl.h	/^	AUDIF_ERR_UnUsed = -4,$/;"	e	enum:_AUDIF_Status_e
AUDIF_ERR_Unknown_CodecID	dsp_ioctl.h	/^	AUDIF_ERR_Unknown_CodecID = -5,$/;"	e	enum:_AUDIF_Status_e
AUDIF_FAILURE	dsp_ioctl.h	/^	AUDIF_FAILURE,$/;"	e	enum:_AUDIF_Status_e
AUDIF_MAIN_PATH_AUX	dsp_ioctl.h	/^    AUDIF_MAIN_PATH_AUX         = 0x2,    $/;"	e	enum:__anon8
AUDIF_MAIN_PATH_MIXER	dsp_ioctl.h	/^    AUDIF_MAIN_PATH_MIXER       = 0x0,$/;"	e	enum:__anon8
AUDIF_MAIN_PATH_SIF	dsp_ioctl.h	/^    AUDIF_MAIN_PATH_SIF         = 0x1,$/;"	e	enum:__anon8
AUDIF_MainPath_e	dsp_ioctl.h	/^} AUDIF_MainPath_e;$/;"	t	typeref:enum:__anon8
AUDIF_SUCCESS	dsp_ioctl.h	/^	AUDIF_SUCCESS = 0x0,$/;"	e	enum:_AUDIF_Status_e
AUDIF_SUNSUR_Gain_e	dsp_ioctl.h	/^} AUDIF_SUNSUR_Gain_e;$/;"	t	typeref:enum:_AUDIF_SUNSUR_Gain_e
AUDIF_SUNSUR_Switch_e	dsp_ioctl.h	/^}AUDIF_SUNSUR_Switch_e;$/;"	t	typeref:enum:_AUDIF_SUNSUR_Switch_e
AUDIF_Source_Type_e	dsp_ioctl.h	/^} AUDIF_Source_Type_e;$/;"	t	typeref:enum:__anon14
AUDIF_Status_e	dsp_ioctl.h	/^} AUDIF_Status_e;$/;"	t	typeref:enum:_AUDIF_Status_e
AUDIF_Status_t	dsp_ioctl.h	/^} AUDIF_Status_t;$/;"	t	typeref:enum:__anon6
AUDIF_TIMEOUT	dsp_ioctl.h	/^	AUDIF_TIMEOUT,$/;"	e	enum:_AUDIF_Status_e
AUDIF_Warning_NonSupport_HWRamp	dsp_ioctl.h	/^	AUDIF_Warning_NonSupport_HWRamp,$/;"	e	enum:_AUDIF_Status_e
AUDIO_DIFF_AVG_NB	avplayer.c	70;"	d	file:
AUDIO_DIFF_AVG_NB	ffplay.c	78;"	d	file:
AUDIO_DIFF_AVG_NB	tutorial08.c	35;"	d	file:
AUDIO_MANAGER_CONNECTING	tvfe_api.h	/^    AUDIO_MANAGER_CONNECTING,$/;"	e	enum:__anon93
AUDIO_MANAGER_CONNECT_INITIAL	tvfe_api.h	/^    AUDIO_MANAGER_CONNECT_INITIAL,$/;"	e	enum:__anon93
AUDIO_MANAGER_CONNECT_READY	tvfe_api.h	/^    AUDIO_MANAGER_CONNECT_READY,$/;"	e	enum:__anon93
AUDIO_MANAGER_CONNECT_TIME_OUT	tvfe_api.h	/^    AUDIO_MANAGER_CONNECT_TIME_OUT,$/;"	e	enum:__anon93
AUDIO_MANAGER_SHUT_DOWN	tvfe_api.h	/^    AUDIO_MANAGER_SHUT_DOWN      = 0,$/;"	e	enum:__anon93
AUDIO_MANAGER_STATE_MAX	tvfe_api.h	/^    AUDIO_MANAGER_STATE_MAX,$/;"	e	enum:__anon93
AUDIO_Operation	audio_api.c	/^TVFE_Operation_st AUDIO_Operation = {$/;"	v
AUD_AUDIO_AVL_MODE_02S	dsp_ioctl.h	/^    AUD_AUDIO_AVL_MODE_02S,$/;"	e	enum:__anon13
AUD_AUDIO_AVL_MODE_04S	dsp_ioctl.h	/^    AUD_AUDIO_AVL_MODE_04S,$/;"	e	enum:__anon13
AUD_AUDIO_AVL_MODE_08S	dsp_ioctl.h	/^    AUD_AUDIO_AVL_MODE_08S,$/;"	e	enum:__anon13
AUD_AUDIO_AVL_MODE_16S	dsp_ioctl.h	/^    AUD_AUDIO_AVL_MODE_16S,$/;"	e	enum:__anon13
AUD_AUDIO_AVL_MODE_20MS	dsp_ioctl.h	/^    AUD_AUDIO_AVL_MODE_20MS,$/;"	e	enum:__anon13
AUD_AUDIO_AVL_MODE_OFF	dsp_ioctl.h	/^    AUD_AUDIO_AVL_MODE_OFF    = 0,$/;"	e	enum:__anon13
AUD_AUDIO_EFFECT_MODE_NOISE_SEQUENCING	dsp_ioctl.h	/^	AUD_AUDIO_EFFECT_MODE_NOISE_SEQUENCING,$/;"	e	enum:__anon12
AUD_AUDIO_EFFECT_MODE_NORMAL	dsp_ioctl.h	/^	AUD_AUDIO_EFFECT_MODE_NORMAL = 0,$/;"	e	enum:__anon12
AUD_AUDIO_EFFECT_MODE_SRS_TRUSURROUND_HD_DPL	dsp_ioctl.h	/^	AUD_AUDIO_EFFECT_MODE_SRS_TRUSURROUND_HD_DPL,$/;"	e	enum:__anon12
AUD_AUDIO_EFFECT_MODE_SRS_TRUSURROUND_HD_PASSIVE_MATRIX	dsp_ioctl.h	/^	AUD_AUDIO_EFFECT_MODE_SRS_TRUSURROUND_HD_PASSIVE_MATRIX,$/;"	e	enum:__anon12
AUD_AUDIO_EFFECT_MODE_SRS_TRUSURROUND_XT_DPL	dsp_ioctl.h	/^	AUD_AUDIO_EFFECT_MODE_SRS_TRUSURROUND_XT_DPL,$/;"	e	enum:__anon12
AUD_AUDIO_EFFECT_MODE_SRS_TRUSURROUND_XT_PASSIVE_MATRIX	dsp_ioctl.h	/^	AUD_AUDIO_EFFECT_MODE_SRS_TRUSURROUND_XT_PASSIVE_MATRIX,$/;"	e	enum:__anon12
AUD_ERR_BUFFER_UNDERFLOW	dsp_ioctl.h	/^	AUD_ERR_BUFFER_UNDERFLOW     = -3,   \/* not enough stream data is available to decode the next video frame *\/$/;"	e	enum:__anon6
AUD_ERR_FAILURE	dsp_ioctl.h	/^	AUD_ERR_FAILURE              = -1,$/;"	e	enum:__anon6
AUD_ERR_INVALID_OP	dsp_ioctl.h	/^	AUD_ERR_INVALID_OP           = -5,   \/* requested operation is invalid *\/$/;"	e	enum:__anon6
AUD_ERR_INVALID_PARAM	dsp_ioctl.h	/^	AUD_ERR_INVALID_PARAM        = -6,   \/* invalid parameter *\/$/;"	e	enum:__anon6
AUD_ERR_MEMORY_ALLOC	dsp_ioctl.h	/^	AUD_ERR_MEMORY_ALLOC         = -4,   \/* problem allocating memory *\/$/;"	e	enum:__anon6
AUD_ERR_RESOURCE_UNAVAILABLE	dsp_ioctl.h	/^	AUD_ERR_RESOURCE_UNAVAILABLE = -2,   \/* hardware resource is in use or otherwise unavailable *\/$/;"	e	enum:__anon6
AUD_SOURCE_ATV	dsp_ioctl.h	/^	AUD_SOURCE_ATV = 0,$/;"	e	enum:__anon14
AUD_SOURCE_AV	dsp_ioctl.h	/^	AUD_SOURCE_AV,$/;"	e	enum:__anon14
AUD_SOURCE_AV1	dsp_ioctl.h	/^	AUD_SOURCE_AV1,$/;"	e	enum:__anon14
AUD_SOURCE_AV2	dsp_ioctl.h	/^	AUD_SOURCE_AV2,$/;"	e	enum:__anon14
AUD_SOURCE_DTV	dsp_ioctl.h	/^	AUD_SOURCE_DTV,$/;"	e	enum:__anon14
AUD_SOURCE_DVD	dsp_ioctl.h	/^	AUD_SOURCE_DVD,$/;"	e	enum:__anon14
AUD_SOURCE_HDMI	dsp_ioctl.h	/^	AUD_SOURCE_HDMI,$/;"	e	enum:__anon14
AUD_SOURCE_HDMI1	dsp_ioctl.h	/^	AUD_SOURCE_HDMI1,$/;"	e	enum:__anon14
AUD_SOURCE_HDMI2	dsp_ioctl.h	/^	AUD_SOURCE_HDMI2,$/;"	e	enum:__anon14
AUD_SOURCE_KARAOKE	dsp_ioctl.h	/^	AUD_SOURCE_KARAOKE,$/;"	e	enum:__anon14
AUD_SOURCE_MAX	dsp_ioctl.h	/^	AUD_SOURCE_MAX,$/;"	e	enum:__anon14
AUD_SOURCE_MEDIA	dsp_ioctl.h	/^	AUD_SOURCE_MEDIA,$/;"	e	enum:__anon14
AUD_SOURCE_NET	dsp_ioctl.h	/^	AUD_SOURCE_NET,$/;"	e	enum:__anon14
AUD_SOURCE_PC	dsp_ioctl.h	/^	AUD_SOURCE_PC,$/;"	e	enum:__anon14
AUD_SOURCE_RADIO	dsp_ioctl.h	/^	AUD_SOURCE_RADIO,$/;"	e	enum:__anon14
AUD_SOURCE_SCART	dsp_ioctl.h	/^	AUD_SOURCE_SCART,$/;"	e	enum:__anon14
AUD_SOURCE_SCART1	dsp_ioctl.h	/^	AUD_SOURCE_SCART1,$/;"	e	enum:__anon14
AUD_SOURCE_SVIDEO	dsp_ioctl.h	/^	AUD_SOURCE_SVIDEO,$/;"	e	enum:__anon14
AUD_SOURCE_SVIDEO1	dsp_ioctl.h	/^	AUD_SOURCE_SVIDEO1,$/;"	e	enum:__anon14
AUD_SOURCE_SVIDEO2	dsp_ioctl.h	/^	AUD_SOURCE_SVIDEO2,$/;"	e	enum:__anon14
AUD_SOURCE_YPBPR	dsp_ioctl.h	/^	AUD_SOURCE_YPBPR,$/;"	e	enum:__anon14
AUD_SOURCE_YPBPR1	dsp_ioctl.h	/^	AUD_SOURCE_YPBPR1,$/;"	e	enum:__anon14
AUD_SOURCE_YPBPR2	dsp_ioctl.h	/^	AUD_SOURCE_YPBPR2,$/;"	e	enum:__anon14
AUD_SUCCESS	dsp_ioctl.h	/^	AUD_SUCCESS                  =  0,	\/* successful outcome *\/$/;"	e	enum:__anon6
AUD_WARN_BUFFER_EMPTY	dsp_ioctl.h	/^	AUD_WARN_BUFFER_EMPTY        =  3,	\/* buffer became empty before the requested amount of data could be read *\/$/;"	e	enum:__anon6
AUD_WARN_BUFFER_FULL	dsp_ioctl.h	/^	AUD_WARN_BUFFER_FULL         =  4,	\/* buffer became full before the requested amount of data could be written *\/$/;"	e	enum:__anon6
AUD_WARN_NO_ACTION	dsp_ioctl.h	/^	AUD_WARN_NO_ACTION           =  1,	\/* the function completed successfully, but no action was taken *\/$/;"	e	enum:__anon6
AUD_WARN_PARAM_CLIPPED	dsp_ioctl.h	/^	AUD_WARN_PARAM_CLIPPED       =  2,	\/* the function completed successfully, though a parameter was clipped to within a valid range.*\/$/;"	e	enum:__anon6
AUX_Volume_Config	dsp_ioctl.h	/^		TVFE_Audio_AUX_Volume_t AUX_Volume_Config;$/;"	m	struct:TVFE_Audio_CMD::__anon32
AVL_Config	dsp_ioctl.h	/^		TVFE_Audio_AVL_Config_t AVL_Config;$/;"	m	struct:TVFE_Audio_CMD::__anon34
AVPLAYER_Audio_Thread	avplayer.c	/^static void *AVPLAYER_Audio_Thread(void *arg)$/;"	f	file:	signature:(void *arg)
AVPLAYER_DBGMSG	colortext.h	39;"	d
AVPLAYER_DBGMSG	colortext.h	41;"	d
AVPLAYER_DSP_Destroy	avplayer.c	/^int AVPLAYER_DSP_Destroy()$/;"	f
AVPLAYER_DSP_Initial	avplayer.c	/^int AVPLAYER_DSP_Initial()$/;"	f
AVPLAYER_Parser_Thread	avplayer.c	/^void *AVPLAYER_Parser_Thread(void *arg) {$/;"	f	signature:(void *arg)
AVPLAYER_Stream_Component_Open	avplayer.c	/^int AVPLAYER_Stream_Component_Open(VideoState *is, int stream_index) {$/;"	f	signature:(VideoState *is, int stream_index)
AVPLAYER_Thread_Attr_Destroy	avplayer.c	/^int AVPLAYER_Thread_Attr_Destroy(VideoState *is)$/;"	f	signature:(VideoState *is)
AVPLAYER_Thread_Attr_Initial	avplayer.c	/^void AVPLAYER_Thread_Attr_Initial(VideoState *is)$/;"	f	signature:(VideoState *is)
AVPLAYER_Video_Thread	avplayer.c	/^void *AVPLAYER_Video_Thread(void *arg) $/;"	f	signature:(void *arg)
AV_NOSYNC_THRESHOLD	avplayer.c	62;"	d	file:
AV_NOSYNC_THRESHOLD	ffplay.c	70;"	d	file:
AV_NOSYNC_THRESHOLD	tutorial08.c	33;"	d	file:
AV_SYNC_AUDIO_MASTER	avplayer.c	/^    AV_SYNC_AUDIO_MASTER, \/* default choice *\/$/;"	e	enum:__anon154	file:
AV_SYNC_AUDIO_MASTER	ffplay.c	/^    AV_SYNC_AUDIO_MASTER, \/* default choice *\/$/;"	e	enum:__anon4	file:
AV_SYNC_AUDIO_MASTER	tutorial08.c	/^	AV_SYNC_AUDIO_MASTER,$/;"	e	enum:__anon1	file:
AV_SYNC_EXTERNAL_CLOCK	avplayer.c	/^    AV_SYNC_EXTERNAL_CLOCK, \/* synchronize to an external clock *\/$/;"	e	enum:__anon154	file:
AV_SYNC_EXTERNAL_CLOCK	ffplay.c	/^    AV_SYNC_EXTERNAL_CLOCK, \/* synchronize to an external clock *\/$/;"	e	enum:__anon4	file:
AV_SYNC_EXTERNAL_MASTER	tutorial08.c	/^	AV_SYNC_EXTERNAL_MASTER,$/;"	e	enum:__anon1	file:
AV_SYNC_THRESHOLD	avplayer.c	60;"	d	file:
AV_SYNC_THRESHOLD	ffplay.c	68;"	d	file:
AV_SYNC_THRESHOLD	tutorial08.c	32;"	d	file:
AV_SYNC_VIDEO_MASTER	avplayer.c	/^    AV_SYNC_VIDEO_MASTER,$/;"	e	enum:__anon154	file:
AV_SYNC_VIDEO_MASTER	ffplay.c	/^    AV_SYNC_VIDEO_MASTER,$/;"	e	enum:__anon4	file:
AV_SYNC_VIDEO_MASTER	tutorial08.c	/^	AV_SYNC_VIDEO_MASTER,$/;"	e	enum:__anon1	file:
Attenuation	tvfe_audio.h	/^	UINT8 Attenuation;$/;"	m	struct:_TVFE_Audio_SIF_Over_Modulation_Config_t
Aud_AudioAVLConfig_t	dsp_ioctl.h	/^} Aud_AudioAVLConfig_t;$/;"	t	typeref:struct:__anon22
Aud_AudioAVLMode_t	dsp_ioctl.h	/^} Aud_AudioAVLMode_t;$/;"	t	typeref:enum:__anon13
Aud_AudioEffectMode_t	dsp_ioctl.h	/^} Aud_AudioEffectMode_t;$/;"	t	typeref:enum:__anon12
Aud_EqualizerConfig_t	dsp_ioctl.h	/^} Aud_EqualizerConfig_t;$/;"	t	typeref:struct:__anon21
Aud_SUNSUR_Param_t	dsp_ioctl.h	/^} Aud_SUNSUR_Param_t;$/;"	t	typeref:struct:__anon23
AudioDecoderStartTime	avplayer.c	/^int64_t AudioDecoderStartTime;$/;"	v
AudioFrameNum	playback.c	/^unsigned int	AudioFrameNum = 0 ,VideoFrameNum = 0;$/;"	v
AudioManagerParam_t	tvfe_api.h	/^} AudioManagerParam_t;$/;"	t	typeref:struct:__anon123
AudioManagerState_t	tvfe_api.h	/^} AudioManagerState_t;$/;"	t	typeref:enum:__anon93
AudioPacketSize	playback.c	/^int64_t			AudioPacketSize = 0 ,VideoPacketSize = 0;$/;"	v
Audio_Get_Main_Equlizer_Config	dsp_ioctl.h	/^	TVFE_Audio_Status_e (*Audio_Get_Main_Equlizer_Config)	(int Aud_fd, TVFE_Audio_CMD_st *TVFE_Config);$/;"	m	struct:TVFE_Operation
Audio_Get_MasterMuteStatus	dsp_ioctl.h	/^	TVFE_Audio_Status_e (*Audio_Get_MasterMuteStatus)		(int Aud_fd, TVFE_Audio_CMD_st *TVFE_Config);$/;"	m	struct:TVFE_Operation
Audio_Initial	dsp_ioctl.h	/^	TVFE_Audio_Status_e (*Audio_Initial)					(int Aud_fd);$/;"	m	struct:TVFE_Operation
Audio_Lip_Sync_Config	dsp_ioctl.h	/^	TVFE_Audio_Status_e (*Audio_Lip_Sync_Config)			(int Aud_fd, TVFE_Audio_CMD_st *TVFE_Config);$/;"	m	struct:TVFE_Operation
Audio_PCM_Output_Phase_Config	dsp_ioctl.h	/^	TVFE_Audio_Status_e (*Audio_PCM_Output_Phase_Config)	(int Aud_fd, TVFE_Audio_CMD_st *TVFE_Config);$/;"	m	struct:TVFE_Operation
Audio_SPDIF_Output_Config	dsp_ioctl.h	/^	TVFE_Audio_Status_e (*Audio_SPDIF_Output_Config)		(int Aud_fd, TVFE_Audio_CMD_st *TVFE_Config);$/;"	m	struct:TVFE_Operation
Audio_Set_AC3TransCoding	dsp_ioctl.h	/^	TVFE_Audio_Status_e (*Audio_Set_AC3TransCoding)			(int Aud_fd, TVFE_Audio_CMD_st *TVFE_Config);$/;"	m	struct:TVFE_Operation
Audio_Set_AUX_Volume	dsp_ioctl.h	/^	TVFE_Audio_Status_e (*Audio_Set_AUX_Volume)				(int Aud_fd, TVFE_Audio_CMD_st *TVFE_Config);$/;"	m	struct:TVFE_Operation
Audio_Set_AVL_Config	dsp_ioctl.h	/^	TVFE_Audio_Status_e (*Audio_Set_AVL_Config)				(int Aud_fd, TVFE_Audio_CMD_st *TVFE_Config);$/;"	m	struct:TVFE_Operation
Audio_Set_AtvRamp	dsp_ioctl.h	/^	TVFE_Audio_Status_e (*Audio_Set_AtvRamp)				(int Aud_fd, TVFE_Audio_CMD_st *TVFE_Config);$/;"	m	struct:TVFE_Operation
Audio_Set_Balance	dsp_ioctl.h	/^	TVFE_Audio_Status_e (*Audio_Set_Balance)				(int Aud_fd, TVFE_Audio_CMD_st *TVFE_Config);$/;"	m	struct:TVFE_Operation
Audio_Set_Bass	dsp_ioctl.h	/^	TVFE_Audio_Status_e (*Audio_Set_Bass)					(int Aud_fd, TVFE_Audio_CMD_st *TVFE_Config);$/;"	m	struct:TVFE_Operation
Audio_Set_Effect_Mode	dsp_ioctl.h	/^	TVFE_Audio_Status_e (*Audio_Set_Effect_Mode)			(int Aud_fd, TVFE_Audio_CMD_st *TVFE_Config);$/;"	m	struct:TVFE_Operation
Audio_Set_HEAAC_Output	dsp_ioctl.h	/^	TVFE_Audio_Status_e (*Audio_Set_HEAAC_Output)			(int Aud_fd, TVFE_Audio_CMD_st *TVFE_Config);$/;"	m	struct:TVFE_Operation
Audio_Set_Level_Adjust_Config	dsp_ioctl.h	/^	TVFE_Audio_Status_e (*Audio_Set_Level_Adjust_Config)		(int Aud_fd, TVFE_Audio_CMD_st *TVFE_Config);$/;"	m	struct:TVFE_Operation
Audio_Set_Main_Equlizer_Config	dsp_ioctl.h	/^	TVFE_Audio_Status_e (*Audio_Set_Main_Equlizer_Config)	(int Aud_fd, TVFE_Audio_CMD_st *TVFE_Config);$/;"	m	struct:TVFE_Operation
Audio_Set_MasterMuteStatus	dsp_ioctl.h	/^	TVFE_Audio_Status_e (*Audio_Set_MasterMuteStatus)		(int Aud_fd, TVFE_Audio_CMD_st *TVFE_Config);$/;"	m	struct:TVFE_Operation
Audio_Set_Mute_Config	dsp_ioctl.h	/^	TVFE_Audio_Status_e (*Audio_Set_Mute_Config)			(int Aud_fd, TVFE_Audio_CMD_st *TVFE_Config);$/;"	m	struct:TVFE_Operation
Audio_Set_Output_Config	dsp_ioctl.h	/^	TVFE_Audio_Status_e (*Audio_Set_Output_Config)			(int Aud_fd, TVFE_Audio_CMD_st *TVFE_Config);$/;"	m	struct:TVFE_Operation
Audio_Set_Output_Selection	dsp_ioctl.h	/^	TVFE_Audio_Status_e (*Audio_Set_Output_Selection)		(int Aud_fd, TVFE_Audio_CMD_st *TVFE_Config);$/;"	m	struct:TVFE_Operation
Audio_Set_SIF_Detect_Config	dsp_ioctl.h	/^	TVFE_Audio_Status_e (*Audio_Set_SIF_Detect_Config)			(int Aud_fd, TVFE_Audio_CMD_st *TVFE_Config);$/;"	m	struct:TVFE_Operation
Audio_Set_SIF_Over_Modulation_Config	dsp_ioctl.h	/^	TVFE_Audio_Status_e (*Audio_Set_SIF_Over_Modulation_Config)	(int Aud_fd, TVFE_Audio_CMD_st *TVFE_Config);$/;"	m	struct:TVFE_Operation
Audio_Set_SUNSUR_Config	dsp_ioctl.h	/^	TVFE_Audio_Status_e (*Audio_Set_SUNSUR_Config)			(int Aud_fd, TVFE_Audio_CMD_st *TVFE_Config);$/;"	m	struct:TVFE_Operation
Audio_Set_SourceType	dsp_ioctl.h	/^	TVFE_Audio_Status_e (*Audio_Set_SourceType)				(int Aud_fd, TVFE_Audio_CMD_st *TVFE_Config);$/;"	m	struct:TVFE_Operation
Audio_Set_Spdif_ChannelStatus	dsp_ioctl.h	/^	TVFE_Audio_Status_e (*Audio_Set_Spdif_ChannelStatus)	(int Aud_fd, TVFE_Audio_CMD_st *TVFE_Config);$/;"	m	struct:TVFE_Operation
Audio_Set_Treble	dsp_ioctl.h	/^	TVFE_Audio_Status_e (*Audio_Set_Treble)					(int Aud_fd, TVFE_Audio_CMD_st *TVFE_Config);$/;"	m	struct:TVFE_Operation
Audio_Set_Volume	dsp_ioctl.h	/^	TVFE_Audio_Status_e (*Audio_Set_Volume)					(int Aud_fd, TVFE_Audio_CMD_st *TVFE_Config);$/;"	m	struct:TVFE_Operation
AvgByteRate	wave_fmt.h	/^	UINT16   AvgByteRate;$/;"	m	struct:tRAwaveformat_tag
BAKBLK	colortext.h	26;"	d
BAKBLU	colortext.h	30;"	d
BAKCYN	colortext.h	32;"	d
BAKGRN	colortext.h	28;"	d
BAKPUR	colortext.h	31;"	d
BAKRED	colortext.h	27;"	d
BAKWHT	colortext.h	33;"	d
BAKYLW	colortext.h	29;"	d
BAMUT	drv_ssd.h	/^            UINT32 BAMUT     :1;$/;"	m	struct:__anon125::__anon126::__anon127
BDLPCMWAVEFORMAT	wave_fmt.h	/^} __attribute__ ((packed)) BDLPCMWAVEFORMAT;$/;"	t	typeref:struct:tBDLPCMWAVEFORMAT
BLDBLK	colortext.h	10;"	d
BLDBLU	colortext.h	14;"	d
BLDCYN	colortext.h	16;"	d
BLDGRN	colortext.h	12;"	d
BLDPUR	colortext.h	15;"	d
BLDRED	colortext.h	11;"	d
BLDWHT	colortext.h	17;"	d
BLDYLW	colortext.h	13;"	d
BPILOT	drv_ssd.h	/^            UINT32 BPILOT    :1;$/;"	m	struct:__anon125::__anon126::__anon127
BPP	ffplay.c	429;"	d	file:
BSFeed128K	avplayer.c	44;"	d	file:
BSFeed128K	dsp_ioctl.c	47;"	d	file:
BSFeed128K	playback.c	177;"	d	file:
BSFeed224K	avplayer.c	45;"	d	file:
BSFeed224K	dsp_ioctl.c	48;"	d	file:
BSFeed224K	playback.c	178;"	d	file:
BSFeed256K	avplayer.c	46;"	d	file:
BSFeed256K	dsp_ioctl.c	49;"	d	file:
BSFeed256K	playback.c	179;"	d	file:
BSFeed32K	avplayer.c	40;"	d	file:
BSFeed32K	dsp_ioctl.c	43;"	d	file:
BSFeed32K	playback.c	173;"	d	file:
BSFeed384K	avplayer.c	47;"	d	file:
BSFeed384K	dsp_ioctl.c	50;"	d	file:
BSFeed384K	playback.c	180;"	d	file:
BSFeed40K	avplayer.c	41;"	d	file:
BSFeed40K	dsp_ioctl.c	44;"	d	file:
BSFeed40K	playback.c	174;"	d	file:
BSFeed48K	avplayer.c	42;"	d	file:
BSFeed48K	dsp_ioctl.c	45;"	d	file:
BSFeed48K	playback.c	175;"	d	file:
BSFeed512K	avplayer.c	48;"	d	file:
BSFeed512K	dsp_ioctl.c	51;"	d	file:
BSFeed512K	playback.c	181;"	d	file:
BSFeed640K	avplayer.c	49;"	d	file:
BSFeed640K	dsp_ioctl.c	52;"	d	file:
BSFeed640K	playback.c	182;"	d	file:
BSFeed64K	avplayer.c	43;"	d	file:
BSFeed64K	dsp_ioctl.c	46;"	d	file:
BSFeed64K	playback.c	176;"	d	file:
BSFeed700K	avplayer.c	50;"	d	file:
BSType	wave_fmt.h	/^    UINT16      BSType;$/;"	m	struct:tAACWAVEFORMAT
BYTE	types.h	/^typedef unsigned char		BYTE;$/;"	t
Band1_0100HZ	tvfe_audio.h	/^    INT8 Band1_0100HZ;$/;"	m	struct:_TVFE_Audio_Equalizer_Config_t
Band2_0300HZ	tvfe_audio.h	/^    INT8 Band2_0300HZ;$/;"	m	struct:_TVFE_Audio_Equalizer_Config_t
Band3_1000HZ	tvfe_audio.h	/^    INT8 Band3_1000HZ;$/;"	m	struct:_TVFE_Audio_Equalizer_Config_t
Band4_3000HZ	tvfe_audio.h	/^    INT8 Band4_3000HZ;$/;"	m	struct:_TVFE_Audio_Equalizer_Config_t
Band5_8000HZ	tvfe_audio.h	/^    INT8 Band5_8000HZ;$/;"	m	struct:_TVFE_Audio_Equalizer_Config_t
Bass	audio_api.c	/^    UINT8 Bass;$/;"	m	struct:_APP_AudioSoundModeSetting_t	file:
BitRate	wave_fmt.h	/^    UINT16       BitRate;$/;"	m	struct:tEncodeMPEGWAVEFORMAT
Boolean	types.h	/^typedef char Boolean;$/;"	t
CC	Makefile	/^CC = $(CROSS_COMPILE)gcc$/;"	m
CFC	drv_ssd.h	/^            UINT32 CFC       :1;$/;"	m	struct:__anon125::__anon128::__anon129
CFLAGS	Makefile	/^CFLAGS = -Wall -O0 $(FFMPEG_CFLAGS)$/;"	m
CGMS_type	dsp_ioctl.h	/^		UINT8 CGMS_type;$/;"	m	struct:TVFE_Audio_CMD::__anon45
CO_LOCKED	drv_ssd.h	/^            UINT32 CO_LOCKED :1;$/;"	m	struct:__anon125::__anon128::__anon129
CPP	Makefile	/^CPP = $(CC) -E$/;"	m
CROSS_COMPILE	Makefile	/^CROSS_COMPILE=$(TOOL_CHAIN_DIR)\/mips-linux-gnu-$/;"	m
CYG_PROFILE_H	cyg-profile.h	13;"	d
Carrier1_Magnitude_Threshold	tvfe_audio.h	/^	INT8  Carrier1_Magnitude_Threshold;$/;"	m	struct:_TVFE_Audio_SIF_Magnitude_Detect_Config_t
CleanAudioBuf	playback.c	/^int CleanAudioBuf()$/;"	f
Color_Space_st	tvfe_api.h	/^} Color_Space_st;$/;"	t	typeref:struct:__anon107
Control	tvfe_api.h	/^    TVFE_AudioFrontEndControl_t Control;$/;"	m	struct:__anon123
DBG_MUTE_COMMAND	tvfe_api.h	35;"	d
DECIMAL_BASE	tvfe_api.h	29;"	d
DECODED_AUDIO_BUFFER_SIZE	player.c	13;"	d	file:
DEC_Adjust_Level	tvfe_audio.h	/^	INT8 DEC_Adjust_Level;		\/\/applied for stereo or dual path$/;"	m	struct:_TVFE_Audio_Level_Adjust_t
DEFAULT_AV_SYNC_TYPE	avplayer.c	84;"	d	file:
DEFAULT_AV_SYNC_TYPE	tutorial08.c	40;"	d	file:
DRV_AUD_DIGITAL_MATRIX_LANGUAGEA_AUTO_OFF	dsp_ioctl.h	/^    DRV_AUD_DIGITAL_MATRIX_LANGUAGEA_AUTO_OFF,$/;"	e	enum:__anon19
DRV_AUD_DIGITAL_MATRIX_LANGUAGEA_AUTO_ON	dsp_ioctl.h	/^    DRV_AUD_DIGITAL_MATRIX_LANGUAGEA_AUTO_ON,$/;"	e	enum:__anon19
DRV_AUD_DIGITAL_MATRIX_LANGUAGEB_AUTO_OFF	dsp_ioctl.h	/^    DRV_AUD_DIGITAL_MATRIX_LANGUAGEB_AUTO_OFF,$/;"	e	enum:__anon19
DRV_AUD_DIGITAL_MATRIX_LANGUAGEB_AUTO_ON	dsp_ioctl.h	/^    DRV_AUD_DIGITAL_MATRIX_LANGUAGEB_AUTO_ON,$/;"	e	enum:__anon19
DRV_AUD_DIGITAL_MATRIX_MONO_AUTO_OFF	dsp_ioctl.h	/^    DRV_AUD_DIGITAL_MATRIX_MONO_AUTO_OFF,$/;"	e	enum:__anon19
DRV_AUD_DIGITAL_MATRIX_STEREO_AUTO_OFF	dsp_ioctl.h	/^    DRV_AUD_DIGITAL_MATRIX_STEREO_AUTO_OFF          = 0,$/;"	e	enum:__anon19
DRV_AUD_DIGITAL_MATRIX_SWAP_AUTO_OFF	dsp_ioctl.h	/^    DRV_AUD_DIGITAL_MATRIX_SWAP_AUTO_OFF,$/;"	e	enum:__anon19
DRV_AUD_DIGITAL_MATRIX_UNUSED	dsp_ioctl.h	/^    DRV_AUD_DIGITAL_MATRIX_UNUSED,$/;"	e	enum:__anon19
DRV_AUD_PROCESS_PATH_AUX1	dsp_ioctl.h	/^    DRV_AUD_PROCESS_PATH_AUX1,$/;"	e	enum:__anon18
DRV_AUD_PROCESS_PATH_AUX2	dsp_ioctl.h	/^    DRV_AUD_PROCESS_PATH_AUX2,$/;"	e	enum:__anon18
DRV_AUD_PROCESS_PATH_AUX3	dsp_ioctl.h	/^    DRV_AUD_PROCESS_PATH_AUX3,$/;"	e	enum:__anon18
DRV_AUD_PROCESS_PATH_CENTER	dsp_ioctl.h	/^    DRV_AUD_PROCESS_PATH_CENTER,$/;"	e	enum:__anon18
DRV_AUD_PROCESS_PATH_MAIN	dsp_ioctl.h	/^    DRV_AUD_PROCESS_PATH_MAIN            = 0,$/;"	e	enum:__anon18
DRV_AUD_PROCESS_PATH_SUBWOOFER	dsp_ioctl.h	/^    DRV_AUD_PROCESS_PATH_SUBWOOFER,$/;"	e	enum:__anon18
DRV_AUD_PROCESS_PATH_SURROUND	dsp_ioctl.h	/^    DRV_AUD_PROCESS_PATH_SURROUND,$/;"	e	enum:__anon18
DRV_AUD_SAP_MODE	dsp_ioctl.h	/^    DRV_AUD_SAP_MODE,$/;"	e	enum:__anon15
DRV_AUD_SRC_1	dsp_ioctl.h	/^    DRV_AUD_SRC_1       = 0,$/;"	e	enum:__anon16
DRV_AUD_SRC_2	dsp_ioctl.h	/^    DRV_AUD_SRC_2,$/;"	e	enum:__anon16
DRV_AUD_SRC_DEC	dsp_ioctl.h	/^    DRV_AUD_SRC_DEC,$/;"	e	enum:__anon17
DRV_AUD_SRC_DIGITAL_AUDIO_INPUT	dsp_ioctl.h	/^    DRV_AUD_SRC_DIGITAL_AUDIO_INPUT,$/;"	e	enum:__anon17
DRV_AUD_SRC_DISABLED	dsp_ioctl.h	/^    DRV_AUD_SRC_DISABLED                    = 0,$/;"	e	enum:__anon17
DRV_AUD_SRC_MONO_SAP	dsp_ioctl.h	/^    DRV_AUD_SRC_MONO_SAP,$/;"	e	enum:__anon17
DRV_AUD_STEREO_MODE	dsp_ioctl.h	/^    DRV_AUD_STEREO_MODE,$/;"	e	enum:__anon15
DRV_AudBTSCDBXMode_t	dsp_ioctl.h	/^} DRV_AudBTSCDBXMode_t;$/;"	t	typeref:enum:__anon15
DRV_AudDigitalMatrix_t	dsp_ioctl.h	/^} DRV_AudDigitalMatrix_t;$/;"	t	typeref:enum:__anon19
DRV_AudFrontEndReg_t	drv_ssd.h	/^} DRV_AudFrontEndReg_t;$/;"	t	typeref:struct:__anon125
DRV_AudProcessPath_t	dsp_ioctl.h	/^} DRV_AudProcessPath_t;$/;"	t	typeref:enum:__anon18
DRV_AudSRCPath_t	dsp_ioctl.h	/^} DRV_AudSRCPath_t;$/;"	t	typeref:enum:__anon16
DRV_AudSRCSource_t	dsp_ioctl.h	/^} DRV_AudSRCSource_t;$/;"	t	typeref:enum:__anon17
DSPDEV_CLOSE	audio_api.c	/^int DSPDEV_CLOSE()$/;"	f
DSPDEV_CLOSE	dsp_api.c	/^int DSPDEV_CLOSE(int DSPfd)$/;"	f	signature:(int DSPfd)
DSPDEV_CLOSE	dsp_api.h	/^int DSPDEV_CLOSE(int DSPfd);$/;"	p	signature:(int DSPfd)
DSPDEV_CLOSE	playback.c	/^int DSPDEV_CLOSE()$/;"	f
DSPDEV_CleanAudioBuf	dsp_api.c	/^int DSPDEV_CleanAudioBuf(int DSPfd)$/;"	f	signature:(int DSPfd)
DSPDEV_CleanAudioBuf	dsp_api.h	/^int DSPDEV_CleanAudioBuf(int DSPfd);$/;"	p	signature:(int DSPfd)
DSPDEV_GetAudioWavefmt	dsp_api.c	/^int DSPDEV_GetAudioWavefmt(int DSPfd,WAVFORMATMACRO *wfmt)$/;"	f	signature:(int DSPfd,WAVFORMATMACRO *wfmt)
DSPDEV_GetAudioWavefmt	dsp_api.h	/^int DSPDEV_GetAudioWavefmt(int DSPfd,WAVFORMATMACRO *wfmt);$/;"	p	signature:(int DSPfd,WAVFORMATMACRO *wfmt)
DSPDEV_GetBSFreeSize	dsp_api.c	/^int DSPDEV_GetBSFreeSize(int DSPfd)$/;"	f	signature:(int DSPfd)
DSPDEV_GetBSFreeSize	dsp_api.h	/^int DSPDEV_GetBSFreeSize(int DSPfd);$/;"	p	signature:(int DSPfd)
DSPDEV_OPEN	audio_api.c	/^int DSPDEV_OPEN()$/;"	f
DSPDEV_OPEN	dsp_api.c	/^int DSPDEV_OPEN()$/;"	f
DSPDEV_OPEN	dsp_api.h	/^int DSPDEV_OPEN();$/;"	p	signature:()
DSPDEV_OPEN	playback.c	/^int DSPDEV_OPEN()$/;"	f
DSPDEV_SetAudioWavefmt	dsp_api.c	/^int DSPDEV_SetAudioWavefmt(int DSPfd,int AudioCodecType)$/;"	f	signature:(int DSPfd,int AudioCodecType)
DSPDEV_SetAudioWavefmt	dsp_api.h	/^int DSPDEV_SetAudioWavefmt(int DSPfd, int AudioCodecType);$/;"	p	signature:(int DSPfd, int AudioCodecType)
DSP_AUDIF_Clean_Audio_Buf	dsp_ioctl.h	548;"	d
DSP_AUDIF_Demute	dsp_ioctl.h	536;"	d
DSP_AUDIF_Enable_AC3TransCoding	dsp_ioctl.h	524;"	d
DSP_AUDIF_Get_Aux1MuteStatus	dsp_ioctl.h	528;"	d
DSP_AUDIF_Get_Aux2MuteStatus	dsp_ioctl.h	529;"	d
DSP_AUDIF_Get_BarrierPtr	dsp_ioctl.h	544;"	d
DSP_AUDIF_Get_DdpFmt	dsp_ioctl.h	530;"	d
DSP_AUDIF_Get_DumpPtr	dsp_ioctl.h	545;"	d
DSP_AUDIF_Get_MainEqulizer	dsp_ioctl.h	526;"	d
DSP_AUDIF_Get_MasterMuteStatus	dsp_ioctl.h	527;"	d
DSP_AUDIF_Get_audBSbuf_free	dsp_ioctl.h	538;"	d
DSP_AUDIF_Get_audBSbuf_size	dsp_ioctl.h	539;"	d
DSP_AUDIF_Get_audBSbuf_start	dsp_ioctl.h	537;"	d
DSP_AUDIF_Init_Wave_Audio	dsp_ioctl.h	549;"	d
DSP_AUDIF_RampUp_PCM_Out	dsp_ioctl.h	513;"	d
DSP_AUDIF_Set_AVL	dsp_ioctl.h	511;"	d
DSP_AUDIF_Set_AdcSourceSelect	dsp_ioctl.h	500;"	d
DSP_AUDIF_Set_AtvRamp	dsp_ioctl.h	518;"	d
DSP_AUDIF_Set_Aux1MuteStatus	dsp_ioctl.h	514;"	d
DSP_AUDIF_Set_Aux1Volume	dsp_ioctl.h	507;"	d
DSP_AUDIF_Set_Aux2MuteStatus	dsp_ioctl.h	515;"	d
DSP_AUDIF_Set_Aux2Volume	dsp_ioctl.h	508;"	d
DSP_AUDIF_Set_AuxChannelOutput	dsp_ioctl.h	499;"	d
DSP_AUDIF_Set_Balance	dsp_ioctl.h	505;"	d
DSP_AUDIF_Set_Bass	dsp_ioctl.h	501;"	d
DSP_AUDIF_Set_ChannelMap	dsp_ioctl.h	506;"	d
DSP_AUDIF_Set_Decoder_OPT	dsp_ioctl.h	522;"	d
DSP_AUDIF_Set_DumpPtr	dsp_ioctl.h	546;"	d
DSP_AUDIF_Set_EffectMode	dsp_ioctl.h	509;"	d
DSP_AUDIF_Set_FIFOEnable	dsp_ioctl.h	534;"	d
DSP_AUDIF_Set_FIFOReset	dsp_ioctl.h	535;"	d
DSP_AUDIF_Set_HDMI	dsp_ioctl.h	542;"	d
DSP_AUDIF_Set_LipSync_DelayTime	dsp_ioctl.h	519;"	d
DSP_AUDIF_Set_MainChannelOutput	dsp_ioctl.h	498;"	d
DSP_AUDIF_Set_MainEqulizer	dsp_ioctl.h	503;"	d
DSP_AUDIF_Set_MasterMuteStatus	dsp_ioctl.h	512;"	d
DSP_AUDIF_Set_MasterVolume	dsp_ioctl.h	497;"	d
DSP_AUDIF_Set_Pause	dsp_ioctl.h	543;"	d
DSP_AUDIF_Set_PcmOutputPhase	dsp_ioctl.h	520;"	d
DSP_AUDIF_Set_Play	dsp_ioctl.h	541;"	d
DSP_AUDIF_Set_SPDIF	dsp_ioctl.h	516;"	d
DSP_AUDIF_Set_SPDIF_SmpRate	dsp_ioctl.h	517;"	d
DSP_AUDIF_Set_SUNSUR_OnOff	dsp_ioctl.h	510;"	d
DSP_AUDIF_Set_SUNSUR_Param	dsp_ioctl.h	521;"	d
DSP_AUDIF_Set_SampleRate	dsp_ioctl.h	533;"	d
DSP_AUDIF_Set_SourceType	dsp_ioctl.h	525;"	d
DSP_AUDIF_Set_Spdif_ChannelStatus	dsp_ioctl.h	523;"	d
DSP_AUDIF_Set_Stop	dsp_ioctl.h	540;"	d
DSP_AUDIF_Set_Treble	dsp_ioctl.h	502;"	d
DSP_AUDIF_TestTone_mode	dsp_ioctl.h	531;"	d
DSP_AUDIF_UnInit_SpdifIn	dsp_ioctl.h	532;"	d
DSP_AUDIF_Update_Dec1_SampleRate	dsp_ioctl.h	547;"	d
DSP_DEVNAME	audio_api.c	25;"	d	file:
DSP_DEVNAME	dsp_api.c	19;"	d	file:
DSP_DEVNAME	dsp_ioctl.c	33;"	d	file:
DSP_DEVNAME	playback.c	80;"	d	file:
DSP_IOCTL_CMD	dsp_ioctl.h	/^typedef struct DSP_IOCTL_CMD {$/;"	s
DSP_IOCTL_CMD	dsp_ioctl.h	/^} __attribute__((packed)) DSP_IOCTL_CMD;$/;"	t	typeref:struct:DSP_IOCTL_CMD
DSP_IOC_MAGIC	dsp_ioctl.h	495;"	d
DSP_IOC_MAXNR	dsp_ioctl.h	492;"	d
DSP_MAJOR_NR	audio_api.c	26;"	d	file:
DSP_MAJOR_NR	dsp_api.c	20;"	d	file:
DSP_MAJOR_NR	dsp_ioctl.c	34;"	d	file:
DSP_MAJOR_NR	playback.c	81;"	d	file:
DSP_MINOR_NR	audio_api.c	27;"	d	file:
DSP_MINOR_NR	dsp_api.c	21;"	d	file:
DSP_MINOR_NR	dsp_ioctl.c	35;"	d	file:
DSP_MINOR_NR	playback.c	82;"	d	file:
DSP_SET_MUTE	dsp_ioctl.h	504;"	d
DSP_TVFE_AudioPowerControl	dsp_ioctl.h	590;"	d
DSP_TVFE_Audio_Get_FrontEndParam	dsp_ioctl.h	594;"	d
DSP_TVFE_Audio_Get_Main_Equlizer_Config	dsp_ioctl.h	570;"	d
DSP_TVFE_Audio_Get_MasterMuteStatus	dsp_ioctl.h	587;"	d
DSP_TVFE_Audio_Initial	dsp_ioctl.h	589;"	d
DSP_TVFE_Audio_Lip_Sync_Config	dsp_ioctl.h	580;"	d
DSP_TVFE_Audio_PCM_Output_Phase_Config	dsp_ioctl.h	581;"	d
DSP_TVFE_Audio_SPDIF_Output_Config	dsp_ioctl.h	578;"	d
DSP_TVFE_Audio_Set_AC3TransCoding	dsp_ioctl.h	588;"	d
DSP_TVFE_Audio_Set_AUX_Volume	dsp_ioctl.h	572;"	d
DSP_TVFE_Audio_Set_AVL_Config	dsp_ioctl.h	573;"	d
DSP_TVFE_Audio_Set_AtvRamp	dsp_ioctl.h	579;"	d
DSP_TVFE_Audio_Set_Balance	dsp_ioctl.h	571;"	d
DSP_TVFE_Audio_Set_Bass	dsp_ioctl.h	567;"	d
DSP_TVFE_Audio_Set_Effect_Mode	dsp_ioctl.h	565;"	d
DSP_TVFE_Audio_Set_HEAAC_Output	dsp_ioctl.h	583;"	d
DSP_TVFE_Audio_Set_Level_Adjust_Config	dsp_ioctl.h	575;"	d
DSP_TVFE_Audio_Set_Main_Equlizer_Config	dsp_ioctl.h	569;"	d
DSP_TVFE_Audio_Set_MasterMuteStatus	dsp_ioctl.h	585;"	d
DSP_TVFE_Audio_Set_Mute_Config	dsp_ioctl.h	574;"	d
DSP_TVFE_Audio_Set_Output_Config	dsp_ioctl.h	563;"	d
DSP_TVFE_Audio_Set_Output_Selection	dsp_ioctl.h	564;"	d
DSP_TVFE_Audio_Set_SIFHandler	dsp_ioctl.h	595;"	d
DSP_TVFE_Audio_Set_SIF_Connect	dsp_ioctl.h	593;"	d
DSP_TVFE_Audio_Set_SIF_Detect_Config	dsp_ioctl.h	577;"	d
DSP_TVFE_Audio_Set_SIF_Over_Modulation_Config	dsp_ioctl.h	576;"	d
DSP_TVFE_Audio_Set_SIF_Source	dsp_ioctl.h	592;"	d
DSP_TVFE_Audio_Set_SUNSUR_Config	dsp_ioctl.h	582;"	d
DSP_TVFE_Audio_Set_Sound_Source	dsp_ioctl.h	603;"	d
DSP_TVFE_Audio_Set_SourceType	dsp_ioctl.h	586;"	d
DSP_TVFE_Audio_Set_Spdif_ChannelStatus	dsp_ioctl.h	584;"	d
DSP_TVFE_Audio_Set_Treble	dsp_ioctl.h	568;"	d
DSP_TVFE_Audio_Set_Volume	dsp_ioctl.h	566;"	d
DSP_TVFE_GetSIFWorkingMode	dsp_ioctl.h	599;"	d
DSP_TVFE_GetSifAvailableMode	dsp_ioctl.h	601;"	d
DSP_TVFE_GetTunerValueType	dsp_ioctl.h	598;"	d
DSP_TVFE_SIF_SetCurrentMode	dsp_ioctl.h	597;"	d
DSP_TVFE_SetSifAvailableMode	dsp_ioctl.h	600;"	d
DSP_TVFE_SetTunerValueType	dsp_ioctl.h	596;"	d
DSPfd	audio_api.c	/^int DSPfd;$/;"	v
DSPfd	avplayer.c	/^int DSPfd;$/;"	v
DSPfd	dsp_ioctl.c	/^int DSPfd;$/;"	v
DSPfd	playback.c	/^int DSPfd;$/;"	v
DTV_FALSE	audio_api.c	874;"	d	file:
DTV_TRUE	audio_api.c	875;"	d	file:
DUMP	cyg-profile.c	28;"	d	file:
DWORD	types.h	/^typedef unsigned long		DWORD;$/;"	t
DacMapping_Data0_L	dsp_ioctl.h	/^    UINT8 DacMapping_Data0_L;$/;"	m	struct:__anon20
DacMapping_Data0_R	dsp_ioctl.h	/^    UINT8 DacMapping_Data0_R;$/;"	m	struct:__anon20
DacMapping_Data1_L	dsp_ioctl.h	/^    UINT8 DacMapping_Data1_L;$/;"	m	struct:__anon20
DacMapping_Data1_R	dsp_ioctl.h	/^    UINT8 DacMapping_Data1_R;$/;"	m	struct:__anon20
DacMapping_Data2_L	dsp_ioctl.h	/^    UINT8 DacMapping_Data2_L;$/;"	m	struct:__anon20
DacMapping_Data2_R	dsp_ioctl.h	/^    UINT8 DacMapping_Data2_R;$/;"	m	struct:__anon20
Delay	tvfe_audio.h	/^	UINT16 Delay;	\/\/0(0 ms) ~ 63(252 ms),(1 step is 4 ms)$/;"	m	struct:_TVFE_Audio_Lip_Sync_Config_t
Detect_Config	dsp_ioctl.h	/^		TVFE_Audio_SIF_Detect_Config_t Detect_Config;$/;"	m	struct:TVFE_Audio_CMD::__anon38
Digital_Adjust_Level	tvfe_audio.h	/^    INT8 Digital_Adjust_Level;	\/\/applied for digital path$/;"	m	struct:_TVFE_Audio_Level_Adjust_t
EIAJ_Sub_Carrier_Magnitude_Threshold_Low	tvfe_audio.h	/^	UINT8 EIAJ_Sub_Carrier_Magnitude_Threshold_Low;$/;"	m	struct:_TVFE_Audio_SIF_Magnitude_Detect_Config_t
EIAJ_Sub_Carrier_Magnitude_Threshold_Up	tvfe_audio.h	/^	UINT8 EIAJ_Sub_Carrier_Magnitude_Threshold_Up;$/;"	m	struct:_TVFE_Audio_SIF_Magnitude_Detect_Config_t
END	colortext.h	35;"	d
EQ	dsp_ioctl.h	/^		TVFE_Audio_Equalizer_Config_t EQ;$/;"	m	struct:TVFE_Audio_CMD::__anon30
EQTablePointer	audio_api.c	/^TVFE_Audio_Equalizer_Config_t* EQTablePointer = g_AudioSoundModeEqualizerSetting;$/;"	v
ERR_OUT	drv_ssd.h	/^            UINT32 ERR_OUT   :8;$/;"	m	struct:__anon125::__anon128::__anon129
Effect_Mode	dsp_ioctl.h	/^		TVFE_Audio_Effect_e Effect_Mode;$/;"	m	struct:TVFE_Audio_CMD::__anon33
Enable	tvfe_audio.h	/^	TVFE_BOOL Enable;$/;"	m	struct:_TVFE_Audio_Mute_t
Enable	tvfe_audio.h	/^    TVFE_BOOL Enable;$/;"	m	struct:_TVFE_Audio_Lip_Sync_Config_t
Enable_AVL_Func	dsp_ioctl.h	/^	Boolean Enable_AVL_Func;$/;"	m	struct:__anon22
Enable_AVL_Func	tvfe_audio.h	/^    TVFE_BOOL Enable_AVL_Func;$/;"	m	struct:_TVFE_Audio_AVL_Config_t
Enable_Adapter	tvfe_audio.h	/^	TVFE_BOOL Enable_Adapter;$/;"	m	struct:_TVFE_Audio_SIF_Over_Modulation_Config_t
Enable_Bypass	tvfe_audio.h	/^    TVFE_BOOL Enable_Bypass;$/;"	m	struct:_TVFE_Audio_Equalizer_Config_t
Enable_Peak_Mode_With_ClipManagement	tvfe_audio.h	/^    TVFE_BOOL Enable_Peak_Mode_With_ClipManagement;$/;"	m	struct:_TVFE_Audio_AVL_Config_t
Enable_Sub_Carrier_Detect	tvfe_audio.h	/^	TVFE_BOOL	 Enable_Sub_Carrier_Detect;$/;"	m	struct:_TVFE_Audio_SIF_Magnitude_Detect_Config_t
Enable_Weight_Filter	tvfe_audio.h	/^    TVFE_BOOL Enable_Weight_Filter;$/;"	m	struct:_TVFE_Audio_AVL_Config_t
EncodeMPEGWAVEFORMAT	wave_fmt.h	/^}   __attribute__ ((packed)) EncodeMPEGWAVEFORMAT;$/;"	t	typeref:struct:tEncodeMPEGWAVEFORMAT
FALSE	types.h	21;"	d
FB_DEVICE	player.c	177;"	d	file:
FFMPEG_CFLAGS	Makefile	/^FFMPEG_CFLAGS = -I$(FFMPEG_PATH)\/include$/;"	m
FFMPEG_LDFLAGS	Makefile	/^FFMPEG_LDFLAGS = -L$(FFMPEG_PATH)\/lib -lavutil -lavcodec -lavformat -lz -lm -lswscale$/;"	m
FFMPEG_PATH	Makefile	/^FFMPEG_PATH = \/home\/mark\/SVN\/kernelteam\/OpenSource\/ffmpeg-0.7.9\/MIPS_FFMPEG_LIB$/;"	m
FF_ALLOC_EVENT	ffplay.c	273;"	d	file:
FF_ALLOC_EVENT	tutorial08.c	36;"	d	file:
FF_QUIT_EVENT	ffplay.c	275;"	d	file:
FF_QUIT_EVENT	tutorial08.c	38;"	d	file:
FF_REFRESH_EVENT	ffplay.c	274;"	d	file:
FF_REFRESH_EVENT	tutorial08.c	37;"	d	file:
FILTBW_STAT	drv_ssd.h	/^            UINT32 FILTBW_STAT       :2;$/;"	m	struct:__anon125::__anon138::__anon139
FI_ADU	drv_ssd.h	/^            UINT32 FI_ADU    :1;$/;"	m	struct:__anon125::__anon134::__anon135
FI_AST	drv_ssd.h	/^            UINT32 FI_AST    :1;$/;"	m	struct:__anon125::__anon134::__anon135
FM_AGCConfigParam	tvfe_api.h	/^	TVFE_AudioSIFAGCConfig_t  FM_AGCConfigParam;$/;"	m	struct:__anon122
FN_DEFAULT	cyg-profile.c	26;"	d	file:
FN_SIZE	cyg-profile.c	25;"	d	file:
FRAME_SKIP_FACTOR	avplayer.c	64;"	d	file:
FRAME_SKIP_FACTOR	ffplay.c	72;"	d	file:
FSM_VFE_INITIAL	tvfe_api.h	/^	FSM_VFE_INITIAL,$/;"	e	enum:__anon73
FSM_VFE_NOT_NO_SIGNAL	tvfe_api.h	/^	FSM_VFE_NOT_NO_SIGNAL,$/;"	e	enum:__anon73
FSM_VFE_NO_SIGNAL	tvfe_api.h	/^	FSM_VFE_NO_SIGNAL,$/;"	e	enum:__anon73
FSM_VFE_NO_SIGNAL_CHECK_STATUS	tvfe_api.h	/^	FSM_VFE_NO_SIGNAL_CHECK_STATUS,$/;"	e	enum:__anon73
FSM_VFE_NO_SIGNAL_INFORM_VOM	tvfe_api.h	/^	FSM_VFE_NO_SIGNAL_INFORM_VOM,$/;"	e	enum:__anon73
FSM_VFE_SIGNAL_IN_DEBOUNCE	tvfe_api.h	/^	FSM_VFE_SIGNAL_IN_DEBOUNCE,$/;"	e	enum:__anon73
FSM_VFE_SIGNAL_OUT_DEBOUNCE	tvfe_api.h	/^	FSM_VFE_SIGNAL_OUT_DEBOUNCE,$/;"	e	enum:__anon73
FSM_VFE_SIGNAL_STABLE	tvfe_api.h	/^	FSM_VFE_SIGNAL_STABLE,$/;"	e	enum:__anon73
FSM_VFE_SIGNAL_STABLE_UPDATE_RESOLUTION	tvfe_api.h	/^	FSM_VFE_SIGNAL_STABLE_UPDATE_RESOLUTION,$/;"	e	enum:__anon73
FSM_VFE_SIGNAL_UNSUPPORT	tvfe_api.h	/^	FSM_VFE_SIGNAL_UNSUPPORT,$/;"	e	enum:__anon73
FSM_VFE_TVDEC_NON_STANDARD	tvfe_api.h	/^	FSM_VFE_TVDEC_NON_STANDARD,$/;"	e	enum:__anon73
FSM_VFE_TVDEC_TUNER_FIND_NEW_SIGNAL	tvfe_api.h	/^	FSM_VFE_TVDEC_TUNER_FIND_NEW_SIGNAL,$/;"	e	enum:__anon73
FSM_VFE_TVDEC_TUNER_FIND_NEW_SIGNAL_DEBOUNCE	tvfe_api.h	/^	FSM_VFE_TVDEC_TUNER_FIND_NEW_SIGNAL_DEBOUNCE,$/;"	e	enum:__anon73
FSM_VFE_TVDEC_TUNER_SCANNING	tvfe_api.h	/^	FSM_VFE_TVDEC_TUNER_SCANNING,$/;"	e	enum:__anon73
FSM_VFE_TVDEC_TUNER_SCANNING_INITIAL	tvfe_api.h	/^	FSM_VFE_TVDEC_TUNER_SCANNING_INITIAL,$/;"	e	enum:__anon73
FSM_VFE_TVDEC_VCR	tvfe_api.h	/^	FSM_VFE_TVDEC_VCR,$/;"	e	enum:__anon73
FSM_VFE_UNUSED	tvfe_api.h	/^	FSM_VFE_UNUSED = 0xff,$/;"	e	enum:__anon73
FSM_VFE_VAFE_AUTOCOLOR_OFFSET_ADJUST	tvfe_api.h	/^	FSM_VFE_VAFE_AUTOCOLOR_OFFSET_ADJUST,$/;"	e	enum:__anon73
FSM_VFE_VAFE_AUTOTUNE	tvfe_api.h	/^	FSM_VFE_VAFE_AUTOTUNE,$/;"	e	enum:__anon73
FSM_VFE_VAFE_HW_AUTOCALIBRATION	tvfe_api.h	/^	FSM_VFE_VAFE_HW_AUTOCALIBRATION,$/;"	e	enum:__anon73
FSM_VFE_VAFE_HW_AUTO_GAIN	tvfe_api.h	/^	FSM_VFE_VAFE_HW_AUTO_GAIN,$/;"	e	enum:__anon73
FSM_VFE_VAFE_HW_AUTO_OFFSET	tvfe_api.h	/^	FSM_VFE_VAFE_HW_AUTO_OFFSET,$/;"	e	enum:__anon73
FSM_VFE_VAFE_MODE_DETECT	tvfe_api.h	/^	FSM_VFE_VAFE_MODE_DETECT,$/;"	e	enum:__anon73
FSM_VFE_VAFE_SOG_BOUNDARY_DETECT	tvfe_api.h	/^	FSM_VFE_VAFE_SOG_BOUNDARY_DETECT,$/;"	e	enum:__anon73
FS_11K	dsp_ioctl.h	17;"	d
FS_128K	dsp_ioctl.h	28;"	d
FS_12K	dsp_ioctl.h	18;"	d
FS_16K	dsp_ioctl.h	19;"	d
FS_176K	dsp_ioctl.h	29;"	d
FS_192K	dsp_ioctl.h	30;"	d
FS_22K	dsp_ioctl.h	20;"	d
FS_24K	dsp_ioctl.h	21;"	d
FS_32K	dsp_ioctl.h	22;"	d
FS_44K	dsp_ioctl.h	23;"	d
FS_48K	dsp_ioctl.h	24;"	d
FS_64K	dsp_ioctl.h	25;"	d
FS_88K	dsp_ioctl.h	26;"	d
FS_8K	dsp_ioctl.h	16;"	d
FS_96K	dsp_ioctl.h	27;"	d
FS_MAX	dsp_ioctl.h	31;"	d
FUNC_TRACE_FLAG	Makefile	/^FUNC_TRACE_FLAG = -finstrument-functions$/;"	m
FilterPriv	ffplay.c	/^} FilterPriv;$/;"	t	typeref:struct:__anon5	file:
Filter_BandWidth	tvfe_audio.h	/^	UINT8 Filter_BandWidth;$/;"	m	struct:_TVFE_Audio_SIF_Over_Modulation_Config_t
FrontEndParam	dsp_ioctl.h	/^		TVFE_AudioFrontEndParam_t FrontEndParam;$/;"	m	struct:TVFE_Audio_CMD::__anon51
GDU	drv_ssd.h	/^            UINT32 GDU       :1;$/;"	m	struct:__anon125::__anon126::__anon127
GPP	Makefile	/^GPP = $(CROSS_COMPILE)g++$/;"	m
GST	drv_ssd.h	/^            UINT32 GST       :1;$/;"	m	struct:__anon125::__anon126::__anon127
Get_FrontEndParam	dsp_ioctl.h	/^	}Get_FrontEndParam;$/;"	m	union:TVFE_Audio_CMD	typeref:struct:TVFE_Audio_CMD::__anon51
Get_Main_Equlizer_Config	dsp_ioctl.h	/^	}Get_Main_Equlizer_Config;$/;"	m	union:TVFE_Audio_CMD	typeref:struct:TVFE_Audio_CMD::__anon30
Get_MasterMuteStatus	dsp_ioctl.h	/^	}Get_MasterMuteStatus;$/;"	m	union:TVFE_Audio_CMD	typeref:struct:TVFE_Audio_CMD::__anon47
HPDandTerminationCallBack	tvfe_api.h	/^	fHPDandTerminationCallBack HPDandTerminationCallBack;$/;"	m	struct:__anon110
HW_ADU	drv_ssd.h	/^            UINT32 HW_ADU    :1;$/;"	m	struct:__anon125::__anon134::__anon135
HW_AST	drv_ssd.h	/^            UINT32 HW_AST    :1;$/;"	m	struct:__anon125::__anon134::__anon135
INF_DEV_STA_REG	drv_ssd.h	/^        } INF_DEV_STA_REG;$/;"	m	union:__anon125::__anon126	typeref:struct:__anon125::__anon126::__anon127
INF_LEV_MON_REG	drv_ssd.h	/^        } INF_LEV_MON_REG;$/;"	m	union:__anon125::__anon132	typeref:struct:__anon125::__anon132::__anon133
INF_MPX_LEVEL_REG	drv_ssd.h	/^        } INF_MPX_LEVEL_REG;$/;"	m	union:__anon125::__anon134	typeref:struct:__anon125::__anon134::__anon135
INF_NIC_ADD_REG	drv_ssd.h	/^        } INF_NIC_ADD_REG;$/;"	m	union:__anon125::__anon130	typeref:struct:__anon125::__anon130::__anon131
INF_NIC_STA_REG	drv_ssd.h	/^        } INF_NIC_STA_REG;$/;"	m	union:__anon125::__anon128	typeref:struct:__anon125::__anon128::__anon129
INF_NOISELEVEL_REG	drv_ssd.h	/^        } INF_NOISELEVEL_REG;$/;"	m	union:__anon125::__anon136	typeref:struct:__anon125::__anon136::__anon137
INF_OVMADAPT_REG	drv_ssd.h	/^        } INF_OVMADAPT_REG;$/;"	m	union:__anon125::__anon138	typeref:struct:__anon125::__anon138::__anon139
INITSTAT	drv_ssd.h	/^            UINT32 INITSTAT  :1;$/;"	m	struct:__anon125::__anon126::__anon127
INT16	types.h	/^typedef short 			INT16;$/;"	t
INT32	types.h	/^typedef int   			INT32;$/;"	t
INT64	types.h	/^typedef long long 		INT64;$/;"	t
INT8	types.h	/^typedef signed char		INT8;$/;"	t
If_Channel_Swap	tvfe_audio.h	/^	TVFE_BOOL	If_Channel_Swap;$/;"	m	struct:_TVFE_Audio_Output_Config_t
Index	dsp_ioctl.h	/^		UINT8 Index;$/;"	m	struct:TVFE_Audio_CMD::__anon26
Index	dsp_ioctl.h	/^		UINT8 Index;$/;"	m	struct:TVFE_Audio_CMD::__anon27
Index	dsp_ioctl.h	/^		UINT8 Index;$/;"	m	struct:TVFE_Audio_CMD::__anon28
Index	dsp_ioctl.h	/^		UINT8 Index;$/;"	m	struct:TVFE_Audio_CMD::__anon29
LD	Makefile	/^LD = $(CROSS_COMPILE)ld$/;"	m
LDFLAGS	Makefile	/^LDFLAGS = $(FFMPEG_LDFLAGS)$/;"	m
LeftIndex	dsp_ioctl.h	/^		UINT8 LeftIndex;$/;"	m	struct:TVFE_Audio_CMD::__anon31
Level	tvfe_audio.h	/^    TVFE_Audio_AVL_Reference_Level_e Level;$/;"	m	struct:_TVFE_Audio_AVL_Config_t
Level_Adjust_Config	dsp_ioctl.h	/^		TVFE_Audio_Level_Adjust_t Level_Adjust_Config;$/;"	m	struct:TVFE_Audio_CMD::__anon36
Level_Thershold	tvfe_audio.h	/^	UINT8 Level_Thershold;$/;"	m	struct:_TVFE_Audio_SIF_Over_Modulation_Config_t
Lip_Sync_Config	dsp_ioctl.h	/^		TVFE_Audio_Lip_Sync_Config_t Lip_Sync_Config;$/;"	m	struct:TVFE_Audio_CMD::__anon41
Lip_Sync_Config	dsp_ioctl.h	/^	}Lip_Sync_Config;$/;"	m	union:TVFE_Audio_CMD	typeref:struct:TVFE_Audio_CMD::__anon41
MAX_AUDIOQ_SIZE	avplayer.c	54;"	d	file:
MAX_AUDIOQ_SIZE	tutorial08.c	30;"	d	file:
MAX_QUEUE_SIZE	ffplay.c	59;"	d	file:
MAX_VIDEOQ_SIZE	avplayer.c	55;"	d	file:
MAX_VIDEOQ_SIZE	tutorial08.c	31;"	d	file:
MIN_AUDIOQ_SIZE	ffplay.c	60;"	d	file:
MIN_FRAMES	avplayer.c	57;"	d	file:
MIN_FRAMES	ffplay.c	61;"	d	file:
MONLEVEL	drv_ssd.h	/^            UINT32 MONLEVEL  :24;$/;"	m	struct:__anon125::__anon132::__anon133
MP3FILENAME	dsp_ioctl.c	53;"	d	file:
MPEG1WAVEFORMAT	wave_fmt.h	/^} __attribute__ ((packed)) MPEG1WAVEFORMAT;$/;"	t	typeref:struct:mpeg1waveformat_tag
MPEGLAYER3WAVEFORMAT	wave_fmt.h	/^} __attribute__ ((packed)) MPEGLAYER3WAVEFORMAT;$/;"	t	typeref:struct:mpeglayer3waveformat_tag
MPEG_layer	wave_fmt.h	/^	UINT16       MPEG_layer;$/;"	m	struct:tEncodeMPEGWAVEFORMAT
MPXPLEV	drv_ssd.h	/^            UINT32 MPXPLEV   :18;$/;"	m	struct:__anon125::__anon134::__anon135
MPX_Magnitude_Threshold_Low	tvfe_audio.h	/^	UINT8 MPX_Magnitude_Threshold_Low;$/;"	m	struct:_TVFE_Audio_SIF_Magnitude_Detect_Config_t
MPX_Magnitude_Threshold_Up	tvfe_audio.h	/^	UINT8 MPX_Magnitude_Threshold_Up;$/;"	m	struct:_TVFE_Audio_SIF_Magnitude_Detect_Config_t
MUTE_DEBF	tvfe_api.h	39;"	d
MUTE_DEBF	tvfe_api.h	40;"	d
MUTE_DEBF	tvfe_api.h	42;"	d
MaxByteRate	wave_fmt.h	/^	UINT16   MaxByteRate;$/;"	m	struct:tRAwaveformat_tag
Mode	tvfe_audio.h	/^    TVFE_Audio_AVL_Decay_Time_e Mode;$/;"	m	struct:_TVFE_Audio_AVL_Config_t
Mono_Adjust_Level	tvfe_audio.h	/^    INT8 Mono_Adjust_Level;	\/\/applied for FM analog mono path$/;"	m	struct:_TVFE_Audio_Level_Adjust_t
Mute_Config	dsp_ioctl.h	/^	          TVFE_Audio_Mute_t Mute_Config;$/;"	m	struct:TVFE_Audio_CMD::__anon35
Mute_Delay	tvfe_audio.h	/^	UINT8 Mute_Delay;	\/\/wait for ramp dwon mute$/;"	m	struct:_TVFE_Audio_Mute_t
NACB	drv_ssd.h	/^            UINT32 NACB      :4;$/;"	m	struct:__anon125::__anon128::__anon129
NAMUT	drv_ssd.h	/^            UINT32 NAMUT     :1;$/;"	m	struct:__anon125::__anon126::__anon127
NDETCH_STAT	drv_ssd.h	/^            UINT32 NDETCH_STAT       :1;$/;"	m	struct:__anon125::__anon136::__anon137
NDETPB_STAT	drv_ssd.h	/^            UINT32 NDETPB_STAT       :1;$/;"	m	struct:__anon125::__anon136::__anon137
NICAM_Adjust_Level	tvfe_audio.h	/^    INT8 NICAM_Adjust_Level;	\/\/applied for NICAM path$/;"	m	struct:_TVFE_Audio_Level_Adjust_t
NICDU	drv_ssd.h	/^            UINT32 NICDU     :1;$/;"	m	struct:__anon125::__anon128::__anon129
NICDU_C	drv_ssd.h	/^            UINT32 NICDU_C   :1;$/;"	m	struct:__anon125::__anon126::__anon127
NICST	drv_ssd.h	/^            UINT32 NICST     :1;$/;"	m	struct:__anon125::__anon128::__anon129
NICST_C	drv_ssd.h	/^            UINT32 NICST_C   :1;$/;"	m	struct:__anon125::__anon126::__anon127
NM	Makefile	/^NM = $(CROSS_COMPILE)nm$/;"	m
NOISELEVEL	drv_ssd.h	/^            UINT32 NOISELEVEL        :22;$/;"	m	struct:__anon125::__anon136::__anon137
OBJCOPY	Makefile	/^OBJCOPY = $(CROSS_COMPILE)objcopy$/;"	m
OBJDUMP	Makefile	/^OBJDUMP = $(CROSS_COMPILE)objdump$/;"	m
OSS_DEVICE	player.c	106;"	d	file:
OVM_SCALE_STAT	drv_ssd.h	/^            UINT32 OVM_SCALE_STAT    :12;$/;"	m	struct:__anon125::__anon138::__anon139
OffsetStep	dsp_ioctl.h	/^		INT8 OffsetStep;$/;"	m	struct:TVFE_Audio_CMD::__anon26
OnOFF_flag	dsp_ioctl.h	/^		UINT8 OnOFF_flag;$/;"	m	struct:TVFE_Audio_CMD::__anon44
OutputConfig	audio_api.c	/^	TVFE_Audio_Output_Config_t OutputConfig;$/;"	m	struct:_APP_PCB_AudioOutputConfig_t	file:
OutputConfig	tvfe_api.h	/^	TVFE_AudioOutputPinConfig_st OutputConfig;$/;"	m	struct:__anon115
OutputSelection	audio_api.c	/^	TVFE_Audio_Output_Selection_e OutputSelection;$/;"	m	struct:_APP_PCB_AudioOutputConfig_t	file:
Output_Config	dsp_ioctl.h	/^		TVFE_Audio_Output_Config_t Output_Config;$/;"	m	struct:TVFE_Audio_CMD::__anon24
Output_Port	tvfe_audio.h	/^	TVFE_Audio_Output_e Output_Port;$/;"	m	struct:_TVFE_Audio_Output_Config_t
Output_Selection	dsp_ioctl.h	/^		TVFE_Audio_Output_Selection_t Output_Selection;$/;"	m	struct:TVFE_Audio_CMD::__anon25
Over_Modulation_Config	dsp_ioctl.h	/^		TVFE_Audio_SIF_Over_Modulation_Config_t Over_Modulation_Config;$/;"	m	struct:TVFE_Audio_CMD::__anon37
PCMWAVEFORMAT	wave_fmt.h	/^} __attribute__ ((packed)) PCMWAVEFORMAT;$/;"	t	typeref:struct:tPCMwaveformat_tag
PCM_Output_Phase_Config	dsp_ioctl.h	/^	}PCM_Output_Phase_Config;$/;"	m	union:TVFE_Audio_CMD	typeref:struct:TVFE_Audio_CMD::__anon42
PLF_AVPin_e	plf_av_source.h	/^} PLF_AVPin_e;$/;"	t	typeref:enum:__anon141
PLF_AVSourcePinConfig	dsp_ioctl.h	/^		PLF_AVSourcePinConfig_st PLF_AVSourcePinConfig;$/;"	m	struct:TVFE_Audio_CMD::__anon55
PLF_AVSourcePinConfig_st	plf_av_source.h	/^} PLF_AVSourcePinConfig_st;$/;"	t	typeref:struct:__anon152
PLF_AVType_e	plf_av_source.h	/^} PLF_AVType_e;$/;"	t	typeref:enum:__anon140
PLF_INPUT_PIN_ADC_SOG	plf_av_source.h	/^	PLF_INPUT_PIN_ADC_SOG,$/;"	e	enum:__anon141
PLF_INPUT_PIN_ADC_SOY1	plf_av_source.h	/^	PLF_INPUT_PIN_ADC_SOY1,$/;"	e	enum:__anon141
PLF_INPUT_PIN_ADC_SOY2	plf_av_source.h	/^	PLF_INPUT_PIN_ADC_SOY2,$/;"	e	enum:__anon141
PLF_INPUT_PIN_AUD_ADC0	plf_av_source.h	/^	PLF_INPUT_PIN_AUD_ADC0,$/;"	e	enum:__anon141
PLF_INPUT_PIN_AUD_ADC1	plf_av_source.h	/^	PLF_INPUT_PIN_AUD_ADC1,$/;"	e	enum:__anon141
PLF_INPUT_PIN_AUD_ADC2	plf_av_source.h	/^	PLF_INPUT_PIN_AUD_ADC2,$/;"	e	enum:__anon141
PLF_INPUT_PIN_AUD_ADC3	plf_av_source.h	/^	PLF_INPUT_PIN_AUD_ADC3,$/;"	e	enum:__anon141
PLF_INPUT_PIN_AUD_DTV	plf_av_source.h	/^	PLF_INPUT_PIN_AUD_DTV,$/;"	e	enum:__anon141
PLF_INPUT_PIN_AUD_HDMI0	plf_av_source.h	/^	PLF_INPUT_PIN_AUD_HDMI0,$/;"	e	enum:__anon141
PLF_INPUT_PIN_AUD_HDMI1	plf_av_source.h	/^	PLF_INPUT_PIN_AUD_HDMI1,$/;"	e	enum:__anon141
PLF_INPUT_PIN_AUD_HDMI2	plf_av_source.h	/^	PLF_INPUT_PIN_AUD_HDMI2,$/;"	e	enum:__anon141
PLF_INPUT_PIN_AUD_SIF	plf_av_source.h	/^	PLF_INPUT_PIN_AUD_SIF,$/;"	e	enum:__anon141
PLF_INPUT_PIN_AUD_SPDIFIN	plf_av_source.h	/^	PLF_INPUT_PIN_AUD_SPDIFIN,$/;"	e	enum:__anon141
PLF_INPUT_PIN_AUD_STORAGE	plf_av_source.h	/^	PLF_INPUT_PIN_AUD_STORAGE,$/;"	e	enum:__anon141
PLF_INPUT_PIN_BIN	plf_av_source.h	/^	PLF_INPUT_PIN_BIN,$/;"	e	enum:__anon141
PLF_INPUT_PIN_C1	plf_av_source.h	/^	PLF_INPUT_PIN_C1,$/;"	e	enum:__anon141
PLF_INPUT_PIN_C2	plf_av_source.h	/^	PLF_INPUT_PIN_C2,$/;"	e	enum:__anon141
PLF_INPUT_PIN_CVBS0	plf_av_source.h	/^	PLF_INPUT_PIN_CVBS0,$/;"	e	enum:__anon141
PLF_INPUT_PIN_CVBS1	plf_av_source.h	/^	PLF_INPUT_PIN_CVBS1,$/;"	e	enum:__anon141
PLF_INPUT_PIN_CVBS2	plf_av_source.h	/^	PLF_INPUT_PIN_CVBS2,$/;"	e	enum:__anon141
PLF_INPUT_PIN_CVBS3	plf_av_source.h	/^	PLF_INPUT_PIN_CVBS3,$/;"	e	enum:__anon141
PLF_INPUT_PIN_CVBS4	plf_av_source.h	/^	PLF_INPUT_PIN_CVBS4,$/;"	e	enum:__anon141
PLF_INPUT_PIN_DTV	plf_av_source.h	/^	PLF_INPUT_PIN_DTV, \/*including parallel\/Serial\/VIF depends on tuner driver*\/$/;"	e	enum:__anon141
PLF_INPUT_PIN_GIN	plf_av_source.h	/^	PLF_INPUT_PIN_GIN,$/;"	e	enum:__anon141
PLF_INPUT_PIN_HDMI0	plf_av_source.h	/^	PLF_INPUT_PIN_HDMI0,$/;"	e	enum:__anon141
PLF_INPUT_PIN_HDMI1	plf_av_source.h	/^	PLF_INPUT_PIN_HDMI1,$/;"	e	enum:__anon141
PLF_INPUT_PIN_HDMI2	plf_av_source.h	/^	PLF_INPUT_PIN_HDMI2,$/;"	e	enum:__anon141
PLF_INPUT_PIN_PB1	plf_av_source.h	/^	PLF_INPUT_PIN_PB1,$/;"	e	enum:__anon141
PLF_INPUT_PIN_PB2	plf_av_source.h	/^	PLF_INPUT_PIN_PB2,$/;"	e	enum:__anon141
PLF_INPUT_PIN_PR1	plf_av_source.h	/^	PLF_INPUT_PIN_PR1,$/;"	e	enum:__anon141
PLF_INPUT_PIN_PR2	plf_av_source.h	/^	PLF_INPUT_PIN_PR2,$/;"	e	enum:__anon141
PLF_INPUT_PIN_RIN	plf_av_source.h	/^	PLF_INPUT_PIN_RIN,$/;"	e	enum:__anon141
PLF_INPUT_PIN_SARADC0	plf_av_source.h	/^	PLF_INPUT_PIN_SARADC0,$/;"	e	enum:__anon141
PLF_INPUT_PIN_SARADC1	plf_av_source.h	/^	PLF_INPUT_PIN_SARADC1,$/;"	e	enum:__anon141
PLF_INPUT_PIN_SARADC2	plf_av_source.h	/^	PLF_INPUT_PIN_SARADC2,$/;"	e	enum:__anon141
PLF_INPUT_PIN_STORAGE	plf_av_source.h	/^	PLF_INPUT_PIN_STORAGE,$/;"	e	enum:__anon141
PLF_INPUT_PIN_TYPE_ATV_TUNER	plf_av_source.h	/^	PLF_INPUT_PIN_TYPE_ATV_TUNER,$/;"	e	enum:__anon140
PLF_INPUT_PIN_TYPE_AUDIO_ADC	plf_av_source.h	/^	PLF_INPUT_PIN_TYPE_AUDIO_ADC,$/;"	e	enum:__anon140
PLF_INPUT_PIN_TYPE_CCIR656	plf_av_source.h	/^	PLF_INPUT_PIN_TYPE_CCIR656,$/;"	e	enum:__anon140
PLF_INPUT_PIN_TYPE_CVBS	plf_av_source.h	/^	PLF_INPUT_PIN_TYPE_CVBS,$/;"	e	enum:__anon140
PLF_INPUT_PIN_TYPE_DTV	plf_av_source.h	/^	PLF_INPUT_PIN_TYPE_DTV,$/;"	e	enum:__anon140
PLF_INPUT_PIN_TYPE_DVI	plf_av_source.h	/^	PLF_INPUT_PIN_TYPE_DVI,$/;"	e	enum:__anon140
PLF_INPUT_PIN_TYPE_HDMI	plf_av_source.h	/^	PLF_INPUT_PIN_TYPE_HDMI,$/;"	e	enum:__anon140
PLF_INPUT_PIN_TYPE_I2S	plf_av_source.h	/^	PLF_INPUT_PIN_TYPE_I2S,$/;"	e	enum:__anon140
PLF_INPUT_PIN_TYPE_MAX	plf_av_source.h	/^	PLF_INPUT_PIN_TYPE_MAX,$/;"	e	enum:__anon140
PLF_INPUT_PIN_TYPE_RGB	plf_av_source.h	/^	PLF_INPUT_PIN_TYPE_RGB,$/;"	e	enum:__anon140
PLF_INPUT_PIN_TYPE_SCART_AV	plf_av_source.h	/^	PLF_INPUT_PIN_TYPE_SCART_AV,$/;"	e	enum:__anon140
PLF_INPUT_PIN_TYPE_SCART_AV_RGB	plf_av_source.h	/^	PLF_INPUT_PIN_TYPE_SCART_AV_RGB,$/;"	e	enum:__anon140
PLF_INPUT_PIN_TYPE_SCART_SV	plf_av_source.h	/^	PLF_INPUT_PIN_TYPE_SCART_SV,$/;"	e	enum:__anon140
PLF_INPUT_PIN_TYPE_SIF	plf_av_source.h	/^	PLF_INPUT_PIN_TYPE_SIF,$/;"	e	enum:__anon140
PLF_INPUT_PIN_TYPE_SPDIF	plf_av_source.h	/^	PLF_INPUT_PIN_TYPE_SPDIF,$/;"	e	enum:__anon140
PLF_INPUT_PIN_TYPE_STORAGE	plf_av_source.h	/^	PLF_INPUT_PIN_TYPE_STORAGE,$/;"	e	enum:__anon140
PLF_INPUT_PIN_TYPE_SVIDEO	plf_av_source.h	/^	PLF_INPUT_PIN_TYPE_SVIDEO,$/;"	e	enum:__anon140
PLF_INPUT_PIN_TYPE_VIF	plf_av_source.h	/^	PLF_INPUT_PIN_TYPE_VIF,$/;"	e	enum:__anon140
PLF_INPUT_PIN_TYPE_YPBPR	plf_av_source.h	/^	PLF_INPUT_PIN_TYPE_YPBPR,$/;"	e	enum:__anon140
PLF_INPUT_PIN_Y1	plf_av_source.h	/^	PLF_INPUT_PIN_Y1,$/;"	e	enum:__anon141
PLF_INPUT_PIN_Y2	plf_av_source.h	/^	PLF_INPUT_PIN_Y2,$/;"	e	enum:__anon141
PLF_INPUT_TYPE_NULL	plf_av_source.h	/^	PLF_INPUT_TYPE_NULL      = 0,$/;"	e	enum:__anon140
PLF_NULL_PIN	plf_av_source.h	/^	PLF_NULL_PIN        = 0,$/;"	e	enum:__anon141
PLF_OUTPUT_PIN_AUD_ADC0	plf_av_source.h	/^	PLF_OUTPUT_PIN_AUD_ADC0,$/;"	e	enum:__anon141
PLF_OUTPUT_PIN_AUD_ADC1	plf_av_source.h	/^	PLF_OUTPUT_PIN_AUD_ADC1,$/;"	e	enum:__anon141
PLF_OUTPUT_PIN_AUD_ADC2	plf_av_source.h	/^	PLF_OUTPUT_PIN_AUD_ADC2,$/;"	e	enum:__anon141
PLF_OUTPUT_PIN_AUD_SPDIFOUT	plf_av_source.h	/^	PLF_OUTPUT_PIN_AUD_SPDIFOUT,$/;"	e	enum:__anon141
PLF_VideoConf_st	plf_av_source.h	/^} PLF_VideoConf_st;$/;"	t	typeref:union:__anon142
PacketQueue	avplayer.c	/^typedef struct PacketQueue {$/;"	s	file:
PacketQueue	avplayer.c	/^} __attribute__((packed)) PacketQueue;$/;"	t	typeref:struct:PacketQueue	file:
PacketQueue	ffplay.c	/^typedef struct PacketQueue {$/;"	s	file:
PacketQueue	ffplay.c	/^} PacketQueue;$/;"	t	typeref:struct:PacketQueue	file:
PacketQueue	tutorial08.c	/^typedef struct PacketQueue {$/;"	s	file:
PacketQueue	tutorial08.c	/^} PacketQueue;$/;"	t	typeref:struct:PacketQueue	file:
Param	dsp_ioctl.h	/^		UINT32 Param;$/;"	m	struct:TVFE_Audio_CMD::__anon48
Pcm_Output_Phase	dsp_ioctl.h	/^		TVFE_Audio_Pcm_Output_Phase_Config_t Pcm_Output_Phase;$/;"	m	struct:TVFE_Audio_CMD::__anon42
PlayMp3_BSFeed	dsp_ioctl.c	/^int PlayMp3_BSFeed(char *FileName)$/;"	f	signature:(char *FileName)
PlayMp3_BSFeed	playback.c	/^int PlayMp3_BSFeed(char *FileName)$/;"	f	signature:(char *FileName)
PlayMp3_BSFeedByFrame	playback.c	/^int PlayMp3_BSFeedByFrame(char *FileName)$/;"	f	signature:(char *FileName)
PowerControl	dsp_ioctl.h	/^	}PowerControl;$/;"	m	union:TVFE_Audio_CMD	typeref:struct:TVFE_Audio_CMD::__anon49
Process_Path	tvfe_audio.h	/^	TVFE_Audio_Process_Path_e Process_Path;$/;"	m	struct:_TVFE_Audio_AUX_Volume_t
Process_Path	tvfe_audio.h	/^	TVFE_Audio_Process_Path_e Process_Path;$/;"	m	struct:_TVFE_Audio_Mute_t
Process_Path	tvfe_audio.h	/^	TVFE_Audio_Process_Path_e Process_Path;$/;"	m	struct:_TVFE_Audio_Output_Config_t
Process_Path	tvfe_audio.h	/^	TVFE_Audio_Process_Path_e Process_Path;$/;"	m	struct:_TVFE_Audio_Output_Selection_t
ProgExit	avplayer.c	/^	ProgExit,$/;"	e	enum:__anon153	file:
ProgRun	avplayer.c	/^	ProgRun,$/;"	e	enum:__anon153	file:
ProgStop	avplayer.c	/^	ProgStop,$/;"	e	enum:__anon153	file:
ProgramName	Makefile	/^ProgramName = dsp_ioctl audio_api playback mediainfo avplayer $/;"	m
RANLIB	Makefile	/^RANLIB = $(CROSS_COMPILE)ranlib$/;"	m
RAWAVEFORMAT	wave_fmt.h	/^} __attribute__ ((packed)) RAWAVEFORMAT;$/;"	t	typeref:struct:tRAwaveformat_tag
RESERVED0	drv_ssd.h	/^            UINT32 RESERVED0         :10;$/;"	m	struct:__anon125::__anon138::__anon139
RESERVED0	drv_ssd.h	/^            UINT32 RESERVED0         :8;$/;"	m	struct:__anon125::__anon136::__anon137
RESERVED0	drv_ssd.h	/^            UINT32 RESERVED0 :1;$/;"	m	struct:__anon125::__anon126::__anon127
RESERVED0	drv_ssd.h	/^            UINT32 RESERVED0 :2;$/;"	m	struct:__anon125::__anon134::__anon135
RESERVED0	drv_ssd.h	/^            UINT32 RESERVED0 :6;$/;"	m	struct:__anon125::__anon130::__anon131
RESERVED0	drv_ssd.h	/^            UINT32 RESERVED0 :7;$/;"	m	struct:__anon125::__anon128::__anon129
RESERVED0	drv_ssd.h	/^            UINT32 RESERVED0 :8;$/;"	m	struct:__anon125::__anon132::__anon133
RESERVED1	drv_ssd.h	/^            UINT32 RESERVED1         :8;$/;"	m	struct:__anon125::__anon138::__anon139
RESERVED1	drv_ssd.h	/^            UINT32 RESERVED1 :3;$/;"	m	struct:__anon125::__anon126::__anon127
RESERVED1	drv_ssd.h	/^            UINT32 RESERVED1 :7;$/;"	m	struct:__anon125::__anon130::__anon131
RESERVED1	drv_ssd.h	/^            UINT32 RESERVED1 :8;$/;"	m	struct:__anon125::__anon128::__anon129
RESERVED1	drv_ssd.h	/^            UINT32 RESERVED1 :8;$/;"	m	struct:__anon125::__anon134::__anon135
RESERVED2	drv_ssd.h	/^            UINT32 RESERVED2 :8;$/;"	m	struct:__anon125::__anon126::__anon127
RESERVED2	drv_ssd.h	/^            UINT32 RESERVED2 :8;$/;"	m	struct:__anon125::__anon130::__anon131
RGBA_IN	ffplay.c	405;"	d	file:
RM	Makefile	/^RM = rm -f$/;"	m
RSSF	drv_ssd.h	/^            UINT32 RSSF      :1;$/;"	m	struct:__anon125::__anon126::__anon127
RegInfo	tvfe_api.h	/^    DRV_AudFrontEndReg_t RegInfo;$/;"	m	struct:__anon120
RightIndex	dsp_ioctl.h	/^		UINT8 RightIndex;$/;"	m	struct:TVFE_Audio_CMD::__anon31
SAMPLE_ARRAY_SIZE	ffplay.c	81;"	d	file:
SAMPLE_CORRECTION_PERCENT_MAX	avplayer.c	67;"	d	file:
SAMPLE_CORRECTION_PERCENT_MAX	ffplay.c	75;"	d	file:
SAMPLE_CORRECTION_PERCENT_MAX	tutorial08.c	34;"	d	file:
SAMUT	drv_ssd.h	/^            UINT32 SAMUT     :1;$/;"	m	struct:__anon125::__anon126::__anon127
SAPDET	drv_ssd.h	/^            UINT32 SAPDET    :1;$/;"	m	struct:__anon125::__anon126::__anon127
SAP_Adjust_Level	tvfe_audio.h	/^    INT8 SAP_Adjust_Level;		\/\/applied for SAP path$/;"	m	struct:_TVFE_Audio_Level_Adjust_t
SAP_Magnitude_Threshold_Low	tvfe_audio.h	/^	UINT8 SAP_Magnitude_Threshold_Low;$/;"	m	struct:_TVFE_Audio_SIF_Magnitude_Detect_Config_t
SAP_Magnitude_Threshold_Up	tvfe_audio.h	/^	UINT8 SAP_Magnitude_Threshold_Up;$/;"	m	struct:_TVFE_Audio_SIF_Magnitude_Detect_Config_t
SDL_AUDIO_BUFFER_SIZE	avplayer.c	53;"	d	file:
SDL_AUDIO_BUFFER_SIZE	ffplay.c	65;"	d	file:
SDL_AUDIO_BUFFER_SIZE	tutorial08.c	29;"	d	file:
SHOW_MODE_NB	ffplay.c	/^        SHOW_MODE_NONE = -1, SHOW_MODE_VIDEO = 0, SHOW_MODE_WAVES, SHOW_MODE_RDFT, SHOW_MODE_NB$/;"	e	enum:VideoState::ShowMode	file:
SHOW_MODE_NONE	ffplay.c	/^        SHOW_MODE_NONE = -1, SHOW_MODE_VIDEO = 0, SHOW_MODE_WAVES, SHOW_MODE_RDFT, SHOW_MODE_NB$/;"	e	enum:VideoState::ShowMode	file:
SHOW_MODE_RDFT	ffplay.c	/^        SHOW_MODE_NONE = -1, SHOW_MODE_VIDEO = 0, SHOW_MODE_WAVES, SHOW_MODE_RDFT, SHOW_MODE_NB$/;"	e	enum:VideoState::ShowMode	file:
SHOW_MODE_VIDEO	ffplay.c	/^        SHOW_MODE_NONE = -1, SHOW_MODE_VIDEO = 0, SHOW_MODE_WAVES, SHOW_MODE_RDFT, SHOW_MODE_NB$/;"	e	enum:VideoState::ShowMode	file:
SHOW_MODE_WAVES	ffplay.c	/^        SHOW_MODE_NONE = -1, SHOW_MODE_VIDEO = 0, SHOW_MODE_WAVES, SHOW_MODE_RDFT, SHOW_MODE_NB$/;"	e	enum:VideoState::ShowMode	file:
SIFAvailableMode	dsp_ioctl.h	/^	}SIFAvailableMode;$/;"	m	union:TVFE_Audio_CMD	typeref:struct:TVFE_Audio_CMD::__anon54
SIFMode	dsp_ioctl.h	/^	}SIFMode;$/;"	m	union:TVFE_Audio_CMD	typeref:struct:TVFE_Audio_CMD::__anon53
SIFStandardMask	dsp_ioctl.h	/^	}SIFStandardMask;$/;"	m	union:TVFE_Audio_CMD	typeref:struct:TVFE_Audio_CMD::__anon50
SIF_Auto_Test	audio_api.c	/^void SIF_Auto_Test(void)$/;"	f	signature:(void)
SIZE	Makefile	/^SIZE = $(CROSS_COMPILE)size$/;"	m
SOURCE_ATV	audio_api.c	/^    SOURCE_ATV = 0,$/;"	e	enum:__anon2	file:
SOURCE_AV	audio_api.c	/^    SOURCE_AV,$/;"	e	enum:__anon2	file:
SOURCE_AV1	audio_api.c	/^    SOURCE_AV1,$/;"	e	enum:__anon2	file:
SOURCE_AV2	audio_api.c	/^    SOURCE_AV2,$/;"	e	enum:__anon2	file:
SOURCE_DTV	audio_api.c	/^    SOURCE_DTV,$/;"	e	enum:__anon2	file:
SOURCE_DVD	audio_api.c	/^    SOURCE_DVD,$/;"	e	enum:__anon2	file:
SOURCE_HDMI	audio_api.c	/^    SOURCE_HDMI,$/;"	e	enum:__anon2	file:
SOURCE_HDMI1	audio_api.c	/^    SOURCE_HDMI1,$/;"	e	enum:__anon2	file:
SOURCE_HDMI2	audio_api.c	/^    SOURCE_HDMI2,$/;"	e	enum:__anon2	file:
SOURCE_KARAOKE	audio_api.c	/^    SOURCE_KARAOKE,$/;"	e	enum:__anon2	file:
SOURCE_MAX	audio_api.c	/^    SOURCE_MAX,$/;"	e	enum:__anon2	file:
SOURCE_MEDIA	audio_api.c	/^    SOURCE_MEDIA,$/;"	e	enum:__anon2	file:
SOURCE_NET	audio_api.c	/^    SOURCE_NET,$/;"	e	enum:__anon2	file:
SOURCE_PC	audio_api.c	/^    SOURCE_PC,$/;"	e	enum:__anon2	file:
SOURCE_RADIO	audio_api.c	/^    SOURCE_RADIO,$/;"	e	enum:__anon2	file:
SOURCE_SCART	audio_api.c	/^    SOURCE_SCART,$/;"	e	enum:__anon2	file:
SOURCE_SCART1	audio_api.c	/^    SOURCE_SCART1,$/;"	e	enum:__anon2	file:
SOURCE_SVIDEO	audio_api.c	/^    SOURCE_SVIDEO,$/;"	e	enum:__anon2	file:
SOURCE_SVIDEO1	audio_api.c	/^    SOURCE_SVIDEO1,$/;"	e	enum:__anon2	file:
SOURCE_SVIDEO2	audio_api.c	/^    SOURCE_SVIDEO2,$/;"	e	enum:__anon2	file:
SOURCE_YPBPR	audio_api.c	/^    SOURCE_YPBPR,$/;"	e	enum:__anon2	file:
SOURCE_YPBPR1	audio_api.c	/^    SOURCE_YPBPR1,$/;"	e	enum:__anon2	file:
SOURCE_YPBPR2	audio_api.c	/^    SOURCE_YPBPR2,$/;"	e	enum:__anon2	file:
SPDIF_Output_Config	dsp_ioctl.h	/^		TVFE_Audio_SPDIF_Output_Config_e SPDIF_Output_Config;$/;"	m	struct:TVFE_Audio_CMD::__anon39
SPDIF_Output_Config	dsp_ioctl.h	/^	}SPDIF_Output_Config;	$/;"	m	union:TVFE_Audio_CMD	typeref:struct:TVFE_Audio_CMD::__anon39
SPDIF_SmpRate	dsp_ioctl.h	/^		TVFE_Audio_SPDIF_Output_SmpRate_Config_e SPDIF_SmpRate;$/;"	m	struct:TVFE_Audio_CMD::__anon39
SSD_DRV_AudEnableSSDROMReg	dsp_ioctl.h	554;"	d
SSD_DRV_AudSetBTSCDBXMode	dsp_ioctl.h	555;"	d
SSD_DRV_AudSetDigitalMatrix	dsp_ioctl.h	557;"	d
SSD_DRV_AudSetMagnitudeDetectConfig	dsp_ioctl.h	560;"	d
SSD_DRV_AudSetOverModulationAdapterConfig	dsp_ioctl.h	559;"	d
SSD_DRV_AudSetPathAdjustLevel	dsp_ioctl.h	558;"	d
SSD_DRV_AudSetSIFADCPGAGain	dsp_ioctl.h	553;"	d
SSD_DRV_AudSetSRCPath	dsp_ioctl.h	556;"	d
STDRES	drv_ssd.h	/^            UINT32 STDRES    :5;$/;"	m	struct:__anon125::__anon126::__anon127
STRIP	Makefile	/^STRIP = $(CROSS_COMPILE)strip$/;"	m
SUBPICTURE_QUEUE_SIZE	avplayer.c	82;"	d	file:
SUBPICTURE_QUEUE_SIZE	ffplay.c	95;"	d	file:
SUNSUR_GAIN_0P0	dsp_ioctl.h	/^	SUNSUR_GAIN_0P0,$/;"	e	enum:_AUDIF_SUNSUR_Gain_e
SUNSUR_GAIN_0P4	dsp_ioctl.h	/^	SUNSUR_GAIN_0P4,$/;"	e	enum:_AUDIF_SUNSUR_Gain_e
SUNSUR_GAIN_0P5	dsp_ioctl.h	/^	SUNSUR_GAIN_0P5,$/;"	e	enum:_AUDIF_SUNSUR_Gain_e
SUNSUR_GAIN_0P6	dsp_ioctl.h	/^	SUNSUR_GAIN_0P6,$/;"	e	enum:_AUDIF_SUNSUR_Gain_e
SUNSUR_GAIN_0P7	dsp_ioctl.h	/^	SUNSUR_GAIN_0P7,$/;"	e	enum:_AUDIF_SUNSUR_Gain_e
SUNSUR_GAIN_0P8	dsp_ioctl.h	/^	SUNSUR_GAIN_0P8,$/;"	e	enum:_AUDIF_SUNSUR_Gain_e
SUNSUR_GAIN_0P9	dsp_ioctl.h	/^	SUNSUR_GAIN_0P9,$/;"	e	enum:_AUDIF_SUNSUR_Gain_e
SUNSUR_GAIN_1P0	dsp_ioctl.h	/^	SUNSUR_GAIN_1P0$/;"	e	enum:_AUDIF_SUNSUR_Gain_e
SUNSUR_OFF	dsp_ioctl.h	/^	SUNSUR_OFF = 0x0,$/;"	e	enum:_AUDIF_SUNSUR_Switch_e
SUNSUR_ON	dsp_ioctl.h	/^	SUNSUR_ON 	= 0x1,$/;"	e	enum:_AUDIF_SUNSUR_Switch_e
SUNSUR_Param	dsp_ioctl.h	/^		TVFE_Audio_SUNSUR_Param_t SUNSUR_Param;$/;"	m	struct:TVFE_Audio_CMD::__anon43
SWITCH	mtrace-mips	/^    SWITCH: {$/;"	l
SaveFrame	avplayer.c	/^void SaveFrame(AVFrame *pFrame, int width, int height, int iFrame) {$/;"	f	signature:(AVFrame *pFrame, int width, int height, int iFrame)
SaveToPPM	avplayer.c	/^void SaveToPPM(VideoState *is, AVFrame *pFrame, int iFrameNum)$/;"	f	signature:(VideoState *is, AVFrame *pFrame, int iFrameNum)
Selection	tvfe_audio.h	/^	TVFE_Audio_Output_Selection_e Selection;$/;"	m	struct:_TVFE_Audio_Output_Selection_t
SetAudioWavefmt	playback.c	/^int SetAudioWavefmt(int AudioCodec)$/;"	f	signature:(int AudioCodec)
Set_AUX_Volume	dsp_ioctl.h	/^	}Set_AUX_Volume;$/;"	m	union:TVFE_Audio_CMD	typeref:struct:TVFE_Audio_CMD::__anon32
Set_AVL_Config	dsp_ioctl.h	/^	}Set_AVL_Config;	$/;"	m	union:TVFE_Audio_CMD	typeref:struct:TVFE_Audio_CMD::__anon34
Set_AtvRamp	dsp_ioctl.h	/^	}Set_AtvRamp;	$/;"	m	union:TVFE_Audio_CMD	typeref:struct:TVFE_Audio_CMD::__anon40
Set_Balance	dsp_ioctl.h	/^	}Set_Balance;$/;"	m	union:TVFE_Audio_CMD	typeref:struct:TVFE_Audio_CMD::__anon31
Set_Bass	dsp_ioctl.h	/^	}Set_Bass;$/;"	m	union:TVFE_Audio_CMD	typeref:struct:TVFE_Audio_CMD::__anon27
Set_Effect_Mode	dsp_ioctl.h	/^	}Set_Effect_Mode;$/;"	m	union:TVFE_Audio_CMD	typeref:struct:TVFE_Audio_CMD::__anon33
Set_HEAAC_Output	dsp_ioctl.h	/^	}Set_HEAAC_Output;$/;"	m	union:TVFE_Audio_CMD	typeref:struct:TVFE_Audio_CMD::__anon44
Set_Level_Adjust_Config	dsp_ioctl.h	/^	}Set_Level_Adjust_Config;$/;"	m	union:TVFE_Audio_CMD	typeref:struct:TVFE_Audio_CMD::__anon36
Set_Main_Equlizer_Config	dsp_ioctl.h	/^	}Set_Main_Equlizer_Config;	$/;"	m	union:TVFE_Audio_CMD	typeref:struct:TVFE_Audio_CMD::__anon29
Set_MasterMuteStatus	dsp_ioctl.h	/^	}Set_MasterMuteStatus;$/;"	m	union:TVFE_Audio_CMD	typeref:struct:TVFE_Audio_CMD::__anon46
Set_Mute_Config	dsp_ioctl.h	/^	}Set_Mute_Config;$/;"	m	union:TVFE_Audio_CMD	typeref:struct:TVFE_Audio_CMD::__anon35
Set_Output_Config	dsp_ioctl.h	/^	}Set_Output_Config;$/;"	m	union:TVFE_Audio_CMD	typeref:struct:TVFE_Audio_CMD::__anon24
Set_Output_Selection	dsp_ioctl.h	/^	}Set_Output_Selection;$/;"	m	union:TVFE_Audio_CMD	typeref:struct:TVFE_Audio_CMD::__anon25
Set_PLF_AVSourcePinConfig	dsp_ioctl.h	/^	}Set_PLF_AVSourcePinConfig;$/;"	m	union:TVFE_Audio_CMD	typeref:struct:TVFE_Audio_CMD::__anon55
Set_SIF_Detect_Config	dsp_ioctl.h	/^	}Set_SIF_Detect_Config;$/;"	m	union:TVFE_Audio_CMD	typeref:struct:TVFE_Audio_CMD::__anon38
Set_SIF_Over_Modulation_Config	dsp_ioctl.h	/^	}Set_SIF_Over_Modulation_Config;$/;"	m	union:TVFE_Audio_CMD	typeref:struct:TVFE_Audio_CMD::__anon37
Set_SUNSUR_Config	dsp_ioctl.h	/^	}Set_SUNSUR_Config;$/;"	m	union:TVFE_Audio_CMD	typeref:struct:TVFE_Audio_CMD::__anon43
Set_SourceType	dsp_ioctl.h	/^	}Set_SourceType;	$/;"	m	union:TVFE_Audio_CMD	typeref:struct:TVFE_Audio_CMD::__anon48
Set_Spdif_ChannelStatus	dsp_ioctl.h	/^	}Set_Spdif_ChannelStatus;$/;"	m	union:TVFE_Audio_CMD	typeref:struct:TVFE_Audio_CMD::__anon45
Set_Treble	dsp_ioctl.h	/^	}Set_Treble;$/;"	m	union:TVFE_Audio_CMD	typeref:struct:TVFE_Audio_CMD::__anon28
Set_Volume	dsp_ioctl.h	/^	}Set_Volume;$/;"	m	union:TVFE_Audio_CMD	typeref:struct:TVFE_Audio_CMD::__anon26
ShowDecoderTime	avplayer.c	/^static void ShowDecoderTime(int64_t timestamp)$/;"	f	file:	signature:(int64_t timestamp)
ShowMode	ffplay.c	/^    enum ShowMode {$/;"	g	struct:VideoState	file:
Size	dsp_ioctl.h	/^		UINT8 Size;$/;"	m	struct:TVFE_Audio_CMD::__anon26
Size	dsp_ioctl.h	/^		UINT8 Size;$/;"	m	struct:TVFE_Audio_CMD::__anon27
Size	dsp_ioctl.h	/^		UINT8 Size;$/;"	m	struct:TVFE_Audio_CMD::__anon28
Size	dsp_ioctl.h	/^		UINT8 Size;$/;"	m	struct:TVFE_Audio_CMD::__anon29
Size	dsp_ioctl.h	/^		UINT8 Size;$/;"	m	struct:TVFE_Audio_CMD::__anon31
Status	tvfe_api.h	/^    TVFE_AudioFrontEndStatus_t Status;$/;"	m	struct:__anon123
StopMainProgram	avplayer.c	/^void StopMainProgram(int signo)$/;"	f	signature:(int signo)
SubPicture	avplayer.c	/^typedef struct SubPicture {$/;"	s	file:
SubPicture	avplayer.c	/^} SubPicture;$/;"	t	typeref:struct:SubPicture	file:
SubPicture	ffplay.c	/^typedef struct SubPicture {$/;"	s	file:
SubPicture	ffplay.c	/^} SubPicture;$/;"	t	typeref:struct:SubPicture	file:
TOOL_CHAIN_DIR	Makefile	/^TOOL_CHAIN_DIR=\/home\/mark\/MySoftware\/bin$/;"	m
TPI_SUM_REPORT_GROUP_NUM	tvfe_api.h	18;"	d
TRUE	types.h	17;"	d
TVFEAudioOutputConfig_e	tvfe_api.h	/^} TVFEAudioOutputConfig_e;$/;"	t	typeref:enum:__anon83
TVFE_1TIMES_SAMPLING	tvfe_api.h	/^	TVFE_1TIMES_SAMPLING = 0,$/;"	e	enum:__anon86
TVFE_2TIMES_SAMPLING	tvfe_api.h	/^	TVFE_2TIMES_SAMPLING,$/;"	e	enum:__anon86
TVFE_4TIMES_SAMPLING	tvfe_api.h	/^	TVFE_4TIMES_SAMPLING,$/;"	e	enum:__anon86
TVFE_ADC	tvfe_api.h	/^	TVFE_ADC,$/;"	e	enum:__anon74
TVFE_ADCAutoColorPattern_e	tvfe_api.h	/^} TVFE_ADCAutoColorPattern_e;$/;"	t	typeref:enum:__anon66
TVFE_ADCSyncPolarity_t	tvfe_api.h	/^} TVFE_ADCSyncPolarity_t;$/;"	t	typeref:enum:__anon97
TVFE_ADC_004_YPBPR_SW_AUTO_COLOR_00_235	tvfe_api.h	/^	TVFE_ADC_004_YPBPR_SW_AUTO_COLOR_00_235  = 1 << 1,$/;"	e	enum:__anon58
TVFE_ADC_004_YPBPR_SW_AUTO_COLOR_00_255	tvfe_api.h	/^	TVFE_ADC_004_YPBPR_SW_AUTO_COLOR_00_255  = 1 << 2,$/;"	e	enum:__anon58
TVFE_ADC_004_YPBPR_SW_AUTO_COLOR_16_235	tvfe_api.h	/^	TVFE_ADC_004_YPBPR_SW_AUTO_COLOR_16_235  = 1 << 0,$/;"	e	enum:__anon58
TVFE_ADC_006_AUTO_COLOR_BY_MAX_MIN	tvfe_api.h	/^	TVFE_ADC_006_AUTO_COLOR_BY_MAX_MIN       = 1 << 3,$/;"	e	enum:__anon58
TVFE_ADC_006_AUTO_COLOR_BY_PIXEL_GRAB	tvfe_api.h	/^	TVFE_ADC_006_AUTO_COLOR_BY_PIXEL_GRAB    = 1 << 4,$/;"	e	enum:__anon58
TVFE_ADC_007_NON_STD_MODE_DETECT	tvfe_api.h	/^	TVFE_ADC_007_NON_STD_MODE_DETECT         = 1 << 5,$/;"	e	enum:__anon58
TVFE_ADC_009_AUTO_SOG	tvfe_api.h	/^	TVFE_ADC_009_AUTO_SOG                    = 1 << 6,$/;"	e	enum:__anon58
TVFE_ADC_013_PC_AUTO_SYNC_DSS_DCS_ACS	tvfe_api.h	/^	TVFE_ADC_013_PC_AUTO_SYNC_DSS_DCS_ACS    = 1 << 9,$/;"	e	enum:__anon58
TVFE_ADC_013_PC_AUTO_SYNC_ENABLE	tvfe_api.h	/^	TVFE_ADC_013_PC_AUTO_SYNC_ENABLE         = 1 << 8,$/;"	e	enum:__anon58
TVFE_ADC_013_PC_DSS	tvfe_api.h	/^	TVFE_ADC_013_PC_DSS                      = 1 << 7,$/;"	e	enum:__anon58
TVFE_ADC_015_AUTO_COLOR_PATTERN_SEARCH	tvfe_api.h	/^	TVFE_ADC_015_AUTO_COLOR_PATTERN_SEARCH   = 1 << 10,$/;"	e	enum:__anon58
TVFE_ADC_020_YPBPR_AUTO_PHASE	tvfe_api.h	/^	TVFE_ADC_020_YPBPR_AUTO_PHASE            = 1 << 11,$/;"	e	enum:__anon58
TVFE_ADC_021_SUPPORT_AUTO_COLOR_ONE_CH	tvfe_api.h	/^	TVFE_ADC_021_SUPPORT_AUTO_COLOR_ONE_CH   = 1 << 12,$/;"	e	enum:__anon58
TVFE_ADC_AUTO_COLOR_BAR	tvfe_api.h	/^	TVFE_ADC_AUTO_COLOR_BAR = 0,$/;"	e	enum:__anon66
TVFE_ADC_AUTO_GRAY_BAR	tvfe_api.h	/^	TVFE_ADC_AUTO_GRAY_BAR,$/;"	e	enum:__anon66
TVFE_ADC_DISABLE_POLARITY_CHECK	tvfe_api.h	21;"	d
TVFE_ADC_DISABLE_TABLE_PARAM	tvfe_api.h	23;"	d
TVFE_ADC_ENABLE_POLARITY_CHECK	tvfe_api.h	20;"	d
TVFE_ADC_ENABLE_TABLE_PARAM	tvfe_api.h	22;"	d
TVFE_ADC_SYNC_POLARITY_HIGH	tvfe_api.h	/^	TVFE_ADC_SYNC_POLARITY_HIGH = 0,$/;"	e	enum:__anon97
TVFE_ADC_SYNC_POLARITY_LOW	tvfe_api.h	/^	TVFE_ADC_SYNC_POLARITY_LOW,$/;"	e	enum:__anon97
TVFE_AM_REQUEST_INITIAL_CONNECT	tvfe_api.h	/^    TVFE_AM_REQUEST_INITIAL_CONNECT      = 0,$/;"	e	enum:__anon85
TVFE_ATVCallbackType_t	tvfe_api.h	/^} TVFE_ATVCallbackType_t;$/;"	t	typeref:enum:__anon100
TVFE_ATV_INPUT_VSYNCFREQ_t	tvfe_api.h	/^} TVFE_ATV_INPUT_VSYNCFREQ_t;$/;"	t	typeref:enum:__anon99
TVFE_ATV_Input_Vsync_FreqRange_50Hz	tvfe_api.h	/^	TVFE_ATV_Input_Vsync_FreqRange_50Hz,$/;"	e	enum:__anon99
TVFE_ATV_Input_Vsync_FreqRange_60Hz	tvfe_api.h	/^	TVFE_ATV_Input_Vsync_FreqRange_60Hz,$/;"	e	enum:__anon99
TVFE_ATV_Input_Vsync_FreqRange_Other	tvfe_api.h	/^	TVFE_ATV_Input_Vsync_FreqRange_Other,$/;"	e	enum:__anon99
TVFE_ATV_Input_Vsync_FreqRange_Unknown	tvfe_api.h	/^	TVFE_ATV_Input_Vsync_FreqRange_Unknown = 0,$/;"	e	enum:__anon99
TVFE_ATV_SIF_CONNECT_TYPE	tvfe_api.h	/^    TVFE_ATV_SIF_CONNECT_TYPE = 0,$/;"	e	enum:__anon100
TVFE_ATV_UNDEFINE	tvfe_api.h	/^    TVFE_ATV_UNDEFINE = 0xff,$/;"	e	enum:__anon100
TVFE_AUDIO_ALL_MODULE_POWER_OFF	tvfe_api.h	/^    TVFE_AUDIO_ALL_MODULE_POWER_OFF,$/;"	e	enum:__anon80
TVFE_AUDIO_ALL_MODULE_POWER_ON	tvfe_api.h	/^    TVFE_AUDIO_ALL_MODULE_POWER_ON,$/;"	e	enum:__anon80
TVFE_AUDIO_AUXACT_FOLLOW_PRIMARY	tvfe_api.h	/^    TVFE_AUDIO_AUXACT_FOLLOW_PRIMARY,$/;"	e	enum:__anon84
TVFE_AUDIO_AUXACT_FOLLOW_TV	tvfe_api.h	/^    TVFE_AUDIO_AUXACT_FOLLOW_TV,$/;"	e	enum:__anon84
TVFE_AUDIO_AUXACT_MAX	tvfe_api.h	/^    TVFE_AUDIO_AUXACT_MAX$/;"	e	enum:__anon84
TVFE_AUDIO_AUXACT_NULL	tvfe_api.h	/^    TVFE_AUDIO_AUXACT_NULL			= 0,$/;"	e	enum:__anon84
TVFE_AUDIO_AUXILIARY_1_PATH	tvfe_audio.h	/^    TVFE_AUDIO_AUXILIARY_1_PATH,$/;"	e	enum:_TVFE_Audio_ProcessPath_e
TVFE_AUDIO_AUXILIARY_2_PATH	tvfe_audio.h	/^    TVFE_AUDIO_AUXILIARY_2_PATH,$/;"	e	enum:_TVFE_Audio_ProcessPath_e
TVFE_AUDIO_AVL_MODE_02S	tvfe_audio.h	/^    TVFE_AUDIO_AVL_MODE_02S,$/;"	e	enum:_TVFE_Audio_AVLMode_e
TVFE_AUDIO_AVL_MODE_04S	tvfe_audio.h	/^    TVFE_AUDIO_AVL_MODE_04S,$/;"	e	enum:_TVFE_Audio_AVLMode_e
TVFE_AUDIO_AVL_MODE_08S	tvfe_audio.h	/^    TVFE_AUDIO_AVL_MODE_08S,$/;"	e	enum:_TVFE_Audio_AVLMode_e
TVFE_AUDIO_AVL_MODE_16S	tvfe_audio.h	/^    TVFE_AUDIO_AVL_MODE_16S,$/;"	e	enum:_TVFE_Audio_AVLMode_e
TVFE_AUDIO_AVL_MODE_20MS	tvfe_audio.h	/^    TVFE_AUDIO_AVL_MODE_20MS,$/;"	e	enum:_TVFE_Audio_AVLMode_e
TVFE_AUDIO_AVL_MODE_OFF	tvfe_audio.h	/^    TVFE_AUDIO_AVL_MODE_OFF    = 0,$/;"	e	enum:_TVFE_Audio_AVLMode_e
TVFE_AUDIO_AVL_REFERENCE_LEVEL_MINUS_06_DB	tvfe_audio.h	/^    TVFE_AUDIO_AVL_REFERENCE_LEVEL_MINUS_06_DB	= 0,$/;"	e	enum:_TVFE_Audio_AVLReferenceLevel_e
TVFE_AUDIO_AVL_REFERENCE_LEVEL_MINUS_08_DB	tvfe_audio.h	/^    TVFE_AUDIO_AVL_REFERENCE_LEVEL_MINUS_08_DB,$/;"	e	enum:_TVFE_Audio_AVLReferenceLevel_e
TVFE_AUDIO_AVL_REFERENCE_LEVEL_MINUS_10_DB	tvfe_audio.h	/^    TVFE_AUDIO_AVL_REFERENCE_LEVEL_MINUS_10_DB,$/;"	e	enum:_TVFE_Audio_AVLReferenceLevel_e
TVFE_AUDIO_AVL_REFERENCE_LEVEL_MINUS_12_DB	tvfe_audio.h	/^    TVFE_AUDIO_AVL_REFERENCE_LEVEL_MINUS_12_DB,$/;"	e	enum:_TVFE_Audio_AVLReferenceLevel_e
TVFE_AUDIO_AVL_REFERENCE_LEVEL_MINUS_14_DB	tvfe_audio.h	/^    TVFE_AUDIO_AVL_REFERENCE_LEVEL_MINUS_14_DB,$/;"	e	enum:_TVFE_Audio_AVLReferenceLevel_e
TVFE_AUDIO_AVL_REFERENCE_LEVEL_MINUS_16_DB	tvfe_audio.h	/^    TVFE_AUDIO_AVL_REFERENCE_LEVEL_MINUS_16_DB,$/;"	e	enum:_TVFE_Audio_AVLReferenceLevel_e
TVFE_AUDIO_AVL_REFERENCE_LEVEL_MINUS_18_DB	tvfe_audio.h	/^    TVFE_AUDIO_AVL_REFERENCE_LEVEL_MINUS_18_DB,$/;"	e	enum:_TVFE_Audio_AVLReferenceLevel_e
TVFE_AUDIO_AVL_REFERENCE_LEVEL_MINUS_20_DB	tvfe_audio.h	/^    TVFE_AUDIO_AVL_REFERENCE_LEVEL_MINUS_20_DB,$/;"	e	enum:_TVFE_Audio_AVLReferenceLevel_e
TVFE_AUDIO_AVL_REFERENCE_LEVEL_MINUS_22_DB	tvfe_audio.h	/^    TVFE_AUDIO_AVL_REFERENCE_LEVEL_MINUS_22_DB,$/;"	e	enum:_TVFE_Audio_AVLReferenceLevel_e
TVFE_AUDIO_AVL_REFERENCE_LEVEL_MINUS_24_DB	tvfe_audio.h	/^    TVFE_AUDIO_AVL_REFERENCE_LEVEL_MINUS_24_DB,$/;"	e	enum:_TVFE_Audio_AVLReferenceLevel_e
TVFE_AUDIO_AVL_REFERENCE_LEVEL_MINUS_26_DB	tvfe_audio.h	/^    TVFE_AUDIO_AVL_REFERENCE_LEVEL_MINUS_26_DB,$/;"	e	enum:_TVFE_Audio_AVLReferenceLevel_e
TVFE_AUDIO_AVL_REFERENCE_LEVEL_MINUS_28_DB	tvfe_audio.h	/^    TVFE_AUDIO_AVL_REFERENCE_LEVEL_MINUS_28_DB,$/;"	e	enum:_TVFE_Audio_AVLReferenceLevel_e
TVFE_AUDIO_AVL_REFERENCE_LEVEL_MINUS_30_DB	tvfe_audio.h	/^    TVFE_AUDIO_AVL_REFERENCE_LEVEL_MINUS_30_DB,$/;"	e	enum:_TVFE_Audio_AVLReferenceLevel_e
TVFE_AUDIO_AVL_REFERENCE_LEVEL_MINUS_32_DB	tvfe_audio.h	/^    TVFE_AUDIO_AVL_REFERENCE_LEVEL_MINUS_32_DB,$/;"	e	enum:_TVFE_Audio_AVLReferenceLevel_e
TVFE_AUDIO_AVL_REFERENCE_LEVEL_MINUS_34_DB	tvfe_audio.h	/^    TVFE_AUDIO_AVL_REFERENCE_LEVEL_MINUS_34_DB,$/;"	e	enum:_TVFE_Audio_AVLReferenceLevel_e
TVFE_AUDIO_AVL_REFERENCE_LEVEL_MINUS_36_DB	tvfe_audio.h	/^    TVFE_AUDIO_AVL_REFERENCE_LEVEL_MINUS_36_DB,$/;"	e	enum:_TVFE_Audio_AVLReferenceLevel_e
TVFE_AUDIO_DAC0_POWER_OFF	tvfe_api.h	/^    TVFE_AUDIO_DAC0_POWER_OFF,$/;"	e	enum:__anon80
TVFE_AUDIO_DAC0_POWER_ON	tvfe_api.h	/^    TVFE_AUDIO_DAC0_POWER_ON,$/;"	e	enum:__anon80
TVFE_AUDIO_DAC1_POWER_OFF	tvfe_api.h	/^    TVFE_AUDIO_DAC1_POWER_OFF,$/;"	e	enum:__anon80
TVFE_AUDIO_DAC1_POWER_ON	tvfe_api.h	/^    TVFE_AUDIO_DAC1_POWER_ON,$/;"	e	enum:__anon80
TVFE_AUDIO_DAC2_POWER_OFF	tvfe_api.h	/^    TVFE_AUDIO_DAC2_POWER_OFF,$/;"	e	enum:__anon80
TVFE_AUDIO_DAC2_POWER_ON	tvfe_api.h	/^    TVFE_AUDIO_DAC2_POWER_ON,$/;"	e	enum:__anon80
TVFE_AUDIO_DAC_POWER_OFF	tvfe_api.h	/^    TVFE_AUDIO_DAC_POWER_OFF,$/;"	e	enum:__anon80
TVFE_AUDIO_DAC_POWER_ON	tvfe_api.h	/^    TVFE_AUDIO_DAC_POWER_ON,$/;"	e	enum:__anon80
TVFE_AUDIO_DAC_VCOM_OFF	tvfe_api.h	/^    TVFE_AUDIO_DAC_VCOM_OFF,$/;"	e	enum:__anon80
TVFE_AUDIO_DAC_VCOM_ON	tvfe_api.h	/^    TVFE_AUDIO_DAC_VCOM_ON,$/;"	e	enum:__anon80
TVFE_AUDIO_DAC_VRT_OFF	tvfe_api.h	/^    TVFE_AUDIO_DAC_VRT_OFF,$/;"	e	enum:__anon80
TVFE_AUDIO_DAC_VRT_ON	tvfe_api.h	/^    TVFE_AUDIO_DAC_VRT_ON,$/;"	e	enum:__anon80
TVFE_AUDIO_EFFECT_MODE_NOISE_SEQUENCING	tvfe_audio.h	/^    TVFE_AUDIO_EFFECT_MODE_NOISE_SEQUENCING,$/;"	e	enum:_TVFE_Audio_Effect_e
TVFE_AUDIO_EFFECT_MODE_NORMAL	tvfe_audio.h	/^    TVFE_AUDIO_EFFECT_MODE_NORMAL								= 0,$/;"	e	enum:_TVFE_Audio_Effect_e
TVFE_AUDIO_EFFECT_MODE_SRS_TRUSURROUND_HD_DPL	tvfe_audio.h	/^    TVFE_AUDIO_EFFECT_MODE_SRS_TRUSURROUND_HD_DPL,$/;"	e	enum:_TVFE_Audio_Effect_e
TVFE_AUDIO_EFFECT_MODE_SRS_TRUSURROUND_HD_PASSIVE_MATRIX	tvfe_audio.h	/^	TVFE_AUDIO_EFFECT_MODE_SRS_TRUSURROUND_HD_PASSIVE_MATRIX,$/;"	e	enum:_TVFE_Audio_Effect_e
TVFE_AUDIO_EFFECT_MODE_SRS_TRUSURROUND_XT_DPL	tvfe_audio.h	/^	TVFE_AUDIO_EFFECT_MODE_SRS_TRUSURROUND_XT_DPL,$/;"	e	enum:_TVFE_Audio_Effect_e
TVFE_AUDIO_EFFECT_MODE_SRS_TRUSURROUND_XT_PASSIVE_MATRIX	tvfe_audio.h	/^    TVFE_AUDIO_EFFECT_MODE_SRS_TRUSURROUND_XT_PASSIVE_MATRIX,$/;"	e	enum:_TVFE_Audio_Effect_e
TVFE_AUDIO_ERR_BUFFER_UNDERFLOW	tvfe_audio.h	/^   TVFE_AUDIO_ERR_BUFFER_UNDERFLOW,	\/* not enough stream data is available to decode the next video frame *\/$/;"	e	enum:_TVFE_Audio_Status_e
TVFE_AUDIO_ERR_FAILURE	tvfe_audio.h	/^   TVFE_AUDIO_ERR_FAILURE,$/;"	e	enum:_TVFE_Audio_Status_e
TVFE_AUDIO_ERR_INVALID_OP	tvfe_audio.h	/^   TVFE_AUDIO_ERR_INVALID_OP,	\/* requested operation is invalid *\/$/;"	e	enum:_TVFE_Audio_Status_e
TVFE_AUDIO_ERR_INVALID_PARAM	tvfe_audio.h	/^   TVFE_AUDIO_ERR_INVALID_PARAM,	\/* invalid parameter *\/$/;"	e	enum:_TVFE_Audio_Status_e
TVFE_AUDIO_ERR_MEMORY_ALLOC	tvfe_audio.h	/^   TVFE_AUDIO_ERR_MEMORY_ALLOC,	\/* problem allocating memory *\/$/;"	e	enum:_TVFE_Audio_Status_e
TVFE_AUDIO_ERR_RESOURCE_UNAVAILABLE	tvfe_audio.h	/^   TVFE_AUDIO_ERR_RESOURCE_UNAVAILABLE,	\/* hardware resource is in use or otherwise unavailable *\/$/;"	e	enum:_TVFE_Audio_Status_e
TVFE_AUDIO_LINE_IN_ADC_POWER_OFF	tvfe_api.h	/^    TVFE_AUDIO_LINE_IN_ADC_POWER_OFF,$/;"	e	enum:__anon80
TVFE_AUDIO_LINE_IN_ADC_POWER_ON	tvfe_api.h	/^    TVFE_AUDIO_LINE_IN_ADC_POWER_ON	= 0,$/;"	e	enum:__anon80
TVFE_AUDIO_MAIN_PATH	tvfe_audio.h	/^    TVFE_AUDIO_MAIN_PATH,$/;"	e	enum:_TVFE_Audio_ProcessPath_e
TVFE_AUDIO_MASTER_VOLUME_VALUE_MAX	tvfe_api.h	27;"	d
TVFE_AUDIO_MASTER_VOLUME_VALUE_MIN	tvfe_api.h	26;"	d
TVFE_AUDIO_MUTE_ALL_PATH	tvfe_api.h	/^    TVFE_AUDIO_MUTE_ALL_PATH,$/;"	e	enum:__anon87
TVFE_AUDIO_MUTE_AUX1_PATH	tvfe_api.h	/^    TVFE_AUDIO_MUTE_AUX1_PATH,$/;"	e	enum:__anon87
TVFE_AUDIO_MUTE_AUX2_PATH	tvfe_api.h	/^    TVFE_AUDIO_MUTE_AUX2_PATH,$/;"	e	enum:__anon87
TVFE_AUDIO_MUTE_AUX3_PATH	tvfe_api.h	/^    TVFE_AUDIO_MUTE_AUX3_PATH,$/;"	e	enum:__anon87
TVFE_AUDIO_MUTE_CENTER_PATH	tvfe_api.h	/^    TVFE_AUDIO_MUTE_CENTER_PATH,$/;"	e	enum:__anon87
TVFE_AUDIO_MUTE_PATH_MAX	tvfe_api.h	/^    TVFE_AUDIO_MUTE_PATH_MAX,$/;"	e	enum:__anon87
TVFE_AUDIO_MUTE_PRIMARY_LEFT_PATH	tvfe_api.h	/^    TVFE_AUDIO_MUTE_PRIMARY_LEFT_PATH,$/;"	e	enum:__anon87
TVFE_AUDIO_MUTE_PRIMARY_PATH	tvfe_api.h	/^    TVFE_AUDIO_MUTE_PRIMARY_PATH	= 0,$/;"	e	enum:__anon87
TVFE_AUDIO_MUTE_PRIMARY_RIGHT_PATH	tvfe_api.h	/^    TVFE_AUDIO_MUTE_PRIMARY_RIGHT_PATH,$/;"	e	enum:__anon87
TVFE_AUDIO_MUTE_SUBWOOFER_PATH	tvfe_api.h	/^    TVFE_AUDIO_MUTE_SUBWOOFER_PATH,$/;"	e	enum:__anon87
TVFE_AUDIO_MUTE_SURROUND_PATH	tvfe_api.h	/^    TVFE_AUDIO_MUTE_SURROUND_PATH,$/;"	e	enum:__anon87
TVFE_AUDIO_OUTPUT_ANALOG_TV	tvfe_audio.h	/^    TVFE_AUDIO_OUTPUT_ANALOG_TV,$/;"	e	enum:_TVFE_Audio_OutputSelection_e
TVFE_AUDIO_OUTPUT_CURRENT_SOURCE	tvfe_audio.h	/^    TVFE_AUDIO_OUTPUT_CURRENT_SOURCE,$/;"	e	enum:_TVFE_Audio_OutputSelection_e
TVFE_AUDIO_OUTPUT_DAC0	tvfe_audio.h	/^    TVFE_AUDIO_OUTPUT_DAC0,$/;"	e	enum:_TVFE_Audio_Output_e
TVFE_AUDIO_OUTPUT_DAC0_L	tvfe_api.h	/^    TVFE_AUDIO_OUTPUT_DAC0_L,$/;"	e	enum:__anon83
TVFE_AUDIO_OUTPUT_DAC0_R	tvfe_api.h	/^    TVFE_AUDIO_OUTPUT_DAC0_R,$/;"	e	enum:__anon83
TVFE_AUDIO_OUTPUT_DAC1	tvfe_audio.h	/^    TVFE_AUDIO_OUTPUT_DAC1,$/;"	e	enum:_TVFE_Audio_Output_e
TVFE_AUDIO_OUTPUT_DAC1_L	tvfe_api.h	/^    TVFE_AUDIO_OUTPUT_DAC1_L,$/;"	e	enum:__anon83
TVFE_AUDIO_OUTPUT_DAC1_R	tvfe_api.h	/^    TVFE_AUDIO_OUTPUT_DAC1_R,$/;"	e	enum:__anon83
TVFE_AUDIO_OUTPUT_DAC2	tvfe_audio.h	/^    TVFE_AUDIO_OUTPUT_DAC2,$/;"	e	enum:_TVFE_Audio_Output_e
TVFE_AUDIO_OUTPUT_DAC2_L	tvfe_api.h	/^    TVFE_AUDIO_OUTPUT_DAC2_L,$/;"	e	enum:__anon83
TVFE_AUDIO_OUTPUT_DAC2_R	tvfe_api.h	/^    TVFE_AUDIO_OUTPUT_DAC2_R,$/;"	e	enum:__anon83
TVFE_AUDIO_OUTPUT_I2S0	tvfe_audio.h	/^    TVFE_AUDIO_OUTPUT_I2S0,$/;"	e	enum:_TVFE_Audio_Output_e
TVFE_AUDIO_OUTPUT_I2S0_L	tvfe_api.h	/^    TVFE_AUDIO_OUTPUT_I2S0_L,$/;"	e	enum:__anon83
TVFE_AUDIO_OUTPUT_I2S0_R	tvfe_api.h	/^    TVFE_AUDIO_OUTPUT_I2S0_R,$/;"	e	enum:__anon83
TVFE_AUDIO_OUTPUT_I2S1	tvfe_audio.h	/^    TVFE_AUDIO_OUTPUT_I2S1,$/;"	e	enum:_TVFE_Audio_Output_e
TVFE_AUDIO_OUTPUT_I2S1_L	tvfe_api.h	/^    TVFE_AUDIO_OUTPUT_I2S1_L,$/;"	e	enum:__anon83
TVFE_AUDIO_OUTPUT_I2S1_R	tvfe_api.h	/^    TVFE_AUDIO_OUTPUT_I2S1_R,$/;"	e	enum:__anon83
TVFE_AUDIO_OUTPUT_I2S2	tvfe_audio.h	/^    TVFE_AUDIO_OUTPUT_I2S2,$/;"	e	enum:_TVFE_Audio_Output_e
TVFE_AUDIO_OUTPUT_I2S2_L	tvfe_api.h	/^    TVFE_AUDIO_OUTPUT_I2S2_L,$/;"	e	enum:__anon83
TVFE_AUDIO_OUTPUT_I2S2_R	tvfe_api.h	/^    TVFE_AUDIO_OUTPUT_I2S2_R,$/;"	e	enum:__anon83
TVFE_AUDIO_OUTPUT_INVALID	tvfe_audio.h	/^    TVFE_AUDIO_OUTPUT_INVALID	= 0,$/;"	e	enum:_TVFE_Audio_Output_e
TVFE_AUDIO_OUTPUT_MAX	tvfe_api.h	/^    TVFE_AUDIO_OUTPUT_MAX$/;"	e	enum:__anon83
TVFE_AUDIO_OUTPUT_NR	tvfe_audio.h	/^    TVFE_AUDIO_OUTPUT_NR$/;"	e	enum:_TVFE_Audio_Output_e
TVFE_AUDIO_OUTPUT_NULL	tvfe_api.h	/^    TVFE_AUDIO_OUTPUT_NULL	= 0,$/;"	e	enum:__anon83
TVFE_AUDIO_OUTPUT_PHASE_0	tvfe_audio.h	/^    TVFE_AUDIO_OUTPUT_PHASE_0	= 0,$/;"	e	enum:_TVFE_Audio_Pcm_Output_Phase_e
TVFE_AUDIO_OUTPUT_PHASE_180	tvfe_audio.h	/^    TVFE_AUDIO_OUTPUT_PHASE_180 ,$/;"	e	enum:_TVFE_Audio_Pcm_Output_Phase_e
TVFE_AUDIO_OUTPUT_SELECTION_NR	tvfe_audio.h	/^    TVFE_AUDIO_OUTPUT_SELECTION_NR$/;"	e	enum:_TVFE_Audio_OutputSelection_e
TVFE_AUDIO_OUTPUT_SPDIF	tvfe_audio.h	/^    TVFE_AUDIO_OUTPUT_SPDIF,$/;"	e	enum:_TVFE_Audio_Output_e
TVFE_AUDIO_OUTPUT_SPDIF_BYPASS	tvfe_audio.h	/^    TVFE_AUDIO_OUTPUT_SPDIF_BYPASS,$/;"	e	enum:_TVFE_Audio_OutputSelection_e
TVFE_AUDIO_OUTPUT_SPDIF_L	tvfe_api.h	/^    TVFE_AUDIO_OUTPUT_SPDIF_L,$/;"	e	enum:__anon83
TVFE_AUDIO_OUTPUT_SPDIF_R	tvfe_api.h	/^    TVFE_AUDIO_OUTPUT_SPDIF_R,$/;"	e	enum:__anon83
TVFE_AUDIO_OUTPUT_TYPE_DAC	tvfe_api.h	/^    TVFE_AUDIO_OUTPUT_TYPE_DAC,$/;"	e	enum:__anon82
TVFE_AUDIO_OUTPUT_TYPE_I2S	tvfe_api.h	/^    TVFE_AUDIO_OUTPUT_TYPE_I2S,$/;"	e	enum:__anon82
TVFE_AUDIO_OUTPUT_TYPE_MAX	tvfe_api.h	/^    TVFE_AUDIO_OUTPUT_TYPE_MAX$/;"	e	enum:__anon82
TVFE_AUDIO_OUTPUT_TYPE_NULL	tvfe_api.h	/^    TVFE_AUDIO_OUTPUT_TYPE_NULL	= 0,$/;"	e	enum:__anon82
TVFE_AUDIO_OUTPUT_TYPE_SPDIF	tvfe_api.h	/^    TVFE_AUDIO_OUTPUT_TYPE_SPDIF,$/;"	e	enum:__anon82
TVFE_AUDIO_PATH_AUX1	tvfe_api.h	/^    TVFE_AUDIO_PATH_AUX1,$/;"	e	enum:__anon88
TVFE_AUDIO_PATH_AUX2	tvfe_api.h	/^    TVFE_AUDIO_PATH_AUX2,$/;"	e	enum:__anon88
TVFE_AUDIO_PATH_AUX3	tvfe_api.h	/^    TVFE_AUDIO_PATH_AUX3,$/;"	e	enum:__anon88
TVFE_AUDIO_PATH_CENTER_SUBWOOFER	tvfe_api.h	/^    TVFE_AUDIO_PATH_CENTER_SUBWOOFER,$/;"	e	enum:__anon88
TVFE_AUDIO_PATH_CENTER_SURROUND	tvfe_api.h	/^    TVFE_AUDIO_PATH_CENTER_SURROUND,$/;"	e	enum:__anon88
TVFE_AUDIO_PATH_INVALID	tvfe_audio.h	/^    TVFE_AUDIO_PATH_INVALID                  = 0,$/;"	e	enum:_TVFE_Audio_ProcessPath_e
TVFE_AUDIO_PATH_MAX	tvfe_api.h	/^    TVFE_AUDIO_PATH_MAX$/;"	e	enum:__anon88
TVFE_AUDIO_PATH_NR	tvfe_audio.h	/^	TVFE_AUDIO_PATH_NR$/;"	e	enum:_TVFE_Audio_ProcessPath_e
TVFE_AUDIO_PATH_NULL	tvfe_api.h	/^    TVFE_AUDIO_PATH_NULL                  = 0,$/;"	e	enum:__anon88
TVFE_AUDIO_PATH_PRIMARY	tvfe_api.h	/^    TVFE_AUDIO_PATH_PRIMARY,$/;"	e	enum:__anon88
TVFE_AUDIO_PATH_SURROUND_SUBWOOFER	tvfe_api.h	/^    TVFE_AUDIO_PATH_SURROUND_SUBWOOFER,$/;"	e	enum:__anon88
TVFE_AUDIO_REPORT_DIRECT	tvfe_api.h	/^    TVFE_AUDIO_REPORT_DIRECT,			\/\/direct report from hardware status, for standard report when channel scanning$/;"	e	enum:__anon92
TVFE_AUDIO_REPORT_INDIRECT	tvfe_api.h	/^    TVFE_AUDIO_REPORT_INDIRECT	= 0,\/\/report from audio manager task$/;"	e	enum:__anon92
TVFE_AUDIO_SIF_AVAIL_ANALOG_MONO	tvfe_api.h	/^    TVFE_AUDIO_SIF_AVAIL_ANALOG_MONO				= 0x00000001,$/;"	e	enum:__anon91
TVFE_AUDIO_SIF_AVAIL_BTSC_PILOT_OVERFLOW	tvfe_api.h	/^    TVFE_AUDIO_SIF_AVAIL_BTSC_PILOT_OVERFLOW	= 0x80000000,$/;"	e	enum:__anon91
TVFE_AUDIO_SIF_AVAIL_BUSY	tvfe_api.h	/^    TVFE_AUDIO_SIF_AVAIL_BUSY						= 0x00000000,$/;"	e	enum:__anon91
TVFE_AUDIO_SIF_AVAIL_DUAL	tvfe_api.h	/^    TVFE_AUDIO_SIF_AVAIL_DUAL						= 0x00000008,$/;"	e	enum:__anon91
TVFE_AUDIO_SIF_AVAIL_FORCED_MONO	tvfe_api.h	/^    TVFE_AUDIO_SIF_AVAIL_FORCED_MONO				= 0x00000040,$/;"	e	enum:__anon91
TVFE_AUDIO_SIF_AVAIL_NICAM	tvfe_api.h	/^    TVFE_AUDIO_SIF_AVAIL_NICAM						= 0x00000020,$/;"	e	enum:__anon91
TVFE_AUDIO_SIF_AVAIL_NICAM_MONO	tvfe_api.h	/^    TVFE_AUDIO_SIF_AVAIL_NICAM_MONO				= 0x00000002,$/;"	e	enum:__anon91
TVFE_AUDIO_SIF_AVAIL_SAP	tvfe_api.h	/^    TVFE_AUDIO_SIF_AVAIL_SAP						= 0x00000010,$/;"	e	enum:__anon91
TVFE_AUDIO_SIF_AVAIL_STEREO	tvfe_api.h	/^    TVFE_AUDIO_SIF_AVAIL_STEREO					= 0x00000004,$/;"	e	enum:__anon91
TVFE_AUDIO_SIF_MODE_ANALOG_MONO	tvfe_api.h	/^    TVFE_AUDIO_SIF_MODE_ANALOG_MONO		= 0,$/;"	e	enum:__anon89
TVFE_AUDIO_SIF_MODE_DUAL_I	tvfe_api.h	/^    TVFE_AUDIO_SIF_MODE_DUAL_I,$/;"	e	enum:__anon89
TVFE_AUDIO_SIF_MODE_DUAL_II	tvfe_api.h	/^    TVFE_AUDIO_SIF_MODE_DUAL_II,$/;"	e	enum:__anon89
TVFE_AUDIO_SIF_MODE_DUAL_I_II	tvfe_api.h	/^    TVFE_AUDIO_SIF_MODE_DUAL_I_II,$/;"	e	enum:__anon89
TVFE_AUDIO_SIF_MODE_FORCED_MONO	tvfe_api.h	/^    TVFE_AUDIO_SIF_MODE_FORCED_MONO,$/;"	e	enum:__anon89
TVFE_AUDIO_SIF_MODE_MAX	tvfe_api.h	/^    TVFE_AUDIO_SIF_MODE_MAX,$/;"	e	enum:__anon89
TVFE_AUDIO_SIF_MODE_NICAM_MONO	tvfe_api.h	/^    TVFE_AUDIO_SIF_MODE_NICAM_MONO,$/;"	e	enum:__anon89
TVFE_AUDIO_SIF_MODE_SAP	tvfe_api.h	/^    TVFE_AUDIO_SIF_MODE_SAP,$/;"	e	enum:__anon89
TVFE_AUDIO_SIF_MODE_STEREO	tvfe_api.h	/^    TVFE_AUDIO_SIF_MODE_STEREO,$/;"	e	enum:__anon89
TVFE_AUDIO_SIF_STANDARD_ASD_MODE_MASK_ALL	tvfe_api.h	/^    TVFE_AUDIO_SIF_STANDARD_ASD_MODE_MASK_ALL		= (0x1f),$/;"	e	enum:__anon81
TVFE_AUDIO_SIF_STANDARD_ASD_MODE_MASK_BG	tvfe_api.h	/^    TVFE_AUDIO_SIF_STANDARD_ASD_MODE_MASK_BG		= (0x01),	\/* B\/G(H) (2 possible stereo standards)  5.5 MHz *\/$/;"	e	enum:__anon81
TVFE_AUDIO_SIF_STANDARD_ASD_MODE_MASK_BGDKI	tvfe_api.h	/^    TVFE_AUDIO_SIF_STANDARD_ASD_MODE_MASK_BGDKI	= (TVFE_AUDIO_SIF_STANDARD_ASD_MODE_MASK_BG|TVFE_AUDIO_SIF_STANDARD_ASD_MODE_MASK_DK|TVFE_AUDIO_SIF_STANDARD_ASD_MODE_MASK_I),\/\/todo:remove this$/;"	e	enum:__anon81
TVFE_AUDIO_SIF_STANDARD_ASD_MODE_MASK_BGDKIM	tvfe_api.h	/^    TVFE_AUDIO_SIF_STANDARD_ASD_MODE_MASK_BGDKIM	= (TVFE_AUDIO_SIF_STANDARD_ASD_MODE_MASK_BG|TVFE_AUDIO_SIF_STANDARD_ASD_MODE_MASK_DK|TVFE_AUDIO_SIF_STANDARD_ASD_MODE_MASK_I|TVFE_AUDIO_SIF_STANDARD_ASD_MODE_MASK_M),\/\/todo:remove this$/;"	e	enum:__anon81
TVFE_AUDIO_SIF_STANDARD_ASD_MODE_MASK_DK	tvfe_api.h	/^    TVFE_AUDIO_SIF_STANDARD_ASD_MODE_MASK_DK  	= (0x02),	\/* D\/K\/K'(4 possible stereo standards)   6.5 MHz *\/$/;"	e	enum:__anon81
TVFE_AUDIO_SIF_STANDARD_ASD_MODE_MASK_I	tvfe_api.h	/^    TVFE_AUDIO_SIF_STANDARD_ASD_MODE_MASK_I       = (0x08),	\/* I                                     6.0 MHz *\/$/;"	e	enum:__anon81
TVFE_AUDIO_SIF_STANDARD_ASD_MODE_MASK_L	tvfe_api.h	/^    TVFE_AUDIO_SIF_STANDARD_ASD_MODE_MASK_L       = (0x04),	\/* L\/L'                                  6.5 MHz *\/$/;"	e	enum:__anon81
TVFE_AUDIO_SIF_STANDARD_ASD_MODE_MASK_M	tvfe_api.h	/^    TVFE_AUDIO_SIF_STANDARD_ASD_MODE_MASK_M       = (0x10),	\/* M(Korea A2 BTSC or EIAJ)              4.5 MHz *\/$/;"	e	enum:__anon81
TVFE_AUDIO_SIF_STANDARD_BG	tvfe_api.h	/^    TVFE_AUDIO_SIF_STANDARD_BG,$/;"	e	enum:__anon90
TVFE_AUDIO_SIF_STANDARD_BG_A2	tvfe_api.h	/^    TVFE_AUDIO_SIF_STANDARD_BG_A2,$/;"	e	enum:__anon90
TVFE_AUDIO_SIF_STANDARD_BG_NICAM	tvfe_api.h	/^    TVFE_AUDIO_SIF_STANDARD_BG_NICAM,$/;"	e	enum:__anon90
TVFE_AUDIO_SIF_STANDARD_BUSY	tvfe_api.h	/^    TVFE_AUDIO_SIF_STANDARD_BUSY,$/;"	e	enum:__anon90
TVFE_AUDIO_SIF_STANDARD_DK	tvfe_api.h	/^    TVFE_AUDIO_SIF_STANDARD_DK,$/;"	e	enum:__anon90
TVFE_AUDIO_SIF_STANDARD_DK_A2_1	tvfe_api.h	/^    TVFE_AUDIO_SIF_STANDARD_DK_A2_1,$/;"	e	enum:__anon90
TVFE_AUDIO_SIF_STANDARD_DK_A2_2	tvfe_api.h	/^    TVFE_AUDIO_SIF_STANDARD_DK_A2_2,$/;"	e	enum:__anon90
TVFE_AUDIO_SIF_STANDARD_DK_A2_3	tvfe_api.h	/^    TVFE_AUDIO_SIF_STANDARD_DK_A2_3,$/;"	e	enum:__anon90
TVFE_AUDIO_SIF_STANDARD_DK_NICAM	tvfe_api.h	/^    TVFE_AUDIO_SIF_STANDARD_DK_NICAM,$/;"	e	enum:__anon90
TVFE_AUDIO_SIF_STANDARD_FAIL	tvfe_api.h	/^    TVFE_AUDIO_SIF_STANDARD_FAIL	= 0,$/;"	e	enum:__anon90
TVFE_AUDIO_SIF_STANDARD_FM_10_7_IF_50_US	tvfe_api.h	/^    TVFE_AUDIO_SIF_STANDARD_FM_10_7_IF_50_US,$/;"	e	enum:__anon90
TVFE_AUDIO_SIF_STANDARD_FM_10_7_IF_75_US	tvfe_api.h	/^    TVFE_AUDIO_SIF_STANDARD_FM_10_7_IF_75_US,$/;"	e	enum:__anon90
TVFE_AUDIO_SIF_STANDARD_FM_SELECTABLE_IF_50_US	tvfe_api.h	/^    TVFE_AUDIO_SIF_STANDARD_FM_SELECTABLE_IF_50_US,        \/* Need to check ?? *\/$/;"	e	enum:__anon90
TVFE_AUDIO_SIF_STANDARD_FM_SELECTABLE_IF_75_US	tvfe_api.h	/^    TVFE_AUDIO_SIF_STANDARD_FM_SELECTABLE_IF_75_US,        \/* Need to check ?? *\/$/;"	e	enum:__anon90
TVFE_AUDIO_SIF_STANDARD_I_NICAM	tvfe_api.h	/^    TVFE_AUDIO_SIF_STANDARD_I_NICAM,$/;"	e	enum:__anon90
TVFE_AUDIO_SIF_STANDARD_L_NICAM	tvfe_api.h	/^    TVFE_AUDIO_SIF_STANDARD_L_NICAM,$/;"	e	enum:__anon90
TVFE_AUDIO_SIF_STANDARD_M	tvfe_api.h	/^    TVFE_AUDIO_SIF_STANDARD_M,$/;"	e	enum:__anon90
TVFE_AUDIO_SIF_STANDARD_M_BTSC	tvfe_api.h	/^    TVFE_AUDIO_SIF_STANDARD_M_BTSC,$/;"	e	enum:__anon90
TVFE_AUDIO_SIF_STANDARD_M_EIAJ	tvfe_api.h	/^    TVFE_AUDIO_SIF_STANDARD_M_EIAJ,$/;"	e	enum:__anon90
TVFE_AUDIO_SIF_STANDARD_M_KOREA	tvfe_api.h	/^    TVFE_AUDIO_SIF_STANDARD_M_KOREA,$/;"	e	enum:__anon90
TVFE_AUDIO_SIF_STANDARD_SSS_MODE_BG	tvfe_api.h	/^    TVFE_AUDIO_SIF_STANDARD_SSS_MODE_BG,$/;"	e	enum:__anon81
TVFE_AUDIO_SIF_STANDARD_SSS_MODE_BG_A2	tvfe_api.h	/^    TVFE_AUDIO_SIF_STANDARD_SSS_MODE_BG_A2,$/;"	e	enum:__anon81
TVFE_AUDIO_SIF_STANDARD_SSS_MODE_BG_NICAM	tvfe_api.h	/^    TVFE_AUDIO_SIF_STANDARD_SSS_MODE_BG_NICAM,$/;"	e	enum:__anon81
TVFE_AUDIO_SIF_STANDARD_SSS_MODE_DK	tvfe_api.h	/^    TVFE_AUDIO_SIF_STANDARD_SSS_MODE_DK,$/;"	e	enum:__anon81
TVFE_AUDIO_SIF_STANDARD_SSS_MODE_DK_A2_1	tvfe_api.h	/^    TVFE_AUDIO_SIF_STANDARD_SSS_MODE_DK_A2_1,$/;"	e	enum:__anon81
TVFE_AUDIO_SIF_STANDARD_SSS_MODE_DK_A2_2	tvfe_api.h	/^    TVFE_AUDIO_SIF_STANDARD_SSS_MODE_DK_A2_2,$/;"	e	enum:__anon81
TVFE_AUDIO_SIF_STANDARD_SSS_MODE_DK_A2_3	tvfe_api.h	/^    TVFE_AUDIO_SIF_STANDARD_SSS_MODE_DK_A2_3,$/;"	e	enum:__anon81
TVFE_AUDIO_SIF_STANDARD_SSS_MODE_DK_NICAM	tvfe_api.h	/^    TVFE_AUDIO_SIF_STANDARD_SSS_MODE_DK_NICAM,$/;"	e	enum:__anon81
TVFE_AUDIO_SIF_STANDARD_SSS_MODE_FM_10_7_IF_50_US	tvfe_api.h	/^    TVFE_AUDIO_SIF_STANDARD_SSS_MODE_FM_10_7_IF_50_US,$/;"	e	enum:__anon81
TVFE_AUDIO_SIF_STANDARD_SSS_MODE_FM_10_7_IF_75_US	tvfe_api.h	/^    TVFE_AUDIO_SIF_STANDARD_SSS_MODE_FM_10_7_IF_75_US,$/;"	e	enum:__anon81
TVFE_AUDIO_SIF_STANDARD_SSS_MODE_FM_SELECTABLE_IF_50_US	tvfe_api.h	/^    TVFE_AUDIO_SIF_STANDARD_SSS_MODE_FM_SELECTABLE_IF_50_US,        \/* Need to check ?? *\/$/;"	e	enum:__anon81
TVFE_AUDIO_SIF_STANDARD_SSS_MODE_FM_SELECTABLE_IF_75_US	tvfe_api.h	/^    TVFE_AUDIO_SIF_STANDARD_SSS_MODE_FM_SELECTABLE_IF_75_US,        \/* Need to check ?? *\/$/;"	e	enum:__anon81
TVFE_AUDIO_SIF_STANDARD_SSS_MODE_I_NICAM	tvfe_api.h	/^    TVFE_AUDIO_SIF_STANDARD_SSS_MODE_I_NICAM,$/;"	e	enum:__anon81
TVFE_AUDIO_SIF_STANDARD_SSS_MODE_L_NICAM	tvfe_api.h	/^    TVFE_AUDIO_SIF_STANDARD_SSS_MODE_L_NICAM,$/;"	e	enum:__anon81
TVFE_AUDIO_SIF_STANDARD_SSS_MODE_M	tvfe_api.h	/^    TVFE_AUDIO_SIF_STANDARD_SSS_MODE_M,$/;"	e	enum:__anon81
TVFE_AUDIO_SIF_STANDARD_SSS_MODE_M_BTSC	tvfe_api.h	/^    TVFE_AUDIO_SIF_STANDARD_SSS_MODE_M_BTSC,$/;"	e	enum:__anon81
TVFE_AUDIO_SIF_STANDARD_SSS_MODE_M_EIAJ	tvfe_api.h	/^    TVFE_AUDIO_SIF_STANDARD_SSS_MODE_M_EIAJ,$/;"	e	enum:__anon81
TVFE_AUDIO_SIF_STANDARD_SSS_MODE_M_KOREA	tvfe_api.h	/^    TVFE_AUDIO_SIF_STANDARD_SSS_MODE_M_KOREA,$/;"	e	enum:__anon81
TVFE_AUDIO_SPDIF_BITSTREAM	tvfe_audio.h	/^    TVFE_AUDIO_SPDIF_BITSTREAM,$/;"	e	enum:_TVFE_Audio_SPDIF_Output_Config_e
TVFE_AUDIO_SPDIF_IECRX	tvfe_audio.h	/^    TVFE_AUDIO_SPDIF_IECRX,$/;"	e	enum:_TVFE_Audio_SPDIF_Output_Config_e
TVFE_AUDIO_SPDIF_OFF	tvfe_audio.h	/^    TVFE_AUDIO_SPDIF_OFF	= 0,$/;"	e	enum:_TVFE_Audio_SPDIF_Output_Config_e
TVFE_AUDIO_SPDIF_Output_SmpRate_192K	tvfe_audio.h	/^    TVFE_AUDIO_SPDIF_Output_SmpRate_192K,$/;"	e	enum:_TVFE_Audio_SPDIF_Output_SmpRate_Config_e
TVFE_AUDIO_SPDIF_Output_SmpRate_32K	tvfe_audio.h	/^    TVFE_AUDIO_SPDIF_Output_SmpRate_32K,$/;"	e	enum:_TVFE_Audio_SPDIF_Output_SmpRate_Config_e
TVFE_AUDIO_SPDIF_Output_SmpRate_44K	tvfe_audio.h	/^    TVFE_AUDIO_SPDIF_Output_SmpRate_44K,$/;"	e	enum:_TVFE_Audio_SPDIF_Output_SmpRate_Config_e
TVFE_AUDIO_SPDIF_Output_SmpRate_48K	tvfe_audio.h	/^    TVFE_AUDIO_SPDIF_Output_SmpRate_48K = 0,$/;"	e	enum:_TVFE_Audio_SPDIF_Output_SmpRate_Config_e
TVFE_AUDIO_SPDIF_Output_SmpRate_96K	tvfe_audio.h	/^    TVFE_AUDIO_SPDIF_Output_SmpRate_96K,$/;"	e	enum:_TVFE_Audio_SPDIF_Output_SmpRate_Config_e
TVFE_AUDIO_SPDIF_PCM	tvfe_audio.h	/^    TVFE_AUDIO_SPDIF_PCM,$/;"	e	enum:_TVFE_Audio_SPDIF_Output_Config_e
TVFE_AUDIO_SPDIF_REENC	tvfe_audio.h	/^    TVFE_AUDIO_SPDIF_REENC,$/;"	e	enum:_TVFE_Audio_SPDIF_Output_Config_e
TVFE_AUDIO_SUCCESS	tvfe_audio.h	/^   TVFE_AUDIO_SUCCESS,	\/* successful outcome *\/$/;"	e	enum:_TVFE_Audio_Status_e
TVFE_AUDIO_WARN_BUFFER_EMPTY	tvfe_audio.h	/^   TVFE_AUDIO_WARN_BUFFER_EMPTY,	\/* buffer became empty before the requested amount of data could be read *\/$/;"	e	enum:_TVFE_Audio_Status_e
TVFE_AUDIO_WARN_BUFFER_FULL	tvfe_audio.h	/^   TVFE_AUDIO_WARN_BUFFER_FULL,	\/* buffer became full before the requested amount of data could be written *\/$/;"	e	enum:_TVFE_Audio_Status_e
TVFE_AUDIO_WARN_NO_ACTION	tvfe_audio.h	/^   TVFE_AUDIO_WARN_NO_ACTION,	\/* the function completed successfully, but no action was taken *\/$/;"	e	enum:_TVFE_Audio_Status_e
TVFE_AUDIO_WARN_PARAM_CLIPPED	tvfe_audio.h	/^   TVFE_AUDIO_WARN_PARAM_CLIPPED,	\/* the function completed successfully, though a parameter was clipped to within a valid range.*\/$/;"	e	enum:_TVFE_Audio_Status_e
TVFE_AUTO_TUNE_ALL	tvfe_api.h	/^	TVFE_AUTO_TUNE_ALL,$/;"	e	enum:__anon59
TVFE_AUTO_TUNE_CLOCK	tvfe_api.h	/^	TVFE_AUTO_TUNE_CLOCK,$/;"	e	enum:__anon59
TVFE_AUTO_TUNE_COMPLETE	tvfe_api.h	/^	TVFE_AUTO_TUNE_COMPLETE,$/;"	e	enum:__anon60
TVFE_AUTO_TUNE_DONE	tvfe_api.h	/^	TVFE_AUTO_TUNE_DONE,$/;"	e	enum:__anon59
TVFE_AUTO_TUNE_NOT_PC	tvfe_api.h	/^	TVFE_AUTO_TUNE_NOT_PC,$/;"	e	enum:__anon60
TVFE_AUTO_TUNE_PHASE	tvfe_api.h	/^	TVFE_AUTO_TUNE_PHASE = 0,$/;"	e	enum:__anon59
TVFE_AUTO_TUNE_POSITION	tvfe_api.h	/^	TVFE_AUTO_TUNE_POSITION,$/;"	e	enum:__anon59
TVFE_AUTO_TUNE_RUNNING	tvfe_api.h	/^	TVFE_AUTO_TUNE_RUNNING = 0,$/;"	e	enum:__anon60
TVFE_AdcFuncConf_e	tvfe_api.h	/^} TVFE_AdcFuncConf_e;$/;"	t	typeref:enum:__anon58
TVFE_AudioAUXAction_e	tvfe_api.h	/^} TVFE_AudioAUXAction_e;$/;"	t	typeref:enum:__anon84
TVFE_AudioAUXConfig_st	tvfe_api.h	/^} TVFE_AudioAUXConfig_st;$/;"	t	typeref:struct:__anon114
TVFE_AudioFrontEndControl_t	tvfe_api.h	/^} TVFE_AudioFrontEndControl_t;$/;"	t	typeref:struct:__anon122
TVFE_AudioFrontEndParam_t	tvfe_api.h	/^} TVFE_AudioFrontEndParam_t;$/;"	t	typeref:struct:__anon124
TVFE_AudioFrontEndStatus_t	tvfe_api.h	/^} TVFE_AudioFrontEndStatus_t;$/;"	t	typeref:struct:__anon120
TVFE_AudioGetFrontEndParam	audio_api.c	/^TVFE_Audio_Status_e TVFE_AudioGetFrontEndParam(int Aud_fd, TVFE_Audio_CMD_st *TVFE_Config)$/;"	f	signature:(int Aud_fd, TVFE_Audio_CMD_st *TVFE_Config)
TVFE_AudioInitialConfig_st	tvfe_api.h	/^} TVFE_AudioInitialConfig_st;$/;"	t	typeref:struct:__anon116
TVFE_AudioLevelAdjust_st	tvfe_api.h	/^} TVFE_AudioLevelAdjust_st;$/;"	t	typeref:struct:__anon117
TVFE_AudioManagerRequst_e	tvfe_api.h	/^} TVFE_AudioManagerRequst_e;$/;"	t	typeref:enum:__anon85
TVFE_AudioMutePath_e	tvfe_api.h	/^} TVFE_AudioMutePath_e;$/;"	t	typeref:enum:__anon87
TVFE_AudioOutputConfig_st	tvfe_api.h	/^} TVFE_AudioOutputConfig_st;$/;"	t	typeref:struct:__anon115
TVFE_AudioOutputPinConfig_st	tvfe_api.h	/^} TVFE_AudioOutputPinConfig_st;$/;"	t	typeref:struct:__anon113
TVFE_AudioOutputType_e	tvfe_api.h	/^} TVFE_AudioOutputType_e;$/;"	t	typeref:enum:__anon82
TVFE_AudioPath_e	tvfe_api.h	/^} TVFE_AudioPath_e;$/;"	t	typeref:enum:__anon88
TVFE_AudioPowerContro_e	tvfe_api.h	/^} TVFE_AudioPowerContro_e;$/;"	t	typeref:enum:__anon80
TVFE_AudioPowerControl	audio_api.c	/^TVFE_Audio_Status_e TVFE_AudioPowerControl(int Aud_fd, TVFE_Audio_CMD_st *TVFE_Config)$/;"	f	signature:(int Aud_fd, TVFE_Audio_CMD_st *TVFE_Config)
TVFE_AudioPowerControl	audio_api.h	/^TVFE_Audio_Status_e TVFE_AudioPowerControl(int Aud_fd, TVFE_Audio_CMD_st *TVFE_Config);$/;"	p	signature:(int Aud_fd, TVFE_Audio_CMD_st *TVFE_Config)
TVFE_AudioReportMethod_t	tvfe_api.h	/^} TVFE_AudioReportMethod_t;$/;"	t	typeref:enum:__anon92
TVFE_AudioSIFAGCConfig_t	tvfe_api.h	/^} TVFE_AudioSIFAGCConfig_t;$/;"	t	typeref:struct:__anon121
TVFE_AudioSIFAvailableMode_e	tvfe_api.h	/^} TVFE_AudioSIFAvailableMode_e;$/;"	t	typeref:enum:__anon91
TVFE_AudioSIFMode_e	tvfe_api.h	/^} TVFE_AudioSIFMode_e;$/;"	t	typeref:enum:__anon89
TVFE_AudioSIFStandardMask_e	tvfe_api.h	/^} TVFE_AudioSIFStandardMask_e;$/;"	t	typeref:enum:__anon81
TVFE_AudioSIFStandard_t	tvfe_api.h	/^} TVFE_AudioSIFStandard_t;$/;"	t	typeref:enum:__anon90
TVFE_AudioSetSIFConnect	audio_api.c	/^TVFE_Audio_Status_e TVFE_AudioSetSIFConnect(int Aud_fd, TVFE_Audio_CMD_st *TVFE_Config)$/;"	f	signature:(int Aud_fd, TVFE_Audio_CMD_st *TVFE_Config)
TVFE_Audio_AUX_Volume_t	tvfe_audio.h	/^} TVFE_Audio_AUX_Volume_t;$/;"	t	typeref:struct:_TVFE_Audio_AUX_Volume_t
TVFE_Audio_AVL_Config_t	tvfe_audio.h	/^} TVFE_Audio_AVL_Config_t;$/;"	t	typeref:struct:_TVFE_Audio_AVL_Config_t
TVFE_Audio_AVL_Decay_Time_e	tvfe_audio.h	/^} TVFE_Audio_AVL_Decay_Time_e;$/;"	t	typeref:enum:_TVFE_Audio_AVLMode_e
TVFE_Audio_AVL_Reference_Level_e	tvfe_audio.h	/^} TVFE_Audio_AVL_Reference_Level_e;$/;"	t	typeref:enum:_TVFE_Audio_AVLReferenceLevel_e
TVFE_Audio_CMD	dsp_ioctl.h	/^typedef union TVFE_Audio_CMD {$/;"	u
TVFE_Audio_CMD_st	dsp_ioctl.h	/^}__attribute__((packed)) TVFE_Audio_CMD_st;$/;"	t	typeref:union:TVFE_Audio_CMD
TVFE_Audio_Effect_e	tvfe_audio.h	/^} TVFE_Audio_Effect_e;$/;"	t	typeref:enum:_TVFE_Audio_Effect_e
TVFE_Audio_Equalizer_Config_t	tvfe_audio.h	/^} TVFE_Audio_Equalizer_Config_t;$/;"	t	typeref:struct:_TVFE_Audio_Equalizer_Config_t
TVFE_Audio_Get_Main_Equlizer_Config	audio_api.c	/^TVFE_Audio_Status_e TVFE_Audio_Get_Main_Equlizer_Config(int Aud_fd, TVFE_Audio_CMD_st *TVFE_Config)$/;"	f	signature:(int Aud_fd, TVFE_Audio_CMD_st *TVFE_Config)
TVFE_Audio_Get_Main_Equlizer_Config	audio_api.h	/^TVFE_Audio_Status_e TVFE_Audio_Get_Main_Equlizer_Config(int Aud_fd, TVFE_Audio_CMD_st *TVFE_Config);$/;"	p	signature:(int Aud_fd, TVFE_Audio_CMD_st *TVFE_Config)
TVFE_Audio_Get_MasterMuteStatus	audio_api.c	/^TVFE_Audio_Status_e TVFE_Audio_Get_MasterMuteStatus(int Aud_fd, TVFE_Audio_CMD_st *TVFE_Config)$/;"	f	signature:(int Aud_fd, TVFE_Audio_CMD_st *TVFE_Config)
TVFE_Audio_Get_MasterMuteStatus	audio_api.h	/^TVFE_Audio_Status_e TVFE_Audio_Get_MasterMuteStatus(int Aud_fd, TVFE_Audio_CMD_st *TVFE_Config);$/;"	p	signature:(int Aud_fd, TVFE_Audio_CMD_st *TVFE_Config)
TVFE_Audio_Initial	audio_api.c	/^TVFE_Audio_Status_e TVFE_Audio_Initial(int Aud_fd)$/;"	f	signature:(int Aud_fd)
TVFE_Audio_Initial	audio_api.h	/^TVFE_Audio_Status_e TVFE_Audio_Initial(int Aud_fd);$/;"	p	signature:(int Aud_fd)
TVFE_Audio_Level_Adjust_t	tvfe_audio.h	/^} TVFE_Audio_Level_Adjust_t;$/;"	t	typeref:struct:_TVFE_Audio_Level_Adjust_t
TVFE_Audio_Lip_Sync_Config	audio_api.c	/^TVFE_Audio_Status_e TVFE_Audio_Lip_Sync_Config(int Aud_fd, TVFE_Audio_CMD_st *TVFE_Config)$/;"	f	signature:(int Aud_fd, TVFE_Audio_CMD_st *TVFE_Config)
TVFE_Audio_Lip_Sync_Config	audio_api.h	/^TVFE_Audio_Status_e TVFE_Audio_Lip_Sync_Config(int Aud_fd, TVFE_Audio_CMD_st *TVFE_Config);$/;"	p	signature:(int Aud_fd, TVFE_Audio_CMD_st *TVFE_Config)
TVFE_Audio_Lip_Sync_Config_t	tvfe_audio.h	/^} TVFE_Audio_Lip_Sync_Config_t;$/;"	t	typeref:struct:_TVFE_Audio_Lip_Sync_Config_t
TVFE_Audio_MuteFunctionPtr	tvfe_audio.h	/^typedef  void (*TVFE_Audio_MuteFunctionPtr)(TVFE_BOOL Enable);$/;"	t
TVFE_Audio_Mute_t	tvfe_audio.h	/^} TVFE_Audio_Mute_t;	\/\/audio DSP needs 76 ms to ramp down$/;"	t	typeref:struct:_TVFE_Audio_Mute_t
TVFE_Audio_Output_Config_t	tvfe_audio.h	/^} TVFE_Audio_Output_Config_t;$/;"	t	typeref:struct:_TVFE_Audio_Output_Config_t
TVFE_Audio_Output_Selection_e	tvfe_audio.h	/^} TVFE_Audio_Output_Selection_e;$/;"	t	typeref:enum:_TVFE_Audio_OutputSelection_e
TVFE_Audio_Output_Selection_t	tvfe_audio.h	/^} TVFE_Audio_Output_Selection_t;$/;"	t	typeref:struct:_TVFE_Audio_Output_Selection_t
TVFE_Audio_Output_e	tvfe_audio.h	/^} TVFE_Audio_Output_e;$/;"	t	typeref:enum:_TVFE_Audio_Output_e
TVFE_Audio_PCM_Output_Phase_Config	audio_api.c	/^TVFE_Audio_Status_e TVFE_Audio_PCM_Output_Phase_Config(int Aud_fd, TVFE_Audio_CMD_st *TVFE_Config)$/;"	f	signature:(int Aud_fd, TVFE_Audio_CMD_st *TVFE_Config)
TVFE_Audio_PCM_Output_Phase_Config	audio_api.h	/^TVFE_Audio_Status_e TVFE_Audio_PCM_Output_Phase_Config(int Aud_fd, TVFE_Audio_CMD_st *TVFE_Config);$/;"	p	signature:(int Aud_fd, TVFE_Audio_CMD_st *TVFE_Config)
TVFE_Audio_Pcm_Output_Phase_Config_t	tvfe_audio.h	/^} TVFE_Audio_Pcm_Output_Phase_Config_t;$/;"	t	typeref:struct:_TVFE_Audio_Pcm_Output_Phase_Config_t
TVFE_Audio_Pcm_Output_Phase_e	tvfe_audio.h	/^} TVFE_Audio_Pcm_Output_Phase_e;$/;"	t	typeref:enum:_TVFE_Audio_Pcm_Output_Phase_e
TVFE_Audio_Process_Path_e	tvfe_audio.h	/^} TVFE_Audio_Process_Path_e;$/;"	t	typeref:enum:_TVFE_Audio_ProcessPath_e
TVFE_Audio_SIFHandler_Busy	tvfe_audio.h	/^	TVFE_Audio_SIFHandler_Busy,$/;"	e	enum:_TVFE_Audio_SIFHandler_Status
TVFE_Audio_SIFHandler_Ready	tvfe_audio.h	/^	TVFE_Audio_SIFHandler_Ready,$/;"	e	enum:_TVFE_Audio_SIFHandler_Status
TVFE_Audio_SIFHandler_Status_e	tvfe_audio.h	/^} TVFE_Audio_SIFHandler_Status_e;$/;"	t	typeref:enum:_TVFE_Audio_SIFHandler_Status
TVFE_Audio_SIF_Detect_Config_t	tvfe_audio.h	/^} TVFE_Audio_SIF_Detect_Config_t;$/;"	t	typeref:struct:_TVFE_Audio_SIF_Magnitude_Detect_Config_t
TVFE_Audio_SIF_Over_Modulation_Config_t	tvfe_audio.h	/^} TVFE_Audio_SIF_Over_Modulation_Config_t;$/;"	t	typeref:struct:_TVFE_Audio_SIF_Over_Modulation_Config_t
TVFE_Audio_SPDIF_Output_Config	audio_api.c	/^TVFE_Audio_Status_e TVFE_Audio_SPDIF_Output_Config(int Aud_fd, TVFE_Audio_CMD_st *TVFE_Config)$/;"	f	signature:(int Aud_fd, TVFE_Audio_CMD_st *TVFE_Config)
TVFE_Audio_SPDIF_Output_Config	audio_api.h	/^TVFE_Audio_Status_e TVFE_Audio_SPDIF_Output_Config(int Aud_fd, TVFE_Audio_CMD_st *TVFE_Config);$/;"	p	signature:(int Aud_fd, TVFE_Audio_CMD_st *TVFE_Config)
TVFE_Audio_SPDIF_Output_Config_e	tvfe_audio.h	/^} TVFE_Audio_SPDIF_Output_Config_e;$/;"	t	typeref:enum:_TVFE_Audio_SPDIF_Output_Config_e
TVFE_Audio_SPDIF_Output_SmpRate_Config_e	tvfe_audio.h	/^} TVFE_Audio_SPDIF_Output_SmpRate_Config_e;$/;"	t	typeref:enum:_TVFE_Audio_SPDIF_Output_SmpRate_Config_e
TVFE_Audio_SUNSUR_GAIN_0P0	tvfe_audio.h	/^	TVFE_Audio_SUNSUR_GAIN_0P0,$/;"	e	enum:_TVFE_Audio_SUNSUR_Gain_e
TVFE_Audio_SUNSUR_GAIN_0P4	tvfe_audio.h	/^	TVFE_Audio_SUNSUR_GAIN_0P4,$/;"	e	enum:_TVFE_Audio_SUNSUR_Gain_e
TVFE_Audio_SUNSUR_GAIN_0P5	tvfe_audio.h	/^	TVFE_Audio_SUNSUR_GAIN_0P5,$/;"	e	enum:_TVFE_Audio_SUNSUR_Gain_e
TVFE_Audio_SUNSUR_GAIN_0P6	tvfe_audio.h	/^	TVFE_Audio_SUNSUR_GAIN_0P6,$/;"	e	enum:_TVFE_Audio_SUNSUR_Gain_e
TVFE_Audio_SUNSUR_GAIN_0P7	tvfe_audio.h	/^	TVFE_Audio_SUNSUR_GAIN_0P7,$/;"	e	enum:_TVFE_Audio_SUNSUR_Gain_e
TVFE_Audio_SUNSUR_GAIN_0P8	tvfe_audio.h	/^	TVFE_Audio_SUNSUR_GAIN_0P8,$/;"	e	enum:_TVFE_Audio_SUNSUR_Gain_e
TVFE_Audio_SUNSUR_GAIN_0P9	tvfe_audio.h	/^	TVFE_Audio_SUNSUR_GAIN_0P9,$/;"	e	enum:_TVFE_Audio_SUNSUR_Gain_e
TVFE_Audio_SUNSUR_GAIN_1P0	tvfe_audio.h	/^	TVFE_Audio_SUNSUR_GAIN_1P0,$/;"	e	enum:_TVFE_Audio_SUNSUR_Gain_e
TVFE_Audio_SUNSUR_Gain_e	tvfe_audio.h	/^} TVFE_Audio_SUNSUR_Gain_e;$/;"	t	typeref:enum:_TVFE_Audio_SUNSUR_Gain_e
TVFE_Audio_SUNSUR_Param_t	tvfe_audio.h	/^} TVFE_Audio_SUNSUR_Param_t;$/;"	t	typeref:struct:__anon155
TVFE_Audio_Set_AC3TransCoding	audio_api.c	/^TVFE_Audio_Status_e TVFE_Audio_Set_AC3TransCoding(int Aud_fd, TVFE_Audio_CMD_st *TVFE_Config)$/;"	f	signature:(int Aud_fd, TVFE_Audio_CMD_st *TVFE_Config)
TVFE_Audio_Set_AC3TransCoding	audio_api.h	/^TVFE_Audio_Status_e TVFE_Audio_Set_AC3TransCoding(int Aud_fd, TVFE_Audio_CMD_st *TVFE_Config);$/;"	p	signature:(int Aud_fd, TVFE_Audio_CMD_st *TVFE_Config)
TVFE_Audio_Set_AUX_Volume	audio_api.c	/^TVFE_Audio_Status_e TVFE_Audio_Set_AUX_Volume(int Aud_fd, TVFE_Audio_CMD_st *TVFE_Config)$/;"	f	signature:(int Aud_fd, TVFE_Audio_CMD_st *TVFE_Config)
TVFE_Audio_Set_AUX_Volume	audio_api.h	/^TVFE_Audio_Status_e TVFE_Audio_Set_AUX_Volume(int Aud_fd, TVFE_Audio_CMD_st *TVFE_Config);$/;"	p	signature:(int Aud_fd, TVFE_Audio_CMD_st *TVFE_Config)
TVFE_Audio_Set_AVL_Config	audio_api.c	/^TVFE_Audio_Status_e TVFE_Audio_Set_AVL_Config(int Aud_fd, TVFE_Audio_CMD_st *TVFE_Config)$/;"	f	signature:(int Aud_fd, TVFE_Audio_CMD_st *TVFE_Config)
TVFE_Audio_Set_AVL_Config	audio_api.h	/^TVFE_Audio_Status_e TVFE_Audio_Set_AVL_Config(int Aud_fd, TVFE_Audio_CMD_st *TVFE_Config);$/;"	p	signature:(int Aud_fd, TVFE_Audio_CMD_st *TVFE_Config)
TVFE_Audio_Set_AtvRamp	audio_api.c	/^TVFE_Audio_Status_e TVFE_Audio_Set_AtvRamp(int Aud_fd, TVFE_Audio_CMD_st *TVFE_Config)$/;"	f	signature:(int Aud_fd, TVFE_Audio_CMD_st *TVFE_Config)
TVFE_Audio_Set_AtvRamp	audio_api.h	/^TVFE_Audio_Status_e TVFE_Audio_Set_AtvRamp(int Aud_fd, TVFE_Audio_CMD_st *TVFE_Config);$/;"	p	signature:(int Aud_fd, TVFE_Audio_CMD_st *TVFE_Config)
TVFE_Audio_Set_Balance	audio_api.c	/^TVFE_Audio_Status_e TVFE_Audio_Set_Balance(int Aud_fd, TVFE_Audio_CMD_st *TVFE_Config)$/;"	f	signature:(int Aud_fd, TVFE_Audio_CMD_st *TVFE_Config)
TVFE_Audio_Set_Balance	audio_api.h	/^TVFE_Audio_Status_e TVFE_Audio_Set_Balance(int Aud_fd, TVFE_Audio_CMD_st *TVFE_Config);$/;"	p	signature:(int Aud_fd, TVFE_Audio_CMD_st *TVFE_Config)
TVFE_Audio_Set_Bass	audio_api.c	/^TVFE_Audio_Status_e TVFE_Audio_Set_Bass(int Aud_fd, TVFE_Audio_CMD_st *TVFE_Config)$/;"	f	signature:(int Aud_fd, TVFE_Audio_CMD_st *TVFE_Config)
TVFE_Audio_Set_Bass	audio_api.h	/^TVFE_Audio_Status_e TVFE_Audio_Set_Bass(int Aud_fd, TVFE_Audio_CMD_st *TVFE_Config);$/;"	p	signature:(int Aud_fd, TVFE_Audio_CMD_st *TVFE_Config)
TVFE_Audio_Set_Effect_Mode	audio_api.c	/^TVFE_Audio_Status_e TVFE_Audio_Set_Effect_Mode(int Aud_fd, TVFE_Audio_CMD_st *TVFE_Config)$/;"	f	signature:(int Aud_fd, TVFE_Audio_CMD_st *TVFE_Config)
TVFE_Audio_Set_Effect_Mode	audio_api.h	/^TVFE_Audio_Status_e TVFE_Audio_Set_Effect_Mode(int Aud_fd, TVFE_Audio_CMD_st *TVFE_Config);$/;"	p	signature:(int Aud_fd, TVFE_Audio_CMD_st *TVFE_Config)
TVFE_Audio_Set_HEAAC_Output	audio_api.c	/^TVFE_Audio_Status_e TVFE_Audio_Set_HEAAC_Output(int Aud_fd, TVFE_Audio_CMD_st *TVFE_Config)$/;"	f	signature:(int Aud_fd, TVFE_Audio_CMD_st *TVFE_Config)
TVFE_Audio_Set_HEAAC_Output	audio_api.h	/^TVFE_Audio_Status_e TVFE_Audio_Set_HEAAC_Output(int Aud_fd, TVFE_Audio_CMD_st *TVFE_Config);$/;"	p	signature:(int Aud_fd, TVFE_Audio_CMD_st *TVFE_Config)
TVFE_Audio_Set_Level_Adjust_Config	audio_api.c	/^TVFE_Audio_Status_e TVFE_Audio_Set_Level_Adjust_Config(int Aud_fd, TVFE_Audio_CMD_st *TVFE_Config)$/;"	f	signature:(int Aud_fd, TVFE_Audio_CMD_st *TVFE_Config)
TVFE_Audio_Set_Level_Adjust_Config	audio_api.h	/^TVFE_Audio_Status_e TVFE_Audio_Set_Level_Adjust_Config(int Aud_fd, TVFE_Audio_CMD_st *TVFE_Config);$/;"	p	signature:(int Aud_fd, TVFE_Audio_CMD_st *TVFE_Config)
TVFE_Audio_Set_Main_Equlizer_Config	audio_api.c	/^TVFE_Audio_Status_e TVFE_Audio_Set_Main_Equlizer_Config(int Aud_fd, TVFE_Audio_CMD_st *TVFE_Config)$/;"	f	signature:(int Aud_fd, TVFE_Audio_CMD_st *TVFE_Config)
TVFE_Audio_Set_Main_Equlizer_Config	audio_api.h	/^TVFE_Audio_Status_e TVFE_Audio_Set_Main_Equlizer_Config(int Aud_fd, TVFE_Audio_CMD_st *TVFE_Config);$/;"	p	signature:(int Aud_fd, TVFE_Audio_CMD_st *TVFE_Config)
TVFE_Audio_Set_MasterMuteStatus	audio_api.c	/^TVFE_Audio_Status_e TVFE_Audio_Set_MasterMuteStatus(int Aud_fd, TVFE_Audio_CMD_st *TVFE_Config)$/;"	f	signature:(int Aud_fd, TVFE_Audio_CMD_st *TVFE_Config)
TVFE_Audio_Set_MasterMuteStatus	audio_api.h	/^TVFE_Audio_Status_e TVFE_Audio_Set_MasterMuteStatus(int Aud_fd, TVFE_Audio_CMD_st *TVFE_Config);$/;"	p	signature:(int Aud_fd, TVFE_Audio_CMD_st *TVFE_Config)
TVFE_Audio_Set_Mute_Config	audio_api.c	/^TVFE_Audio_Status_e TVFE_Audio_Set_Mute_Config(int Aud_fd, TVFE_Audio_CMD_st *TVFE_Config)$/;"	f	signature:(int Aud_fd, TVFE_Audio_CMD_st *TVFE_Config)
TVFE_Audio_Set_Mute_Config	audio_api.h	/^TVFE_Audio_Status_e TVFE_Audio_Set_Mute_Config(int Aud_fd, TVFE_Audio_CMD_st *TVFE_Config);$/;"	p	signature:(int Aud_fd, TVFE_Audio_CMD_st *TVFE_Config)
TVFE_Audio_Set_Output_Config	audio_api.c	/^TVFE_Audio_Status_e TVFE_Audio_Set_Output_Config(int Aud_fd, TVFE_Audio_CMD_st *TVFE_Config)$/;"	f	signature:(int Aud_fd, TVFE_Audio_CMD_st *TVFE_Config)
TVFE_Audio_Set_Output_Config	audio_api.h	/^TVFE_Audio_Status_e TVFE_Audio_Set_Output_Config(int Aud_fd, TVFE_Audio_CMD_st *TVFE_Config);$/;"	p	signature:(int Aud_fd, TVFE_Audio_CMD_st *TVFE_Config)
TVFE_Audio_Set_Output_Selection	audio_api.c	/^TVFE_Audio_Status_e TVFE_Audio_Set_Output_Selection(int Aud_fd, TVFE_Audio_CMD_st *TVFE_Config)$/;"	f	signature:(int Aud_fd, TVFE_Audio_CMD_st *TVFE_Config)
TVFE_Audio_Set_Output_Selection	audio_api.h	/^TVFE_Audio_Status_e TVFE_Audio_Set_Output_Selection(int Aud_fd, TVFE_Audio_CMD_st *TVFE_Config);$/;"	p	signature:(int Aud_fd, TVFE_Audio_CMD_st *TVFE_Config)
TVFE_Audio_Set_SIFHandler	audio_api.c	/^TVFE_Audio_Status_e TVFE_Audio_Set_SIFHandler(int Aud_fd, TVFE_Audio_CMD_st *TVFE_Config)$/;"	f	signature:(int Aud_fd, TVFE_Audio_CMD_st *TVFE_Config)
TVFE_Audio_Set_SIF_Detect_Config	audio_api.c	/^TVFE_Audio_Status_e TVFE_Audio_Set_SIF_Detect_Config(int Aud_fd, TVFE_Audio_CMD_st *TVFE_Config)$/;"	f	signature:(int Aud_fd, TVFE_Audio_CMD_st *TVFE_Config)
TVFE_Audio_Set_SIF_Detect_Config	audio_api.h	/^TVFE_Audio_Status_e TVFE_Audio_Set_SIF_Detect_Config(int Aud_fd, TVFE_Audio_CMD_st *TVFE_Config);$/;"	p	signature:(int Aud_fd, TVFE_Audio_CMD_st *TVFE_Config)
TVFE_Audio_Set_SIF_Over_Modulation_Config	audio_api.c	/^TVFE_Audio_Status_e TVFE_Audio_Set_SIF_Over_Modulation_Config(int Aud_fd, TVFE_Audio_CMD_st *TVFE_Config)$/;"	f	signature:(int Aud_fd, TVFE_Audio_CMD_st *TVFE_Config)
TVFE_Audio_Set_SIF_Over_Modulation_Config	audio_api.h	/^TVFE_Audio_Status_e TVFE_Audio_Set_SIF_Over_Modulation_Config(int Aud_fd, TVFE_Audio_CMD_st *TVFE_Config);$/;"	p	signature:(int Aud_fd, TVFE_Audio_CMD_st *TVFE_Config)
TVFE_Audio_Set_SUNSUR_Config	audio_api.c	/^TVFE_Audio_Status_e TVFE_Audio_Set_SUNSUR_Config(int Aud_fd, TVFE_Audio_CMD_st *TVFE_Config)$/;"	f	signature:(int Aud_fd, TVFE_Audio_CMD_st *TVFE_Config)
TVFE_Audio_Set_SUNSUR_Config	audio_api.h	/^TVFE_Audio_Status_e TVFE_Audio_Set_SUNSUR_Config(int Aud_fd, TVFE_Audio_CMD_st *TVFE_Config);$/;"	p	signature:(int Aud_fd, TVFE_Audio_CMD_st *TVFE_Config)
TVFE_Audio_Set_Sound_Source	audio_api.c	/^TVFE_Audio_Status_e TVFE_Audio_Set_Sound_Source(int Aud_fd, TVFE_Audio_CMD_st *TVFE_Config)$/;"	f	signature:(int Aud_fd, TVFE_Audio_CMD_st *TVFE_Config)
TVFE_Audio_Set_SourceType	audio_api.c	/^TVFE_Audio_Status_e TVFE_Audio_Set_SourceType(int Aud_fd, TVFE_Audio_CMD_st *TVFE_Config)$/;"	f	signature:(int Aud_fd, TVFE_Audio_CMD_st *TVFE_Config)
TVFE_Audio_Set_SourceType	audio_api.h	/^TVFE_Audio_Status_e TVFE_Audio_Set_SourceType(int Aud_fd, TVFE_Audio_CMD_st *TVFE_Config);$/;"	p	signature:(int Aud_fd, TVFE_Audio_CMD_st *TVFE_Config)
TVFE_Audio_Set_Spdif_ChannelStatus	audio_api.c	/^TVFE_Audio_Status_e TVFE_Audio_Set_Spdif_ChannelStatus(int Aud_fd, TVFE_Audio_CMD_st *TVFE_Config)$/;"	f	signature:(int Aud_fd, TVFE_Audio_CMD_st *TVFE_Config)
TVFE_Audio_Set_Spdif_ChannelStatus	audio_api.h	/^TVFE_Audio_Status_e TVFE_Audio_Set_Spdif_ChannelStatus(int Aud_fd, TVFE_Audio_CMD_st *TVFE_Config);$/;"	p	signature:(int Aud_fd, TVFE_Audio_CMD_st *TVFE_Config)
TVFE_Audio_Set_Treble	audio_api.c	/^TVFE_Audio_Status_e TVFE_Audio_Set_Treble(int Aud_fd, TVFE_Audio_CMD_st *TVFE_Config)$/;"	f	signature:(int Aud_fd, TVFE_Audio_CMD_st *TVFE_Config)
TVFE_Audio_Set_Treble	audio_api.h	/^TVFE_Audio_Status_e TVFE_Audio_Set_Treble(int Aud_fd, TVFE_Audio_CMD_st *TVFE_Config);$/;"	p	signature:(int Aud_fd, TVFE_Audio_CMD_st *TVFE_Config)
TVFE_Audio_Set_Volume	audio_api.c	/^TVFE_Audio_Status_e TVFE_Audio_Set_Volume(int Aud_fd, TVFE_Audio_CMD_st *TVFE_Config)$/;"	f	signature:(int Aud_fd, TVFE_Audio_CMD_st *TVFE_Config)
TVFE_Audio_Set_Volume	audio_api.h	/^TVFE_Audio_Status_e TVFE_Audio_Set_Volume(int Aud_fd, TVFE_Audio_CMD_st *TVFE_Config);$/;"	p	signature:(int Aud_fd, TVFE_Audio_CMD_st *TVFE_Config)
TVFE_Audio_Status_e	tvfe_audio.h	/^} TVFE_Audio_Status_e;$/;"	t	typeref:enum:_TVFE_Audio_Status_e
TVFE_Audio_WAVE_FORMAT_DOLBY_AC3	tvfe_audio.h	/^	TVFE_Audio_WAVE_FORMAT_DOLBY_AC3,$/;"	e	enum:_TVFE_Audio_WAVE_FORMAT_e
TVFE_Audio_WAVE_FORMAT_DOLBY_DIGITAL_PLUS	tvfe_audio.h	/^	TVFE_Audio_WAVE_FORMAT_DOLBY_DIGITAL_PLUS,$/;"	e	enum:_TVFE_Audio_WAVE_FORMAT_e
TVFE_Audio_WAVE_FORMAT_DOLBY_NA	tvfe_audio.h	/^	TVFE_Audio_WAVE_FORMAT_DOLBY_NA,$/;"	e	enum:_TVFE_Audio_WAVE_FORMAT_e
TVFE_Audio_WAVE_FORMAT_e	tvfe_audio.h	/^} TVFE_Audio_WAVE_FORMAT_e;$/;"	t	typeref:enum:_TVFE_Audio_WAVE_FORMAT_e
TVFE_AutoTuneState_e	tvfe_api.h	/^} TVFE_AutoTuneState_e;$/;"	t	typeref:enum:__anon78
TVFE_BOOL	tvfe_audio.h	/^typedef unsigned char       TVFE_BOOL;$/;"	t
TVFE_BYPASS_MODE	tvfe_api.h	/^	TVFE_BYPASS_MODE,$/;"	e	enum:__anon75
TVFE_ByPassmode_e	tvfe_api.h	/^} TVFE_ByPassmode_e;$/;"	t	typeref:enum:__anon75
TVFE_CCIR656	tvfe_api.h	/^	TVFE_CCIR656,$/;"	e	enum:__anon74
TVFE_CHANNEL1	tvfe_api.h	/^	TVFE_CHANNEL1,$/;"	e	enum:__anon57
TVFE_CHANNEL2	tvfe_api.h	/^	TVFE_CHANNEL2,$/;"	e	enum:__anon57
TVFE_CUSTOMER_HDMI_PC_TIMING	tvfe_api.h	/^	TVFE_CUSTOMER_HDMI_PC_TIMING,$/;"	e	enum:__anon72
TVFE_CUSTOMER_HDMI_PC_TIMING_TABLE	tvfe_api.h	/^	TVFE_CUSTOMER_HDMI_PC_TIMING_TABLE,$/;"	e	enum:__anon95
TVFE_CUSTOMER_HDMI_VIDEO_TIMING	tvfe_api.h	/^	TVFE_CUSTOMER_HDMI_VIDEO_TIMING,$/;"	e	enum:__anon72
TVFE_CUSTOMER_HDMI_VIDEO_TIMING_TABLE	tvfe_api.h	/^	TVFE_CUSTOMER_HDMI_VIDEO_TIMING_TABLE	= 0,$/;"	e	enum:__anon95
TVFE_CUSTOMER_HDTV_TIMING	tvfe_api.h	/^	TVFE_CUSTOMER_HDTV_TIMING,$/;"	e	enum:__anon72
TVFE_CUSTOMER_PC_TIMING	tvfe_api.h	/^	TVFE_CUSTOMER_PC_TIMING,$/;"	e	enum:__anon72
TVFE_CheckState_e	tvfe_api.h	/^} TVFE_CheckState_e;$/;"	t	typeref:enum:__anon73
TVFE_DEVICE_MAX	tvfe_api.h	/^	TVFE_DEVICE_MAX,$/;"	e	enum:__anon74
TVFE_Device_e	tvfe_api.h	/^} TVFE_Device_e;$/;"	t	typeref:enum:__anon74
TVFE_ERR_BUFFER_UNDERFLOW	tvfe_api.h	/^   TVFE_ERR_BUFFER_UNDERFLOW,	\/* not enough stream data is available to decode the next video frame *\/$/;"	e	enum:__anon56
TVFE_ERR_FAILURE	tvfe_api.h	/^   TVFE_ERR_FAILURE,$/;"	e	enum:__anon56
TVFE_ERR_INVALID_OP	tvfe_api.h	/^   TVFE_ERR_INVALID_OP,	\/* requested operation is invalid *\/$/;"	e	enum:__anon56
TVFE_ERR_INVALID_PARAM	tvfe_api.h	/^   TVFE_ERR_INVALID_PARAM,	\/* invalid parameter *\/$/;"	e	enum:__anon56
TVFE_ERR_MEMORY_ALLOC	tvfe_api.h	/^   TVFE_ERR_MEMORY_ALLOC,	\/* problem allocating memory *\/$/;"	e	enum:__anon56
TVFE_ERR_RESOURCE_UNAVAILABLE	tvfe_api.h	/^   TVFE_ERR_RESOURCE_UNAVAILABLE,	\/* hardware resource is in use or otherwise unavailable *\/$/;"	e	enum:__anon56
TVFE_EVENT_CH1_AVAILABLE_SIGNAL	tvfe_api.h	/^	TVFE_EVENT_CH1_AVAILABLE_SIGNAL,$/;"	e	enum:__anon67
TVFE_EVENT_CH1_DEBOUNCING_SIGNAL	tvfe_api.h	/^	TVFE_EVENT_CH1_DEBOUNCING_SIGNAL,$/;"	e	enum:__anon67
TVFE_EVENT_CH1_FSM_INITIAL_COMPLETE	tvfe_api.h	/^	TVFE_EVENT_CH1_FSM_INITIAL_COMPLETE,$/;"	e	enum:__anon67
TVFE_EVENT_CH1_FSM_STOP	tvfe_api.h	/^	TVFE_EVENT_CH1_FSM_STOP,$/;"	e	enum:__anon67
TVFE_EVENT_CH1_HDCP_PROTECT	tvfe_api.h	/^	TVFE_EVENT_CH1_HDCP_PROTECT,$/;"	e	enum:__anon67
TVFE_EVENT_CH1_HDCP_UNPROTECT	tvfe_api.h	/^	TVFE_EVENT_CH1_HDCP_UNPROTECT,$/;"	e	enum:__anon67
TVFE_EVENT_CH1_HDMI_DVI_MODE	tvfe_api.h	/^	TVFE_EVENT_CH1_HDMI_DVI_MODE,$/;"	e	enum:__anon67
TVFE_EVENT_CH1_HDMI_HDMI_MODE	tvfe_api.h	/^	TVFE_EVENT_CH1_HDMI_HDMI_MODE,$/;"	e	enum:__anon67
TVFE_EVENT_CH1_NO_SIGNAL	tvfe_api.h	/^	TVFE_EVENT_CH1_NO_SIGNAL,$/;"	e	enum:__anon67
TVFE_EVENT_CH1_PC_AUTO_TUNE	tvfe_api.h	/^	TVFE_EVENT_CH1_PC_AUTO_TUNE,$/;"	e	enum:__anon67
TVFE_EVENT_CH1_PC_AUTO_TUNE_COMPLETE	tvfe_api.h	/^	TVFE_EVENT_CH1_PC_AUTO_TUNE_COMPLETE,$/;"	e	enum:__anon67
TVFE_EVENT_CH1_SCART_CVBS	tvfe_api.h	/^	TVFE_EVENT_CH1_SCART_CVBS,$/;"	e	enum:__anon67
TVFE_EVENT_CH1_SCART_RGB	tvfe_api.h	/^	TVFE_EVENT_CH1_SCART_RGB,$/;"	e	enum:__anon67
TVFE_EVENT_CH1_UNSUPPORT_MODE	tvfe_api.h	/^	TVFE_EVENT_CH1_UNSUPPORT_MODE,$/;"	e	enum:__anon67
TVFE_EVENT_MAX	tvfe_api.h	/^	TVFE_EVENT_MAX,$/;"	e	enum:__anon67
TVFE_Event_e	tvfe_api.h	/^} TVFE_Event_e;$/;"	t	typeref:enum:__anon67
TVFE_FALSE	tvfe_audio.h	7;"	d
TVFE_FRAME_BUFFER_MODE	tvfe_api.h	/^	TVFE_FRAME_BUFFER_MODE = 0,$/;"	e	enum:__anon75
TVFE_GetSIFWorkingMode	audio_api.c	/^TVFE_Audio_Status_e TVFE_GetSIFWorkingMode(int Aud_fd, TVFE_Audio_CMD_st *TVFE_Config)$/;"	f	signature:(int Aud_fd, TVFE_Audio_CMD_st *TVFE_Config)
TVFE_GetSifAvailableMode	audio_api.c	/^TVFE_Audio_Status_e TVFE_GetSifAvailableMode(int Aud_fd, TVFE_Audio_CMD_st *TVFE_Config)$/;"	f	signature:(int Aud_fd, TVFE_Audio_CMD_st *TVFE_Config)
TVFE_GetTunerValueType	audio_api.c	/^TVFE_Audio_Status_e TVFE_GetTunerValueType(int Aud_fd, TVFE_Audio_CMD_st *TVFE_Config)$/;"	f	signature:(int Aud_fd, TVFE_Audio_CMD_st *TVFE_Config)
TVFE_HDMI	tvfe_api.h	/^	TVFE_HDMI,$/;"	e	enum:__anon74
TVFE_HDMICallBack_st	tvfe_api.h	/^} TVFE_HDMICallBack_st;$/;"	t	typeref:struct:__anon110
TVFE_HDMIHPDHigh	tvfe_api.h	/^	TVFE_HDMIHPDHigh,$/;"	e	enum:__anon63
TVFE_HDMIHPDLow	tvfe_api.h	/^	TVFE_HDMIHPDLow,$/;"	e	enum:__anon63
TVFE_HDMIHPD_e	tvfe_api.h	/^} TVFE_HDMIHPD_e;$/;"	t	typeref:enum:__anon63
TVFE_HDMITimingTable_e	tvfe_api.h	/^} TVFE_HDMITimingTable_e;$/;"	t	typeref:enum:__anon95
TVFE_HDMI_Color_Space_Auto	tvfe_api.h	/^	TVFE_HDMI_Color_Space_Auto = 0,$/;"	e	enum:__anon98
TVFE_HDMI_Color_Space_YUV422	tvfe_api.h	/^	TVFE_HDMI_Color_Space_YUV422,$/;"	e	enum:__anon98
TVFE_HDMI_Color_Space_YUV444	tvfe_api.h	/^	TVFE_HDMI_Color_Space_YUV444,$/;"	e	enum:__anon98
TVFE_HDMI_Color_Space_t	tvfe_api.h	/^} TVFE_HDMI_Color_Space_t;$/;"	t	typeref:enum:__anon98
TVFE_HDMI_PC_TIMING	tvfe_api.h	/^	TVFE_HDMI_PC_TIMING,$/;"	e	enum:__anon72
TVFE_HDMI_PC_TIMING_TABLE	tvfe_api.h	/^	TVFE_HDMI_PC_TIMING_TABLE,$/;"	e	enum:__anon95
TVFE_HDMI_TIMING_TABLE_MAX	tvfe_api.h	/^	TVFE_HDMI_TIMING_TABLE_MAX,$/;"	e	enum:__anon95
TVFE_HDMI_VIDEO_TIMING	tvfe_api.h	/^	TVFE_HDMI_VIDEO_TIMING,$/;"	e	enum:__anon72
TVFE_HDMI_VIDEO_TIMING_TABLE	tvfe_api.h	/^	TVFE_HDMI_VIDEO_TIMING_TABLE,$/;"	e	enum:__anon95
TVFE_HDTV_TIMING	tvfe_api.h	/^	TVFE_HDTV_TIMING,$/;"	e	enum:__anon72
TVFE_MODE_MAX	tvfe_api.h	/^	TVFE_MODE_MAX,$/;"	e	enum:__anon75
TVFE_MPEG	tvfe_api.h	/^	TVFE_MPEG,$/;"	e	enum:__anon74
TVFE_MPEG_ASPECT_RATIO_16_9	tvfe_api.h	/^	TVFE_MPEG_ASPECT_RATIO_16_9,$/;"	e	enum:__anon61
TVFE_MPEG_ASPECT_RATIO_4_3	tvfe_api.h	/^	TVFE_MPEG_ASPECT_RATIO_4_3,$/;"	e	enum:__anon61
TVFE_MPEG_ASPECT_RATIO_SQUARE	tvfe_api.h	/^	TVFE_MPEG_ASPECT_RATIO_SQUARE,$/;"	e	enum:__anon61
TVFE_MPEG_FRAME_RATIO_23	tvfe_api.h	/^	TVFE_MPEG_FRAME_RATIO_23,$/;"	e	enum:__anon62
TVFE_MPEG_FRAME_RATIO_24	tvfe_api.h	/^	TVFE_MPEG_FRAME_RATIO_24,$/;"	e	enum:__anon62
TVFE_MPEG_FRAME_RATIO_29	tvfe_api.h	/^	TVFE_MPEG_FRAME_RATIO_29,$/;"	e	enum:__anon62
TVFE_MPEG_FRAME_RATIO_30	tvfe_api.h	/^	TVFE_MPEG_FRAME_RATIO_30,$/;"	e	enum:__anon62
TVFE_MPEG_FRAME_RATIO_59	tvfe_api.h	/^	TVFE_MPEG_FRAME_RATIO_59,$/;"	e	enum:__anon62
TVFE_MPEG_FRAME_RATIO_60	tvfe_api.h	/^	TVFE_MPEG_FRAME_RATIO_60,$/;"	e	enum:__anon62
TVFE_MPEG_TIMING	tvfe_api.h	/^	TVFE_MPEG_TIMING,$/;"	e	enum:__anon72
TVFE_MpegAspectRatio_e	tvfe_api.h	/^} TVFE_MpegAspectRatio_e;$/;"	t	typeref:enum:__anon61
TVFE_MpegFrameRatio_e	tvfe_api.h	/^} TVFE_MpegFrameRatio_e;$/;"	t	typeref:enum:__anon62
TVFE_Mute_Flag_st	tvfe_api.h	/^} TVFE_Mute_Flag_st;$/;"	t	typeref:struct:__anon118
TVFE_NO_AVAILABLE_TIMING_INDEX	tvfe_api.h	24;"	d
TVFE_Operation	dsp_ioctl.h	/^typedef struct TVFE_Operation$/;"	s
TVFE_Operation_st	dsp_ioctl.h	/^}TVFE_Operation_st;$/;"	t	typeref:struct:TVFE_Operation
TVFE_PCAutoTuneCommand_e	tvfe_api.h	/^} TVFE_PCAutoTuneCommand_e;$/;"	t	typeref:enum:__anon59
TVFE_PCAutoTuneStatus_e	tvfe_api.h	/^} TVFE_PCAutoTuneStatus_e;$/;"	t	typeref:enum:__anon60
TVFE_PC_Customer_Parameter_t	tvfe_api.h	/^} TVFE_PC_Customer_Parameter_t;$/;"	t	typeref:struct:__anon119
TVFE_PC_TIMING	tvfe_api.h	/^	TVFE_PC_TIMING,$/;"	e	enum:__anon72
TVFE_SIF_SetCurrentMode	audio_api.c	/^TVFE_Audio_Status_e TVFE_SIF_SetCurrentMode(int Aud_fd, TVFE_Audio_CMD_st *TVFE_Config)$/;"	f	signature:(int Aud_fd, TVFE_Audio_CMD_st *TVFE_Config)
TVFE_SIGNAL_LOCK	tvfe_api.h	/^	TVFE_SIGNAL_LOCK,$/;"	e	enum:__anon71
TVFE_SIGNAL_UNKNOWN	tvfe_api.h	/^	TVFE_SIGNAL_UNKNOWN = 0,$/;"	e	enum:__anon71
TVFE_SIGNAL_UNLOCK	tvfe_api.h	/^	TVFE_SIGNAL_UNLOCK,$/;"	e	enum:__anon71
TVFE_SOUND_STANDARD_AUTO	tvfe_api.h	/^	TVFE_SOUND_STANDARD_AUTO,$/;"	e	enum:__anon94
TVFE_SOUND_STANDARD_BG	tvfe_api.h	/^	TVFE_SOUND_STANDARD_BG,$/;"	e	enum:__anon94
TVFE_SOUND_STANDARD_DK	tvfe_api.h	/^	TVFE_SOUND_STANDARD_DK,$/;"	e	enum:__anon94
TVFE_SOUND_STANDARD_I	tvfe_api.h	/^	TVFE_SOUND_STANDARD_I,$/;"	e	enum:__anon94
TVFE_SOUND_STANDARD_L	tvfe_api.h	/^	TVFE_SOUND_STANDARD_L,$/;"	e	enum:__anon94
TVFE_SOUND_STANDARD_L1	tvfe_api.h	/^	TVFE_SOUND_STANDARD_L1,$/;"	e	enum:__anon94
TVFE_SOUND_STANDARD_MAX	tvfe_api.h	/^	TVFE_SOUND_STANDARD_MAX,$/;"	e	enum:__anon94
TVFE_SUCCESS	tvfe_api.h	/^   TVFE_SUCCESS,	\/* successful outcome *\/$/;"	e	enum:__anon56
TVFE_SamplingMode_e	tvfe_api.h	/^} TVFE_SamplingMode_e;$/;"	t	typeref:enum:__anon86
TVFE_SetSifAvailableMode	audio_api.c	/^TVFE_Audio_Status_e TVFE_SetSifAvailableMode(int Aud_fd, TVFE_Audio_CMD_st *TVFE_Config)$/;"	f	signature:(int Aud_fd, TVFE_Audio_CMD_st *TVFE_Config)
TVFE_SetTunerValueType	audio_api.c	/^TVFE_Audio_Status_e TVFE_SetTunerValueType(int Aud_fd, TVFE_Audio_CMD_st *TVFE_Config)$/;"	f	signature:(int Aud_fd, TVFE_Audio_CMD_st *TVFE_Config)
TVFE_SignalLock_e	tvfe_api.h	/^} TVFE_SignalLock_e;$/;"	t	typeref:enum:__anon71
TVFE_SoundStd_e	tvfe_api.h	/^} TVFE_SoundStd_e;$/;"	t	typeref:enum:__anon94
TVFE_SrcChannel_e	tvfe_api.h	/^} TVFE_SrcChannel_e;$/;"	t	typeref:enum:__anon57
TVFE_Status_e	tvfe_api.h	/^} TVFE_Status_e;$/;"	t	typeref:enum:__anon56
TVFE_TIMING_MAX	tvfe_api.h	/^	TVFE_TIMING_MAX,$/;"	e	enum:__anon72
TVFE_TRUE	tvfe_audio.h	6;"	d
TVFE_TVDEC_AUTO_DETECT_ALL	tvfe_api.h	/^	TVFE_TVDEC_AUTO_DETECT_ALL		= 0x80, \/* 0x01 << 0x07 *\/$/;"	e	enum:__anon65
TVFE_TVDEC_AUTO_DETECT_NTSC	tvfe_api.h	/^	TVFE_TVDEC_AUTO_DETECT_NTSC		= 0x20, \/* 0x01 << 0x05 *\/$/;"	e	enum:__anon65
TVFE_TVDEC_AUTO_DETECT_NTSC443	tvfe_api.h	/^	TVFE_TVDEC_AUTO_DETECT_NTSC443	= 0x08, \/* 0x01 << 0x03 *\/$/;"	e	enum:__anon65
TVFE_TVDEC_AUTO_DETECT_PAL60	tvfe_api.h	/^	TVFE_TVDEC_AUTO_DETECT_PAL60	= 0x10, \/* 0x01 << 0x04 *\/$/;"	e	enum:__anon65
TVFE_TVDEC_AUTO_DETECT_PALCN	tvfe_api.h	/^	TVFE_TVDEC_AUTO_DETECT_PALCN	= 0x02, \/* 0x01 << 0x01 *\/$/;"	e	enum:__anon65
TVFE_TVDEC_AUTO_DETECT_PALI	tvfe_api.h	/^	TVFE_TVDEC_AUTO_DETECT_PALI		= 0x40, \/* 0x01 << 0x06 *\/$/;"	e	enum:__anon65
TVFE_TVDEC_AUTO_DETECT_PALM	tvfe_api.h	/^	TVFE_TVDEC_AUTO_DETECT_PALM		= 0x01, \/* 0x01 << 0x00 *\/$/;"	e	enum:__anon65
TVFE_TVDEC_AUTO_DETECT_SECAM	tvfe_api.h	/^	TVFE_TVDEC_AUTO_DETECT_SECAM	= 0x04, \/* 0x01 << 0x02 *\/$/;"	e	enum:__anon65
TVFE_TVDEC_TIMING	tvfe_api.h	/^	TVFE_TVDEC_TIMING,$/;"	e	enum:__anon72
TVFE_TV_DECODER	tvfe_api.h	/^	TVFE_TV_DECODER,$/;"	e	enum:__anon74
TVFE_TvDecAutoDetectMask_e	tvfe_api.h	/^} TVFE_TvDecAutoDetectMask_e;$/;"	t	typeref:enum:__anon65
TVFE_TvDecBurstType_t	tvfe_api.h	/^} TVFE_TvDecBurstType_t;$/;"	t	typeref:enum:__anon70
TVFE_TvDecFORMAT_BW_525	tvfe_api.h	/^	TVFE_TvDecFORMAT_BW_525,$/;"	e	enum:__anon64
TVFE_TvDecFORMAT_BW_625	tvfe_api.h	/^	TVFE_TvDecFORMAT_BW_625,$/;"	e	enum:__anon64
TVFE_TvDecFORMAT_NTSC	tvfe_api.h	/^	TVFE_TvDecFORMAT_NTSC = 0,$/;"	e	enum:__anon64
TVFE_TvDecFORMAT_NTSC_443	tvfe_api.h	/^	TVFE_TvDecFORMAT_NTSC_443,$/;"	e	enum:__anon64
TVFE_TvDecFORMAT_PAL	tvfe_api.h	/^	TVFE_TvDecFORMAT_PAL,$/;"	e	enum:__anon64
TVFE_TvDecFORMAT_PAL_60	tvfe_api.h	/^	TVFE_TvDecFORMAT_PAL_60,$/;"	e	enum:__anon64
TVFE_TvDecFORMAT_PAL_M	tvfe_api.h	/^	TVFE_TvDecFORMAT_PAL_M,$/;"	e	enum:__anon64
TVFE_TvDecFORMAT_PAL_N	tvfe_api.h	/^	TVFE_TvDecFORMAT_PAL_N,$/;"	e	enum:__anon64
TVFE_TvDecFORMAT_SECAM	tvfe_api.h	/^	TVFE_TvDecFORMAT_SECAM,$/;"	e	enum:__anon64
TVFE_TvDecFORMAT_UNKNOW	tvfe_api.h	/^	TVFE_TvDecFORMAT_UNKNOW,$/;"	e	enum:__anon64
TVFE_TvDecForceScartType_t	tvfe_api.h	/^} TVFE_TvDecForceScartType_t;$/;"	t	typeref:enum:__anon69
TVFE_TvDecFormatType_e	tvfe_api.h	/^} TVFE_TvDecFormatType_e;$/;"	t	typeref:enum:__anon64
TVFE_TvDecScartInputType_e	tvfe_api.h	/^} TVFE_TvDecScartInputType_e;$/;"	t	typeref:enum:__anon68
TVFE_TvDec_AudioM	tvfe_api.h	/^	TVFE_TvDec_AudioM = 0,$/;"	e	enum:__anon70
TVFE_TvDec_Colorburst	tvfe_api.h	/^   	TVFE_TvDec_Colorburst$/;"	e	enum:__anon70
TVFE_TvDec_SCART_AutoMode	tvfe_api.h	/^	TVFE_TvDec_SCART_AutoMode= 0,$/;"	e	enum:__anon69
TVFE_TvDec_SCART_CVBS	tvfe_api.h	/^	TVFE_TvDec_SCART_CVBS = 0,$/;"	e	enum:__anon68
TVFE_TvDec_SCART_Force_CVBS	tvfe_api.h	/^	TVFE_TvDec_SCART_Force_CVBS,$/;"	e	enum:__anon69
TVFE_TvDec_SCART_Force_RGB	tvfe_api.h	/^	TVFE_TvDec_SCART_Force_RGB,$/;"	e	enum:__anon69
TVFE_TvDec_SCART_Force_SV	tvfe_api.h	/^	TVFE_TvDec_SCART_Force_SV$/;"	e	enum:__anon69
TVFE_TvDec_SCART_MIX	tvfe_api.h	/^	TVFE_TvDec_SCART_MIX,$/;"	e	enum:__anon68
TVFE_TvDec_SCART_RGB	tvfe_api.h	/^	TVFE_TvDec_SCART_RGB,$/;"	e	enum:__anon68
TVFE_TvDec_SCART_SV	tvfe_api.h	/^	TVFE_TvDec_SCART_SV,$/;"	e	enum:__anon68
TVFE_VIDEO_AUTOMUTE_ON_BLACK	tvfe_api.h	/^	TVFE_VIDEO_AUTOMUTE_ON_BLACK,$/;"	e	enum:__anon96
TVFE_VIDEO_MUTE_ON_BLACK	tvfe_api.h	/^	TVFE_VIDEO_MUTE_ON_BLACK,$/;"	e	enum:__anon96
TVFE_VIDEO_MUTE_ON_USER_DEFINED_COLOR	tvfe_api.h	/^	TVFE_VIDEO_MUTE_ON_USER_DEFINED_COLOR,$/;"	e	enum:__anon96
TVFE_VIDEO_UNMUTE	tvfe_api.h	/^	TVFE_VIDEO_UNMUTE,$/;"	e	enum:__anon96
TVFE_VideoMuteStatus_e	tvfe_api.h	/^} TVFE_VideoMuteStatus_e;$/;"	t	typeref:enum:__anon96
TVFE_VideoTiming_e	tvfe_api.h	/^} TVFE_VideoTiming_e;$/;"	t	typeref:enum:__anon72
TVFE_WARN_BUFFER_EMPTY	tvfe_api.h	/^   TVFE_WARN_BUFFER_EMPTY,	\/* buffer became empty before the requested amount of data could be read *\/$/;"	e	enum:__anon56
TVFE_WARN_BUFFER_FULL	tvfe_api.h	/^   TVFE_WARN_BUFFER_FULL,	\/* buffer became full before the requested amount of data could be written *\/$/;"	e	enum:__anon56
TVFE_WARN_NO_ACTION	tvfe_api.h	/^   TVFE_WARN_NO_ACTION,	\/* the function completed successfully, but no action was taken *\/$/;"	e	enum:__anon56
TVFE_WARN_PARAM_CLIPPED	tvfe_api.h	/^   TVFE_WARN_PARAM_CLIPPED,	\/* the function completed successfully, though a parameter was clipped to within a valid range.*\/$/;"	e	enum:__anon56
TVFE_YPBPR_AUTOSOG_0x02	tvfe_api.h	/^	TVFE_YPBPR_AUTOSOG_0x02,$/;"	e	enum:__anon76
TVFE_YPBPR_AUTOSOG_0x02_Debounce	tvfe_api.h	/^	TVFE_YPBPR_AUTOSOG_0x02_Debounce,$/;"	e	enum:__anon76
TVFE_YPBPR_AUTOSOG_0x04	tvfe_api.h	/^	TVFE_YPBPR_AUTOSOG_0x04,$/;"	e	enum:__anon76
TVFE_YPBPR_AUTOSOG_0x04_Debounce	tvfe_api.h	/^	TVFE_YPBPR_AUTOSOG_0x04_Debounce,$/;"	e	enum:__anon76
TVFE_YPBPR_AUTOSOG_0x08	tvfe_api.h	/^	TVFE_YPBPR_AUTOSOG_0x08,$/;"	e	enum:__anon76
TVFE_YPBPR_AUTOSOG_0x08_Debounce	tvfe_api.h	/^	TVFE_YPBPR_AUTOSOG_0x08_Debounce,$/;"	e	enum:__anon76
TVFE_YPBPR_AUTOSOG_0x10	tvfe_api.h	/^	TVFE_YPBPR_AUTOSOG_0x10,$/;"	e	enum:__anon76
TVFE_YPBPR_AUTOSOG_0x10_Debounce	tvfe_api.h	/^	TVFE_YPBPR_AUTOSOG_0x10_Debounce,$/;"	e	enum:__anon76
TVFE_YPBPR_AUTOSOG_BoundaryDetect_Error	tvfe_api.h	/^    TVFE_YPBPR_AUTOSOG_BoundaryDetect_Error,$/;"	e	enum:__anon77
TVFE_YPBPR_AUTOSOG_BoundaryDetect_FineTune0	tvfe_api.h	/^    TVFE_YPBPR_AUTOSOG_BoundaryDetect_FineTune0,$/;"	e	enum:__anon77
TVFE_YPBPR_AUTOSOG_BoundaryDetect_FineTune1	tvfe_api.h	/^    TVFE_YPBPR_AUTOSOG_BoundaryDetect_FineTune1,$/;"	e	enum:__anon77
TVFE_YPBPR_AUTOSOG_BoundaryDetect_FineTune2	tvfe_api.h	/^    TVFE_YPBPR_AUTOSOG_BoundaryDetect_FineTune2,$/;"	e	enum:__anon77
TVFE_YPBPR_AUTOSOG_BoundaryDetect_Finish	tvfe_api.h	/^    TVFE_YPBPR_AUTOSOG_BoundaryDetect_Finish$/;"	e	enum:__anon77
TVFE_YPBPR_AUTOSOG_BoundaryDetect_Idle	tvfe_api.h	/^    TVFE_YPBPR_AUTOSOG_BoundaryDetect_Idle,$/;"	e	enum:__anon77
TVFE_YPBPR_AUTOSOG_BoundaryDetect_Start	tvfe_api.h	/^    TVFE_YPBPR_AUTOSOG_BoundaryDetect_Start,$/;"	e	enum:__anon77
TVFE_YPBPR_AUTOSOG_Error	tvfe_api.h	/^	TVFE_YPBPR_AUTOSOG_Error,$/;"	e	enum:__anon76
TVFE_YPBPR_AUTOSOG_Finish	tvfe_api.h	/^	TVFE_YPBPR_AUTOSOG_Finish$/;"	e	enum:__anon76
TVFE_YPBPR_AUTOSOG_Idle	tvfe_api.h	/^	TVFE_YPBPR_AUTOSOG_Idle,$/;"	e	enum:__anon76
TVFE_YPBPR_AUTOSOG_Roughly	tvfe_api.h	/^	TVFE_YPBPR_AUTOSOG_Roughly,$/;"	e	enum:__anon76
TVFE_YPBPR_AUTOSOG_Roughly_Debounce	tvfe_api.h	/^	TVFE_YPBPR_AUTOSOG_Roughly_Debounce,$/;"	e	enum:__anon76
TVFE_YPBPR_AUTOSOG_Start	tvfe_api.h	/^	TVFE_YPBPR_AUTOSOG_Start,$/;"	e	enum:__anon76
TVFE_YPBPR_AUTO_PHASE_COMPLETE	tvfe_api.h	/^	TVFE_YPBPR_AUTO_PHASE_COMPLETE,$/;"	e	enum:__anon79
TVFE_YPBPR_AUTO_PHASE_NOT_YPBPR	tvfe_api.h	/^	TVFE_YPBPR_AUTO_PHASE_NOT_YPBPR,$/;"	e	enum:__anon79
TVFE_YPBPR_AUTO_PHASE_RUNNING	tvfe_api.h	/^	TVFE_YPBPR_AUTO_PHASE_RUNNING = 0,$/;"	e	enum:__anon79
TVFE_YPbPrAutoPhaseStatus_e	tvfe_api.h	/^} TVFE_YPbPrAutoPhaseStatus_e;$/;"	t	typeref:enum:__anon79
TVFE_YPbPr_AutoSOGBoundaryDetectState_e	tvfe_api.h	/^} TVFE_YPbPr_AutoSOGBoundaryDetectState_e;$/;"	t	typeref:enum:__anon77
TVFE_YPbPr_AutoSOGState_e	tvfe_api.h	/^} TVFE_YPbPr_AutoSOGState_e;$/;"	t	typeref:enum:__anon76
TXTBLK	colortext.h	2;"	d
TXTBLU	colortext.h	6;"	d
TXTCYN	colortext.h	8;"	d
TXTGRN	colortext.h	4;"	d
TXTPUR	colortext.h	7;"	d
TXTRED	colortext.h	3;"	d
TXTRST	colortext.h	34;"	d
TXTWHT	colortext.h	9;"	d
TXTYLW	colortext.h	5;"	d
Table	dsp_ioctl.h	/^		INT16 Table[128];$/;"	m	struct:TVFE_Audio_CMD::__anon26
Table	dsp_ioctl.h	/^		INT8 Table[128];$/;"	m	struct:TVFE_Audio_CMD::__anon27
Table	dsp_ioctl.h	/^		INT8 Table[128];$/;"	m	struct:TVFE_Audio_CMD::__anon28
Table	dsp_ioctl.h	/^		INT8 Table[128];$/;"	m	struct:TVFE_Audio_CMD::__anon31
Table	dsp_ioctl.h	/^		TVFE_Audio_Equalizer_Config_t Table;$/;"	m	struct:TVFE_Audio_CMD::__anon29
Target	audio_api.c	/^	APP_PCB_Audio_OutputTarget_t Target;$/;"	m	struct:_APP_PCB_AudioOutputConfig_t	file:
TestArray	dsp_ioctl.c	/^unsigned char TestArray[] = {0,1,2,3,4,5,7,8,9,10,11,12,13,14,15,16,17,18,19,$/;"	v
TotalPacketSize	playback.c	/^int64_t			TotalPacketSize = 0;$/;"	v
Treble	audio_api.c	/^    UINT8 Treble;$/;"	m	struct:_APP_AudioSoundModeSetting_t	file:
TunerSoundStd	dsp_ioctl.h	/^	}TunerSoundStd;$/;"	m	union:TVFE_Audio_CMD	typeref:struct:TVFE_Audio_CMD::__anon52
UINT16	types.h	/^typedef unsigned short 		UINT16;$/;"	t
UINT32	types.h	/^typedef unsigned int   		UINT32;$/;"	t
UINT64	types.h	/^typedef unsigned long long 	UINT64;$/;"	t
UINT8	types.h	/^typedef unsigned char 		UINT8;$/;"	t
UNDBLK	colortext.h	18;"	d
UNDBLU	colortext.h	22;"	d
UNDCYN	colortext.h	24;"	d
UNDGRN	colortext.h	20;"	d
UNDPUR	colortext.h	23;"	d
UNDRED	colortext.h	19;"	d
UNDWHT	colortext.h	25;"	d
UNDYLW	colortext.h	21;"	d
UP_SAMPLING_RATIO_1	tvfe_api.h	30;"	d
UP_SAMPLING_RATIO_1_5	tvfe_api.h	31;"	d
UP_SAMPLING_RATIO_2	tvfe_api.h	32;"	d
UP_SAMPLING_RATIO_4	tvfe_api.h	33;"	d
VAFE_AUTOTUNE_CLOCK	tvfe_api.h	/^	VAFE_AUTOTUNE_CLOCK,$/;"	e	enum:__anon78
VAFE_AUTOTUNE_CLOCK_FINE_TUNE	tvfe_api.h	/^	VAFE_AUTOTUNE_CLOCK_FINE_TUNE,$/;"	e	enum:__anon78
VAFE_AUTOTUNE_CLOCK_FINISH	tvfe_api.h	/^	VAFE_AUTOTUNE_CLOCK_FINISH,$/;"	e	enum:__anon78
VAFE_AUTOTUNE_CLOCK_INIT	tvfe_api.h	/^	VAFE_AUTOTUNE_CLOCK_INIT,$/;"	e	enum:__anon78
VAFE_AUTOTUNE_CLOCK_MASK	tvfe_api.h	/^	VAFE_AUTOTUNE_CLOCK_MASK=0x200,$/;"	e	enum:__anon78
VAFE_AUTOTUNE_CLOCK_ROUGH_TUNE	tvfe_api.h	/^	VAFE_AUTOTUNE_CLOCK_ROUGH_TUNE,$/;"	e	enum:__anon78
VAFE_AUTOTUNE_FINAL_ERR	tvfe_api.h	/^	VAFE_AUTOTUNE_FINAL_ERR,$/;"	e	enum:__anon78
VAFE_AUTOTUNE_FINAL_MASK	tvfe_api.h	/^	VAFE_AUTOTUNE_FINAL_MASK=0x400,$/;"	e	enum:__anon78
VAFE_AUTOTUNE_FINAL_OK	tvfe_api.h	/^	VAFE_AUTOTUNE_FINAL_OK,$/;"	e	enum:__anon78
VAFE_AUTOTUNE_IDLE	tvfe_api.h	/^	VAFE_AUTOTUNE_IDLE,$/;"	e	enum:__anon78
VAFE_AUTOTUNE_INITIAL	tvfe_api.h	/^	VAFE_AUTOTUNE_INITIAL,$/;"	e	enum:__anon78
VAFE_AUTOTUNE_NULL	tvfe_api.h	/^	VAFE_AUTOTUNE_NULL=0x000,$/;"	e	enum:__anon78
VAFE_AUTOTUNE_PHASE	tvfe_api.h	/^	VAFE_AUTOTUNE_PHASE,$/;"	e	enum:__anon78
VAFE_AUTOTUNE_PHASE_FINISH	tvfe_api.h	/^	VAFE_AUTOTUNE_PHASE_FINISH,$/;"	e	enum:__anon78
VAFE_AUTOTUNE_PHASE_INIT	tvfe_api.h	/^	VAFE_AUTOTUNE_PHASE_INIT,$/;"	e	enum:__anon78
VAFE_AUTOTUNE_PHASE_MASK	tvfe_api.h	/^	VAFE_AUTOTUNE_PHASE_MASK=0x100,$/;"	e	enum:__anon78
VAFE_AUTOTUNE_PHASE_ROUGH_TUNE	tvfe_api.h	/^	VAFE_AUTOTUNE_PHASE_ROUGH_TUNE,$/;"	e	enum:__anon78
VAFE_AUTOTUNE_POSITION	tvfe_api.h	/^	VAFE_AUTOTUNE_POSITION,$/;"	e	enum:__anon78
VAFE_AUTOTUNE_POSITION_FINISH	tvfe_api.h	/^	VAFE_AUTOTUNE_POSITION_FINISH,$/;"	e	enum:__anon78
VAFE_AUTOTUNE_POSITION_INIT	tvfe_api.h	/^	VAFE_AUTOTUNE_POSITION_INIT,$/;"	e	enum:__anon78
VAFE_AUTOTUNE_POSITION_MASK	tvfe_api.h	/^	VAFE_AUTOTUNE_POSITION_MASK=0x300,$/;"	e	enum:__anon78
VAFE_AUTOTUNE_POST_PROCESS	tvfe_api.h	/^	VAFE_AUTOTUNE_POST_PROCESS,$/;"	e	enum:__anon78
VAFE_AUTOTUNE_PRE_PROCESS	tvfe_api.h	/^	VAFE_AUTOTUNE_PRE_PROCESS,$/;"	e	enum:__anon78
VDSP	drv_ssd.h	/^            UINT32 VDSP      :1;$/;"	m	struct:__anon125::__anon128::__anon129
VDSP_C	drv_ssd.h	/^            UINT32 VDSP_C    :1;$/;"	m	struct:__anon125::__anon126::__anon127
VIDEO_MUTE_DEBUG	tvfe_api.h	37;"	d
VIDEO_PICTURE_QUEUE_SIZE	avplayer.c	81;"	d	file:
VIDEO_PICTURE_QUEUE_SIZE	ffplay.c	94;"	d	file:
VIDEO_PICTURE_QUEUE_SIZE	tutorial08.c	39;"	d	file:
VideoFrameNum	playback.c	/^unsigned int	AudioFrameNum = 0 ,VideoFrameNum = 0;$/;"	v
VideoPacketSize	playback.c	/^int64_t			AudioPacketSize = 0 ,VideoPacketSize = 0;$/;"	v
VideoPicture	avplayer.c	/^typedef struct VideoPicture {$/;"	s	file:
VideoPicture	avplayer.c	/^} VideoPicture;$/;"	t	typeref:struct:VideoPicture	file:
VideoPicture	ffplay.c	/^typedef struct VideoPicture {$/;"	s	file:
VideoPicture	ffplay.c	/^} VideoPicture;$/;"	t	typeref:struct:VideoPicture	file:
VideoPicture	tutorial08.c	/^typedef struct VideoPicture {$/;"	s	file:
VideoPicture	tutorial08.c	/^} VideoPicture;$/;"	t	typeref:struct:VideoPicture	file:
VideoState	avplayer.c	/^typedef struct VideoState {$/;"	s	file:
VideoState	avplayer.c	/^} VideoState;$/;"	t	typeref:struct:VideoState	file:
VideoState	ffplay.c	/^typedef struct VideoState {$/;"	s	file:
VideoState	ffplay.c	/^} VideoState;$/;"	t	typeref:struct:VideoState	file:
VideoState	tutorial08.c	/^typedef struct VideoState {$/;"	s	file:
VideoState	tutorial08.c	/^} VideoState;$/;"	t	typeref:struct:VideoState	file:
Volume	tvfe_audio.h	/^	INT32 Volume;$/;"	m	struct:_TVFE_Audio_AUX_Volume_t
WAVEFORMATEX	wave_fmt.h	/^} __attribute__ ((packed)) WAVEFORMATEX;$/;"	t	typeref:struct:tWAVEFORMATEX
WAVEFORMATEX2	wave_fmt.h	/^} __attribute__ ((packed)) WAVEFORMATEX2;$/;"	t	typeref:struct:tWAVEFORMATEX2
WAVE_FORMAT_AAC	wave_fmt.h	31;"	d
WAVE_FORMAT_ADPCM	wave_fmt.h	8;"	d
WAVE_FORMAT_ADPCM_U_LAW	wave_fmt.h	10;"	d
WAVE_FORMAT_APE	wave_fmt.h	43;"	d
WAVE_FORMAT_AVS	wave_fmt.h	44;"	d
WAVE_FORMAT_BD_LPCM	wave_fmt.h	49;"	d
WAVE_FORMAT_BigEndian_LPCM	wave_fmt.h	52;"	d
WAVE_FORMAT_CD_LPCM	wave_fmt.h	47;"	d
WAVE_FORMAT_COOK	wave_fmt.h	50;"	d
WAVE_FORMAT_DIVIO_AAC	wave_fmt.h	30;"	d
WAVE_FORMAT_DOLBY_AC2	wave_fmt.h	15;"	d
WAVE_FORMAT_DOLBY_AC3	wave_fmt.h	16;"	d
WAVE_FORMAT_DOLBY_DIGITAL_PLUS	wave_fmt.h	37;"	d
WAVE_FORMAT_DOLBY_DTS	wave_fmt.h	17;"	d
WAVE_FORMAT_DTSHD	wave_fmt.h	34;"	d
WAVE_FORMAT_DTSHD_MASTER_AUDIO	wave_fmt.h	35;"	d
WAVE_FORMAT_DTSLBR	wave_fmt.h	36;"	d
WAVE_FORMAT_DVD_LPCM	wave_fmt.h	48;"	d
WAVE_FORMAT_Encode_AC3	wave_fmt.h	56;"	d
WAVE_FORMAT_Encode_DTS	wave_fmt.h	57;"	d
WAVE_FORMAT_Encode_MPEG	wave_fmt.h	55;"	d
WAVE_FORMAT_FLAC	wave_fmt.h	42;"	d
WAVE_FORMAT_G721_ADPCM	wave_fmt.h	12;"	d
WAVE_FORMAT_G723_ADPCM	wave_fmt.h	11;"	d
WAVE_FORMAT_G726_ADPCM	wave_fmt.h	14;"	d
WAVE_FORMAT_G728_CELP	wave_fmt.h	13;"	d
WAVE_FORMAT_IEEE_FLOAT	wave_fmt.h	9;"	d
WAVE_FORMAT_IMA_ADPCM	wave_fmt.h	20;"	d
WAVE_FORMAT_MPEG	wave_fmt.h	18;"	d
WAVE_FORMAT_MPEG2AAC	wave_fmt.h	29;"	d
WAVE_FORMAT_MPEGLAYER3	wave_fmt.h	19;"	d
WAVE_FORMAT_NEC_AAC	wave_fmt.h	28;"	d
WAVE_FORMAT_NOISE_GEN	wave_fmt.h	41;"	d
WAVE_FORMAT_OGG_VORBIS	wave_fmt.h	39;"	d
WAVE_FORMAT_PCM	wave_fmt.h	7;"	d
WAVE_FORMAT_REAL_AUDIO	wave_fmt.h	40;"	d
WAVE_FORMAT_TRUEHD	wave_fmt.h	38;"	d
WAVE_FORMAT_ULaw_LPCM	wave_fmt.h	51;"	d
WAVE_FORMAT_UNKNOWN	wave_fmt.h	6;"	d
WAVE_FORMAT_WMA_LOSSLESS	wave_fmt.h	25;"	d
WAVE_FORMAT_WMA_OLD	wave_fmt.h	22;"	d
WAVE_FORMAT_WMA_PRO	wave_fmt.h	24;"	d
WAVE_FORMAT_WMA_STEREO	wave_fmt.h	23;"	d
WAVE_FORMAT_WMA_VOICE	wave_fmt.h	26;"	d
WAVFORMATMACRO	wave_fmt.h	/^}   __attribute__ ((packed)) WAVFORMATMACRO;$/;"	t	typeref:struct:tWAVFORMATMACRO
WMAHEADER	wave_fmt.h	/^} __attribute__ ((packed)) WMAHEADER;$/;"	t	typeref:struct:_wmaheader
WMAPROWAVEFORMAT	wave_fmt.h	/^}   __attribute__ ((packed)) WMAPROWAVEFORMAT;$/;"	t	typeref:struct:tWMAPROWAVEFORMAT
WMAUDIO2WAVEFORMAT	wave_fmt.h	/^}   __attribute__ ((packed)) WMAUDIO2WAVEFORMAT;$/;"	t	typeref:struct:tWMAUDIO2WAVEFORMAT
WORD	types.h	/^typedef unsigned short		WORD;$/;"	t
YUVA_IN	ffplay.c	414;"	d	file:
YUVA_OUT	ffplay.c	423;"	d	file:
_APP_AudioSoundModeSetting_t	audio_api.c	/^typedef struct _APP_AudioSoundModeSetting_t$/;"	s	file:
_APP_AudioSoundMode_t	audio_api.c	/^typedef enum _APP_AudioSoundMode_t$/;"	g	file:
_APP_Audio_Mode_e	audio_api.c	/^typedef enum _APP_Audio_Mode_e$/;"	g	file:
_APP_Audio_SPDIF_Output_Config_e	audio_api.c	/^typedef enum _APP_Audio_SPDIF_Output_Config_e$/;"	g	file:
_APP_Audio_SPDIF_Output_SmpRate_Config_e	audio_api.c	/^typedef enum _APP_Audio_SPDIF_Output_SmpRate_Config_e$/;"	g	file:
_APP_PCB_AudioAuxiliaryOffset	audio_api.c	/^static const INT32 _APP_PCB_AudioAuxiliaryOffset[2][PLF_INPUT_PIN_TYPE_MAX] =$/;"	v	file:
_APP_PCB_AudioAuxiliaryVolumeOffset	audio_api.c	/^static const INT32 _APP_PCB_AudioAuxiliaryVolumeOffset[APP_PCB_SOURCE_MAX] =$/;"	v	file:
_APP_PCB_AudioBalanceTable	audio_api.c	/^static const INT8 _APP_PCB_AudioBalanceTable[APP_PCB_AUDIO_BALANCE_TABLE_SIZE]=$/;"	v	file:
_APP_PCB_AudioBassTable	audio_api.c	/^static const INT8 _APP_PCB_AudioBassTable[APP_PCB_AUDIO_BASS_TABLE_SIZE]=$/;"	v	file:
_APP_PCB_AudioEQTable	audio_api.c	/^static const INT8 _APP_PCB_AudioEQTable[APP_PCB_AUDIO_EQ_TABLE_SIZE]=$/;"	v	file:
_APP_PCB_AudioOutputConfigTable	audio_api.c	/^static const APP_PCB_AudioOutputConfig_t _APP_PCB_AudioOutputConfigTable[] =$/;"	v	file:
_APP_PCB_AudioOutputConfig_t	audio_api.c	/^typedef struct _APP_PCB_AudioOutputConfig_t$/;"	s	file:
_APP_PCB_AudioTrebleTable	audio_api.c	/^static const INT8 _APP_PCB_AudioTrebleTable[APP_PCB_AUDIO_TREBLE_TABLE_SIZE]=$/;"	v	file:
_APP_PCB_AudioVolumeOffset	audio_api.c	/^static const INT8 _APP_PCB_AudioVolumeOffset[] =$/;"	v	file:
_APP_PCB_AudioVolumeTable	audio_api.c	/^static INT16 _APP_PCB_AudioVolumeTable[APP_PCB_AUDIO_VOLUME_TABLE_SIZE] =$/;"	v	file:
_APP_PCB_Audio_OutputTarget_t	audio_api.c	/^typedef enum _APP_PCB_Audio_OutputTarget_t$/;"	g	file:
_APP_PCB_Audio_SIF_Detect_Config	audio_api.c	/^TVFE_Audio_SIF_Detect_Config_t _APP_PCB_Audio_SIF_Detect_Config =$/;"	v
_APP_PCB_SetAudioOutputConfig	audio_api.c	/^void _APP_PCB_SetAudioOutputConfig(void)$/;"	f	signature:(void)
_APP_PCB_Source_t	audio_api.c	/^typedef enum _APP_PCB_Source_t$/;"	g	file:
_AUDIF_SUNSUR_Gain_e	dsp_ioctl.h	/^typedef enum _AUDIF_SUNSUR_Gain_e$/;"	g
_AUDIF_SUNSUR_Switch_e	dsp_ioctl.h	/^typedef enum _AUDIF_SUNSUR_Switch_e$/;"	g
_AUDIF_Status_e	dsp_ioctl.h	/^typedef enum _AUDIF_Status_e$/;"	g
_INF_DEV_STA_REG	drv_ssd.h	/^        UINT32 _INF_DEV_STA_REG;\/\/SSD register address = 0x00004$/;"	m	union:__anon125::__anon126
_INF_LEV_MON_REG	drv_ssd.h	/^        UINT32 _INF_LEV_MON_REG;\/\/SSD register address = 0x00018$/;"	m	union:__anon125::__anon132
_INF_MPX_LEVEL_REG	drv_ssd.h	/^        UINT32 _INF_MPX_LEVEL_REG;\/\/SSD register address = 0x0001c$/;"	m	union:__anon125::__anon134
_INF_NIC_ADD_REG	drv_ssd.h	/^        UINT32 _INF_NIC_ADD_REG;\/\/SSD register address = 0x0000c$/;"	m	union:__anon125::__anon130
_INF_NIC_STA_REG	drv_ssd.h	/^        UINT32 _INF_NIC_STA_REG;\/\/SSD register address = 0x00008$/;"	m	union:__anon125::__anon128
_INF_NOISELEVEL_REG	drv_ssd.h	/^        UINT32 _INF_NOISELEVEL_REG;\/\/SSD register address = 0x00028$/;"	m	union:__anon125::__anon136
_INF_OVMADAPT_REG	drv_ssd.h	/^        UINT32 _INF_OVMADAPT_REG;\/\/SSD register address = 0x0002c$/;"	m	union:__anon125::__anon138
_TVFE_API_H_	tvfe_api.h	11;"	d
_TVFE_Audio_AUX_Volume_t	tvfe_audio.h	/^typedef struct _TVFE_Audio_AUX_Volume_t$/;"	s
_TVFE_Audio_AVLMode_e	tvfe_audio.h	/^typedef enum _TVFE_Audio_AVLMode_e$/;"	g
_TVFE_Audio_AVLReferenceLevel_e	tvfe_audio.h	/^typedef enum _TVFE_Audio_AVLReferenceLevel_e$/;"	g
_TVFE_Audio_AVL_Config_t	tvfe_audio.h	/^typedef struct _TVFE_Audio_AVL_Config_t$/;"	s
_TVFE_Audio_Effect_e	tvfe_audio.h	/^typedef enum _TVFE_Audio_Effect_e$/;"	g
_TVFE_Audio_Equalizer_Config_t	tvfe_audio.h	/^typedef struct _TVFE_Audio_Equalizer_Config_t$/;"	s
_TVFE_Audio_Level_Adjust_t	tvfe_audio.h	/^typedef struct _TVFE_Audio_Level_Adjust_t$/;"	s
_TVFE_Audio_Lip_Sync_Config_t	tvfe_audio.h	/^typedef struct _TVFE_Audio_Lip_Sync_Config_t$/;"	s
_TVFE_Audio_Mute_t	tvfe_audio.h	/^typedef struct _TVFE_Audio_Mute_t$/;"	s
_TVFE_Audio_OutputSelection_e	tvfe_audio.h	/^typedef enum _TVFE_Audio_OutputSelection_e$/;"	g
_TVFE_Audio_Output_Config_t	tvfe_audio.h	/^typedef struct _TVFE_Audio_Output_Config_t$/;"	s
_TVFE_Audio_Output_Selection_t	tvfe_audio.h	/^typedef struct _TVFE_Audio_Output_Selection_t$/;"	s
_TVFE_Audio_Output_e	tvfe_audio.h	/^typedef enum _TVFE_Audio_Output_e$/;"	g
_TVFE_Audio_Pcm_Output_Phase_Config_t	tvfe_audio.h	/^typedef struct _TVFE_Audio_Pcm_Output_Phase_Config_t$/;"	s
_TVFE_Audio_Pcm_Output_Phase_e	tvfe_audio.h	/^typedef enum _TVFE_Audio_Pcm_Output_Phase_e$/;"	g
_TVFE_Audio_ProcessPath_e	tvfe_audio.h	/^typedef enum _TVFE_Audio_ProcessPath_e$/;"	g
_TVFE_Audio_SIFHandler_Status	tvfe_audio.h	/^typedef enum _TVFE_Audio_SIFHandler_Status$/;"	g
_TVFE_Audio_SIF_Magnitude_Detect_Config_t	tvfe_audio.h	/^typedef struct _TVFE_Audio_SIF_Magnitude_Detect_Config_t$/;"	s
_TVFE_Audio_SIF_Over_Modulation_Config_t	tvfe_audio.h	/^typedef struct _TVFE_Audio_SIF_Over_Modulation_Config_t$/;"	s
_TVFE_Audio_SPDIF_Output_Config_e	tvfe_audio.h	/^typedef enum _TVFE_Audio_SPDIF_Output_Config_e$/;"	g
_TVFE_Audio_SPDIF_Output_SmpRate_Config_e	tvfe_audio.h	/^typedef enum _TVFE_Audio_SPDIF_Output_SmpRate_Config_e$/;"	g
_TVFE_Audio_SUNSUR_Gain_e	tvfe_audio.h	/^typedef enum _TVFE_Audio_SUNSUR_Gain_e$/;"	g
_TVFE_Audio_Status_e	tvfe_audio.h	/^typedef enum _TVFE_Audio_Status_e$/;"	g
_TVFE_Audio_WAVE_FORMAT_e	tvfe_audio.h	/^typedef enum _TVFE_Audio_WAVE_FORMAT_e$/;"	g
__AUDIO_API__	audio_api.h	2;"	d
__DSP_API__	dsp_api.h	2;"	d
__PLF_AV_SOURCE_H__	plf_av_source.h	16;"	d
__WAVE_FMT_H	wave_fmt.h	3;"	d
__cyg_profile_func_enter	cyg-profile.c	/^__cyg_profile_func_enter (void *this_fn, void *call_site)$/;"	f	signature:(void *this_fn, void *call_site)
__cyg_profile_func_enter	cyg-profile.c	/^void __cyg_profile_func_enter (void *this_fn, void *call_site)$/;"	p	file:	signature:(void *this_fn, void *call_site)
__cyg_profile_func_exit	cyg-profile.c	/^__cyg_profile_func_exit (void *this_fn, void *call_site)$/;"	f	signature:(void *this_fn, void *call_site)
__cyg_profile_func_exit	cyg-profile.c	/^void __cyg_profile_func_exit (void *this_fn, void *call_site)$/;"	p	file:	signature:(void *this_fn, void *call_site)
_wmaheader	wave_fmt.h	/^typedef	struct _wmaheader$/;"	s
abort_request	avplayer.c	/^    int abort_request;$/;"	m	struct:PacketQueue	file:
abort_request	ffplay.c	/^    int abort_request;$/;"	m	struct:PacketQueue	file:
abort_request	ffplay.c	/^    int abort_request;$/;"	m	struct:VideoState	file:
adc_param_st	tvfe_api.h	/^} adc_param_st;$/;"	t	typeref:struct:__anon103
alloc_picture	ffplay.c	/^static void alloc_picture(void *opaque)$/;"	f	file:	signature:(void *opaque)
alloc_picture	tutorial08.c	/^void alloc_picture(void *userdata) {$/;"	f	signature:(void *userdata)
allocated	avplayer.c	/^    int allocated;$/;"	m	struct:VideoPicture	file:
allocated	ffplay.c	/^    int allocated;$/;"	m	struct:VideoPicture	file:
allocated	tutorial08.c	/^	int allocated;$/;"	m	struct:VideoPicture	file:
ambiance_gain	dsp_ioctl.h	/^    AUDIF_SUNSUR_Gain_e ambiance_gain;$/;"	m	struct:__anon23
ambiance_gain	tvfe_audio.h	/^    TVFE_Audio_SUNSUR_Gain_e ambiance_gain;$/;"	m	struct:__anon155
arglist	mtrace-mips	/^arglist: while (@ARGV) {$/;"	l
argument_1	dsp_ioctl.h	/^    int	argument_1;$/;"	m	struct:DSP_IOCTL_CMD
argument_10	dsp_ioctl.h	/^    int argument_10;$/;"	m	struct:DSP_IOCTL_CMD
argument_2	dsp_ioctl.h	/^    int	argument_2;$/;"	m	struct:DSP_IOCTL_CMD
argument_3	dsp_ioctl.h	/^    int argument_3;$/;"	m	struct:DSP_IOCTL_CMD
argument_4	dsp_ioctl.h	/^    int argument_4;$/;"	m	struct:DSP_IOCTL_CMD
argument_5	dsp_ioctl.h	/^    int argument_5;$/;"	m	struct:DSP_IOCTL_CMD
argument_6	dsp_ioctl.h	/^    int argument_6;$/;"	m	struct:DSP_IOCTL_CMD
argument_7	dsp_ioctl.h	/^    int argument_7;$/;"	m	struct:DSP_IOCTL_CMD
argument_8	dsp_ioctl.h	/^    int argument_8;$/;"	m	struct:DSP_IOCTL_CMD
argument_9	dsp_ioctl.h	/^    int argument_9;$/;"	m	struct:DSP_IOCTL_CMD
audioCount	playback.c	/^int             i,videoCount,audioCount, videoStream,audioStream;$/;"	v
audioStream	avplayer.c	/^	int             videoStream, audioStream;$/;"	m	struct:VideoState	file:
audioStream	playback.c	/^int             i,videoCount,audioCount, videoStream,audioStream;$/;"	v
audioStream	tutorial08.c	/^	int             videoStream, audioStream;$/;"	m	struct:VideoState	file:
audio_buf	ffplay.c	/^    uint8_t *audio_buf;$/;"	m	struct:VideoState	file:
audio_buf_index	avplayer.c	/^	unsigned int    audio_buf_index;$/;"	m	struct:VideoState	file:
audio_buf_index	ffplay.c	/^    int audio_buf_index; \/* in bytes *\/$/;"	m	struct:VideoState	file:
audio_buf_index	tutorial08.c	/^	unsigned int    audio_buf_index;$/;"	m	struct:VideoState	file:
audio_buf_size	avplayer.c	/^	unsigned int    audio_buf_size;$/;"	m	struct:VideoState	file:
audio_buf_size	ffplay.c	/^    unsigned int audio_buf_size; \/* in bytes *\/$/;"	m	struct:VideoState	file:
audio_buf_size	tutorial08.c	/^	unsigned int    audio_buf_size;$/;"	m	struct:VideoState	file:
audio_callback	tutorial08.c	/^void audio_callback(void *userdata, Uint8 *stream, int len) {$/;"	f	signature:(void *userdata, Uint8 *stream, int len)
audio_callback_time	ffplay.c	/^static int64_t audio_callback_time;$/;"	v	file:
audio_clock	avplayer.c	/^	double          audio_clock;$/;"	m	struct:VideoState	file:
audio_clock	ffplay.c	/^    double audio_clock;$/;"	m	struct:VideoState	file:
audio_clock	tutorial08.c	/^	double          audio_clock;$/;"	m	struct:VideoState	file:
audio_decode_frame	ffplay.c	/^static int audio_decode_frame(VideoState *is, double *pts_ptr)$/;"	f	file:	signature:(VideoState *is, double *pts_ptr)
audio_decode_frame	tutorial08.c	/^int audio_decode_frame(VideoState *is, uint8_t *audio_buf, int buf_size, double *pts_ptr) {$/;"	f	signature:(VideoState *is, uint8_t *audio_buf, int buf_size, double *pts_ptr)
audio_diff_avg_coef	avplayer.c	/^	double          audio_diff_avg_coef;$/;"	m	struct:VideoState	file:
audio_diff_avg_coef	ffplay.c	/^    double audio_diff_avg_coef;$/;"	m	struct:VideoState	file:
audio_diff_avg_coef	tutorial08.c	/^	double          audio_diff_avg_coef;$/;"	m	struct:VideoState	file:
audio_diff_avg_count	avplayer.c	/^	int             audio_diff_avg_count;$/;"	m	struct:VideoState	file:
audio_diff_avg_count	ffplay.c	/^    int audio_diff_avg_count;$/;"	m	struct:VideoState	file:
audio_diff_avg_count	tutorial08.c	/^	int             audio_diff_avg_count;$/;"	m	struct:VideoState	file:
audio_diff_cum	avplayer.c	/^	double          audio_diff_cum; \/* used for AV difference average computation *\/$/;"	m	struct:VideoState	file:
audio_diff_cum	ffplay.c	/^    double audio_diff_cum; \/* used for AV difference average computation *\/$/;"	m	struct:VideoState	file:
audio_diff_cum	tutorial08.c	/^	double          audio_diff_cum; \/* used for AV difference average computation *\/$/;"	m	struct:VideoState	file:
audio_diff_threshold	avplayer.c	/^	double          audio_diff_threshold;$/;"	m	struct:VideoState	file:
audio_diff_threshold	ffplay.c	/^    double audio_diff_threshold;$/;"	m	struct:VideoState	file:
audio_diff_threshold	tutorial08.c	/^	double          audio_diff_threshold;$/;"	m	struct:VideoState	file:
audio_disable	ffplay.c	/^static int audio_disable;$/;"	v	file:
audio_dsp	player.c	/^struct audio_dsp$/;"	s	file:
audio_fd	player.c	/^	int audio_fd;$/;"	m	struct:audio_dsp	file:
audio_hw_buf_size	avplayer.c	/^	int             audio_hw_buf_size;  $/;"	m	struct:VideoState	file:
audio_hw_buf_size	ffplay.c	/^    int audio_hw_buf_size;$/;"	m	struct:VideoState	file:
audio_hw_buf_size	tutorial08.c	/^	int             audio_hw_buf_size;  $/;"	m	struct:VideoState	file:
audio_pkt	avplayer.c	/^	AVPacket        audio_pkt;$/;"	m	struct:VideoState	file:
audio_pkt	ffplay.c	/^    AVPacket audio_pkt;$/;"	m	struct:VideoState	file:
audio_pkt	tutorial08.c	/^	AVPacket        audio_pkt;$/;"	m	struct:VideoState	file:
audio_pkt_data	tutorial08.c	/^	uint8_t         *audio_pkt_data;$/;"	m	struct:VideoState	file:
audio_pkt_size	tutorial08.c	/^	int             audio_pkt_size;$/;"	m	struct:VideoState	file:
audio_pkt_temp	ffplay.c	/^    AVPacket audio_pkt_temp;$/;"	m	struct:VideoState	file:
audio_src_fmt	ffplay.c	/^    enum AVSampleFormat audio_src_fmt;$/;"	m	struct:VideoState	typeref:enum:VideoState::AVSampleFormat	file:
audio_st	avplayer.c	/^	AVStream        *audio_st;$/;"	m	struct:VideoState	file:
audio_st	ffplay.c	/^    AVStream *audio_st;$/;"	m	struct:VideoState	file:
audio_st	playback.c	/^AVStream		*video_st,*audio_st;$/;"	v
audio_st	tutorial08.c	/^	AVStream        *audio_st;$/;"	m	struct:VideoState	file:
audio_stream	ffplay.c	/^    int audio_stream;$/;"	m	struct:VideoState	file:
audio_tid	avplayer.c	/^	pthread_t      	audio_tid;$/;"	m	struct:VideoState	file:
audio_write_get_buf_size	ffplay.c	/^static int audio_write_get_buf_size(VideoState *is)$/;"	f	file:	signature:(VideoState *is)
audioq	avplayer.c	/^	PacketQueue     audioq;$/;"	m	struct:VideoState	file:
audioq	ffplay.c	/^    PacketQueue audioq;$/;"	m	struct:VideoState	file:
audioq	tutorial08.c	/^	PacketQueue     audioq;$/;"	m	struct:VideoState	file:
autoexit	ffplay.c	/^static int autoexit;$/;"	v	file:
aux1_phase	tvfe_audio.h	/^    TVFE_Audio_Pcm_Output_Phase_e aux1_phase;$/;"	m	struct:_TVFE_Audio_Pcm_Output_Phase_Config_t
aux2_phase	tvfe_audio.h	/^    TVFE_Audio_Pcm_Output_Phase_e aux2_phase;$/;"	m	struct:_TVFE_Audio_Pcm_Output_Phase_Config_t
av_diff_time	avplayer.c	/^	double			av_diff_time;$/;"	m	struct:VideoState	file:
av_sync_type	avplayer.c	/^	int             av_sync_type;$/;"	m	struct:VideoState	file:
av_sync_type	ffplay.c	/^    int av_sync_type;$/;"	m	struct:VideoState	file:
av_sync_type	ffplay.c	/^static int av_sync_type = AV_SYNC_AUDIO_MASTER;$/;"	v	file:
av_sync_type	tutorial08.c	/^	int             av_sync_type;$/;"	m	struct:VideoState	file:
b10bitsPath	tvfe_api.h	/^	UINT8 b10bitsPath; \/* DRAM control mode *\/$/;"	m	struct:__anon106
bAAFBandWidth	tvfe_api.h	/^	UINT8 bAAFBandWidth; \/\/5-bits$/;"	m	struct:__anon103
bADCAdjustLevel	tvfe_api.h	/^	INT8 bADCAdjustLevel;$/;"	m	struct:__anon117
bCVBS_10bitsPath	tvfe_api.h	/^	UINT8 bCVBS_10bitsPath; \/* DRAM control mode for CVBS source *\/$/;"	m	struct:__anon102
bCVBS_HUpSampling	tvfe_api.h	/^	UINT8 bCVBS_HUpSampling; \/* H Upsampling mode for CVBS source *\/$/;"	m	struct:__anon102
bClampDuration	tvfe_api.h	/^	UINT8 bClampDuration;$/;"	m	struct:__anon103
bClampPlacement	tvfe_api.h	/^	UINT8 bClampPlacement;$/;"	m	struct:__anon103
bCurrent	tvfe_api.h	/^	UINT8 bCurrent; \/\/5-bits$/;"	m	struct:__anon103
bDECAdjustLevel	tvfe_api.h	/^	INT8 bDECAdjustLevel;$/;"	m	struct:__anon117
bDebounceCounter	tvfe_api.h	/^    UINT8 bDebounceCounter;$/;"	m	struct:__anon123
bDigitalAdjustLevel	tvfe_api.h	/^	INT8 bDigitalAdjustLevel;$/;"	m	struct:__anon117
bEnableFrameBufferMode	tvfe_api.h	/^	UINT8 bEnableFrameBufferMode;$/;"	m	struct:__anon103
bEnableFrameBufferMode	tvfe_api.h	/^	UINT8 bEnableFrameBufferMode;$/;"	m	struct:__anon108
bGain	tvfe_api.h	/^    INT8 bGain;$/;"	m	struct:__anon121
bHPol	tvfe_api.h	/^		UINT8 bHPol : 1;$/;"	m	struct:__anon103::__anon104
bMainEQ_Band1_0100HZ	dsp_ioctl.h	/^    INT8 bMainEQ_Band1_0100HZ;$/;"	m	struct:__anon21
bMainEQ_Band2_0300HZ	dsp_ioctl.h	/^    INT8 bMainEQ_Band2_0300HZ;$/;"	m	struct:__anon21
bMainEQ_Band3_1000HZ	dsp_ioctl.h	/^    INT8 bMainEQ_Band3_1000HZ;$/;"	m	struct:__anon21
bMainEQ_Band4_3000HZ	dsp_ioctl.h	/^    INT8 bMainEQ_Band4_3000HZ;$/;"	m	struct:__anon21
bMainEQ_Band5_8000HZ	dsp_ioctl.h	/^    INT8 bMainEQ_Band5_8000HZ;$/;"	m	struct:__anon21
bModeDetectWithSyncWidth	tvfe_api.h	/^	UINT8 bModeDetectWithSyncWidth;$/;"	m	struct:__anon103
bMonoAdjustLevel	tvfe_api.h	/^	INT8 bMonoAdjustLevel;$/;"	m	struct:__anon117
bNICAMAdjustLevel	tvfe_api.h	/^	INT8 bNICAMAdjustLevel;$/;"	m	struct:__anon117
bNICAMError	tvfe_api.h	/^	UINT8	bNICAMError;$/;"	m	struct:__anon124
bNICAMError	tvfe_api.h	/^    UINT8                       bNICAMError;$/;"	m	struct:__anon120
bPGA_gain	tvfe_api.h	/^	INT8 bPGA_gain;	                \/\/!PGA gain control value : -25(mute) ~ 6(6 dB),(1 step is 1 dB)$/;"	m	struct:__anon116
bPhase	tvfe_api.h	/^	UINT8 bPhase;$/;"	m	struct:__anon103
bPostCoast	tvfe_api.h	/^	UINT8 bPostCoast;$/;"	m	struct:__anon103
bPreCoast	tvfe_api.h	/^	UINT8 bPreCoast;$/;"	m	struct:__anon103
bReference_level	dsp_ioctl.h	/^    INT8 bReference_level;$/;"	m	struct:__anon22
bReserved	tvfe_api.h	/^		UINT8 bReserved : 3;$/;"	m	struct:__anon103::__anon105
bReserved	tvfe_api.h	/^		UINT8 bReserved : 5;$/;"	m	struct:__anon103::__anon104
bRetSIFAGCGain	tvfe_api.h	/^    UINT8	bRetSIFAGCGain;$/;"	m	struct:__anon124
bRunProcess	audio_api.c	/^int bRunProcess = 1;$/;"	v
bSAPAdjustLevel	tvfe_api.h	/^	INT8 bSAPAdjustLevel;$/;"	m	struct:__anon117
bSCARTRgbOffsetX	tvfe_api.h	/^	INT8 bSCARTRgbOffsetX; \/* SCART_RGB H start position offset *\/$/;"	m	struct:__anon101
bSCARTRgbOffsetY	tvfe_api.h	/^	INT8 bSCARTRgbOffsetY; \/* SCART_RGB V start position offset *\/$/;"	m	struct:__anon101
bSCART_10bitsPath	tvfe_api.h	/^	UINT8 bSCART_10bitsPath; \/* DRAM control mode for SCART source *\/$/;"	m	struct:__anon102
bSCART_HUpSampling	tvfe_api.h	/^	UINT8 bSCART_HUpSampling; \/* H Upsampling mode for SCART source *\/$/;"	m	struct:__anon102
bSIFAGCGain	tvfe_api.h	/^    INT8                       bSIFAGCGain;$/;"	m	struct:__anon120
bSOGTh	tvfe_api.h	/^		UINT8 bSOGTh : 5 ;$/;"	m	struct:__anon103::__anon105
bSVIDEO_10bitsPath	tvfe_api.h	/^	UINT8 bSVIDEO_10bitsPath; \/* DRAM control mode for SVIDEO source *\/$/;"	m	struct:__anon102
bSVIDEO_HUpSampling	tvfe_api.h	/^	UINT8 bSVIDEO_HUpSampling; \/* H Upsampling mode for SVIDEO source *\/$/;"	m	struct:__anon102
bSVOffsetX	tvfe_api.h	/^	INT8 bSVOffsetX; \/* SVideo H start position offset *\/$/;"	m	struct:__anon101
bSVOffsetY	tvfe_api.h	/^	INT8 bSVOffsetY; \/* SVideo V start position offset *\/$/;"	m	struct:__anon101
bSamplingMode	tvfe_api.h	/^	UINT8 bSamplingMode;$/;"	m	struct:__anon103
bTUNER_10bitsPath	tvfe_api.h	/^	UINT8 bTUNER_10bitsPath; \/* DRAM control mode for TUNER source *\/$/;"	m	struct:__anon102
bTUNER_HUpSampling	tvfe_api.h	/^	UINT8 bTUNER_HUpSampling; \/* H Upsampling mode for TUNER source *\/$/;"	m	struct:__anon102
bVCORange	tvfe_api.h	/^	UINT8 bVCORange; \/\/2-bits$/;"	m	struct:__anon103
bVPol	tvfe_api.h	/^		UINT8 bVPol : 1;$/;"	m	struct:__anon103::__anon104
bYUV	tvfe_api.h	/^	UINT8 bYUV;\/*HDMI Output Color Space*\/$/;"	m	struct:__anon107
b_pin	plf_av_source.h	/^		PLF_AVPin_e b_pin;$/;"	m	struct:__anon142::__anon143
b_pin	plf_av_source.h	/^		PLF_AVPin_e b_pin;$/;"	m	struct:__anon142::__anon148
bfPolRef	tvfe_api.h	/^		UINT8 bfPolRef : 1;$/;"	m	struct:__anon103::__anon104
bit_res	dsp_ioctl.h	/^		UINT8 bit_res;$/;"	m	struct:TVFE_Audio_CMD::__anon45
blend_subrect	ffplay.c	/^static void blend_subrect(AVPicture *dst, const AVSubtitleRect *rect, int imgw, int imgh)$/;"	f	file:	signature:(AVPicture *dst, const AVSubtitleRect *rect, int imgw, int imgh)
bmp	ffplay.c	/^    SDL_Overlay *bmp;$/;"	m	struct:VideoPicture	file:
bmp	tutorial08.c	/^	SDL_Overlay *bmp;$/;"	m	struct:VideoPicture	file:
bplay	player.c	/^	int bplay;$/;"	m	struct:options	file:
buffer	avplayer.c	/^	uint8_t         *buffer;$/;"	m	struct:VideoState	file:
buffer	playback.c	/^uint8_t         *buffer;$/;"	v
c_pin	plf_av_source.h	/^		PLF_AVPin_e c_pin;$/;"	m	struct:__anon142::__anon145
c_pin	plf_av_source.h	/^		PLF_AVPin_e c_pin;$/;"	m	struct:__anon142::__anon147
cbSize	wave_fmt.h	/^    UINT16	cbSize           ;$/;"	m	struct:tWAVEFORMATEX2
cbSize	wave_fmt.h	/^    UINT16	cbSize           ;\/\/__attribute__ ((packed));   \/* The count in bytes of the size of extra information (after cbSize) *\/$/;"	m	struct:tWAVEFORMATEX
cbsize	wave_fmt.h	/^    UINT16      cbsize;$/;"	m	struct:tWMAPROWAVEFORMAT
channel_cfg	wave_fmt.h	/^	UINT16	channel_cfg;$/;"	m	struct:tBDLPCMWAVEFORMAT
channels	player.c	/^	int channels;$/;"	m	struct:audio_dsp	file:
close_video	player.c	/^void close_video(struct video_fb *fb)$/;"	f	signature:(struct video_fb *fb)
closelogfile	cyg-profile.c	/^closelogfile (void)$/;"	f	file:	signature:(void)
closelogfile	cyg-profile.c	/^static void closelogfile (void)$/;"	p	file:	signature:(void)
codec_name	playback.c	/^const char		*codec_name;$/;"	v
compute_mod	ffplay.c	/^static inline int compute_mod(int a, int b)$/;"	f	file:	signature:(int a, int b)
compute_target_time	ffplay.c	/^static double compute_target_time(double frame_current_pts, VideoState *is)$/;"	f	file:	signature:(double frame_current_pts, VideoState *is)
cond	avplayer.c	/^    pthread_cond_t cond;$/;"	m	struct:PacketQueue	file:
cond	ffplay.c	/^    SDL_cond *cond;$/;"	m	struct:PacketQueue	file:
cond	tutorial08.c	/^	SDL_cond *cond;$/;"	m	struct:PacketQueue	file:
configure_video_filters	ffplay.c	/^static int configure_video_filters(AVFilterGraph *graph, VideoState *is, const char *vfilters)$/;"	f	file:	signature:(AVFilterGraph *graph, VideoState *is, const char *vfilters)
cplQbits	wave_fmt.h	/^	UINT16   cplQbits;		$/;"	m	struct:tRAwaveformat_tag
cplStart	wave_fmt.h	/^	UINT16   cplStart;		$/;"	m	struct:tRAwaveformat_tag
cur_stream	ffplay.c	/^static VideoState *cur_stream;$/;"	v	file:
cvbs	plf_av_source.h	/^	} cvbs;$/;"	m	union:__anon142	typeref:struct:__anon142::__anon146
cvbs_pin	plf_av_source.h	/^		PLF_AVPin_e cvbs_pin;$/;"	m	struct:__anon142::__anon143
cvbs_pin	plf_av_source.h	/^		PLF_AVPin_e cvbs_pin;$/;"	m	struct:__anon142::__anon144
cyg_profile_enabled	cyg-profile.c	/^static int cyg_profile_enabled=0;$/;"	v	file:
cyg_profile_filename	cyg-profile.c	/^static char cyg_profile_filename[FN_SIZE+1];$/;"	v	file:
cygprofile_disable	cyg-profile.c	/^cygprofile_disable (void)$/;"	f	signature:(void)
cygprofile_disable	cyg-profile.h	/^void cygprofile_disable (void)$/;"	p	signature:(void)
cygprofile_enable	cyg-profile.c	/^cygprofile_enable (void)$/;"	f	signature:(void)
cygprofile_enable	cyg-profile.h	/^void cygprofile_enable (void)$/;"	p	signature:(void)
cygprofile_getfilename	cyg-profile.c	/^cygprofile_getfilename (void)$/;"	f	signature:(void)
cygprofile_getfilename	cyg-profile.h	/^char *cygprofile_getfilename (void)$/;"	p	signature:(void)
cygprofile_isenabled	cyg-profile.c	/^cygprofile_isenabled (void)$/;"	f	signature:(void)
cygprofile_isenabled	cyg-profile.h	/^int cygprofile_isenabled (void)$/;"	p	signature:(void)
cygprofile_setfilename	cyg-profile.c	/^cygprofile_setfilename (const char *filename)$/;"	f	signature:(const char *filename)
cygprofile_setfilename	cyg-profile.h	/^int cygprofile_setfilename (const char *filename)$/;"	p	signature:(const char *filename)
dLipSyncMemorySize	tvfe_api.h	/^	UINT32 dLipSyncMemorySize;		    \/\/!memory size for lip sync (dely line unit)$/;"	m	struct:__anon116
dLipSyncMemoryStarAddress	tvfe_api.h	/^	UINT32 dLipSyncMemoryStarAddress;   \/\/!memory star address for lip sync (dely line unit)$/;"	m	struct:__anon116
decode_interrupt_cb	avplayer.c	/^int decode_interrupt_cb(void) {$/;"	f	signature:(void)
decode_interrupt_cb	ffplay.c	/^static int decode_interrupt_cb(void)$/;"	f	file:	signature:(void)
decode_interrupt_cb	tutorial08.c	/^int decode_interrupt_cb(void) {$/;"	f	signature:(void)
decode_thread	tutorial08.c	/^int decode_thread(void *arg) {$/;"	f	signature:(void *arg)
decoder_reorder_pts	ffplay.c	/^static int decoder_reorder_pts= -1;$/;"	v	file:
digital	plf_av_source.h	/^	} digital;$/;"	m	union:__anon142	typeref:struct:__anon142::__anon151
direct_gain	dsp_ioctl.h	/^    AUDIF_SUNSUR_Gain_e direct_gain;$/;"	m	struct:__anon23
direct_gain	tvfe_audio.h	/^    TVFE_Audio_SUNSUR_Gain_e direct_gain;$/;"	m	struct:__anon155
disc_type	dsp_ioctl.h	/^		UINT8 disc_type;$/;"	m	struct:TVFE_Audio_CMD::__anon45
display_disable	ffplay.c	/^static int display_disable;$/;"	v	file:
do_exit	ffplay.c	/^static void do_exit(void)$/;"	f	file:	signature:(void)
duration	ffplay.c	/^static int64_t duration = AV_NOPTS_VALUE;$/;"	v	file:
dwBytePerSec	wave_fmt.h	/^	UINT32	dwBytePerSec;$/;"	m	struct:_wmaheader
dwHeadBitrate	wave_fmt.h	/^    UINT32	dwHeadBitrate	;\/\/__attribute__ ((packed));$/;"	m	struct:mpeg1waveformat_tag
dwPTSHigh	wave_fmt.h	/^    UINT32	dwPTSHigh		;\/\/__attribute__ ((packed));$/;"	m	struct:mpeg1waveformat_tag
dwPTSLow	wave_fmt.h	/^    UINT32	dwPTSLow		;\/\/__attribute__ ((packed));$/;"	m	struct:mpeg1waveformat_tag
dwSampPerBlk	wave_fmt.h	/^	UINT32	dwSampPerBlk;$/;"	m	struct:_wmaheader
dwSampRate	wave_fmt.h	/^	UINT32	dwSampRate;$/;"	m	struct:_wmaheader
dwSamplesPerBlock	wave_fmt.h	/^    UINT32      dwSamplesPerBlock;$/;"	m	struct:tWMAUDIO2WAVEFORMAT
dwSamplesPerBlockH	wave_fmt.h	/^    UINT16	dwSamplesPerBlockH;$/;"	m	struct:tWAVEFORMATEX2
dwSamplesPerBlockL	wave_fmt.h	/^    UINT16	dwSamplesPerBlockL; \/\/ alignment not match, can't get UINT32$/;"	m	struct:tWAVEFORMATEX2
dwSuperBlockAlign	wave_fmt.h	/^    UINT32      dwSuperBlockAlign;$/;"	m	struct:tWMAUDIO2WAVEFORMAT
eAction	tvfe_api.h	/^	TVFE_AudioAUXAction_e eAction;$/;"	m	struct:__anon114
eAction	tvfe_api.h	/^	TVFE_AudioAUXAction_e eAction;$/;"	m	struct:__anon115
eAspectRatio	tvfe_api.h	/^	TVFE_MpegAspectRatio_e eAspectRatio;$/;"	m	struct:__anon109
eAudioPri	plf_av_source.h	/^	PLF_AVPin_e 		eAudioPri;$/;"	m	struct:__anon152
eFrameRatio	tvfe_api.h	/^	TVFE_MpegFrameRatio_e eFrameRatio;$/;"	m	struct:__anon109
eLPin	tvfe_api.h	/^	TVFEAudioOutputConfig_e eLPin;$/;"	m	struct:__anon113
eMethod	tvfe_api.h	/^	TVFE_AudioReportMethod_t		eMethod;$/;"	m	struct:__anon124
eMode	dsp_ioctl.h	/^    Aud_AudioAVLMode_t eMode;$/;"	m	struct:__anon22
eMode	tvfe_api.h	/^    TVFE_AudioSIFAvailableMode_e eMode;$/;"	m	struct:__anon120
ePath	tvfe_api.h	/^	TVFE_AudioPath_e ePath;$/;"	m	struct:__anon113
ePath	tvfe_api.h	/^	TVFE_AudioPath_e ePath;$/;"	m	struct:__anon114
ePowerControl	dsp_ioctl.h	/^		TVFE_AudioPowerContro_e ePowerControl;$/;"	m	struct:TVFE_Audio_CMD::__anon49
eProgStatus	avplayer.c	/^}eProgStatus;$/;"	t	typeref:enum:__anon153	file:
eRPin	tvfe_api.h	/^	TVFEAudioOutputConfig_e eRPin;$/;"	m	struct:__anon113
eRetMode	tvfe_api.h	/^    TVFE_AudioSIFAvailableMode_e 	eRetMode;$/;"	m	struct:__anon124
eRetStandard	tvfe_api.h	/^    TVFE_AudioSIFStandard_t   		eRetStandard;$/;"	m	struct:__anon124
eSIFAvailableMode	dsp_ioctl.h	/^		TVFE_AudioSIFAvailableMode_e eSIFAvailableMode;$/;"	m	struct:TVFE_Audio_CMD::__anon54
eSIFMode	dsp_ioctl.h	/^		TVFE_AudioSIFMode_e eSIFMode;$/;"	m	struct:TVFE_Audio_CMD::__anon53
eSIFStandardMask	dsp_ioctl.h	/^		TVFE_AudioSIFStandardMask_e eSIFStandardMask;$/;"	m	struct:TVFE_Audio_CMD::__anon50
eSource_Type_t	audio_api.c	/^} eSource_Type_t;$/;"	t	typeref:enum:__anon2	file:
eSrcVideoType	dsp_ioctl.h	/^		PLF_AVType_e eSrcVideoType;$/;"	m	struct:TVFE_Audio_CMD::__anon25
eStandard	tvfe_api.h	/^    TVFE_AudioSIFStandard_t   eStandard;$/;"	m	struct:__anon120
eState	tvfe_api.h	/^    AudioManagerState_t eState;$/;"	m	struct:__anon123
eTunerSoundStd	dsp_ioctl.h	/^		TVFE_SoundStd_e eTunerSoundStd;$/;"	m	struct:TVFE_Audio_CMD::__anon52
eType	plf_av_source.h	/^	PLF_AVType_e 		eType;$/;"	m	struct:__anon152
eType	tvfe_api.h	/^	TVFE_AudioOutputType_e eType;$/;"	m	struct:__anon113
eYUV_420_Planer	player.c	/^	eYUV_420_Planer,$/;"	e	enum:pic_format	file:
encode_chn_num	wave_fmt.h	/^	UINT16       encode_chn_num;$/;"	m	struct:tEncodeMPEGWAVEFORMAT
error_concealment	ffplay.c	/^static int error_concealment = 3;$/;"	v	file:
error_recognition	ffplay.c	/^static int error_recognition = FF_ER_CAREFUL;$/;"	v	file:
event_loop	ffplay.c	/^static void event_loop(void)$/;"	f	file:	signature:(void)
exit_on_keydown	ffplay.c	/^static int exit_on_keydown;$/;"	v	file:
exit_on_mousedown	ffplay.c	/^static int exit_on_mousedown;$/;"	v	file:
external_clock	avplayer.c	/^	double          external_clock; \/* external clock base *\/$/;"	m	struct:VideoState	file:
external_clock	ffplay.c	/^    double external_clock; \/* external clock base *\/$/;"	m	struct:VideoState	file:
external_clock	tutorial08.c	/^	double          external_clock; \/* external clock base *\/$/;"	m	struct:VideoState	file:
external_clock_time	avplayer.c	/^	int64_t         external_clock_time;$/;"	m	struct:VideoState	file:
external_clock_time	ffplay.c	/^    int64_t external_clock_time;$/;"	m	struct:VideoState	file:
external_clock_time	tutorial08.c	/^	int64_t         external_clock_time;$/;"	m	struct:VideoState	file:
fAppMuteFlag	tvfe_api.h	/^	Boolean fAppMuteFlag;$/;"	m	struct:__anon118
fBTSCPilotLevelOverflow	tvfe_api.h	/^    Boolean fBTSCPilotLevelOverflow;  \/\/use to record the pilot tone level overflow status$/;"	m	struct:__anon123
fEn	tvfe_api.h	/^    Boolean fEn;$/;"	m	struct:__anon121
fEnBypass	dsp_ioctl.h	/^    Boolean fEnBypass;$/;"	m	struct:__anon21
fEnPeakModeWithClipManagement	dsp_ioctl.h	/^    Boolean fEnPeakModeWithClipManagement;$/;"	m	struct:__anon22
fEnWeightFilter	dsp_ioctl.h	/^    Boolean fEnWeightFilter;$/;"	m	struct:__anon22
fHPDandTerminationCallBack	tvfe_api.h	/^typedef int (*fHPDandTerminationCallBack)(int iLevel);$/;"	t
fHysteresisFastMode	tvfe_api.h	/^    Boolean fHysteresisFastMode;$/;"	m	struct:__anon121
fISRMuteStatus	tvfe_api.h	/^	TVFE_VideoMuteStatus_e fISRMuteStatus;$/;"	m	struct:__anon118
fTVFEMuteFlag	tvfe_api.h	/^	Boolean fTVFEMuteFlag;$/;"	m	struct:__anon118
fTVFEPtr	tvfe_api.h	/^typedef void (*fTVFEPtr)(void);$/;"	t
fast	ffplay.c	/^static int fast = 0;$/;"	v	file:
fb_pin	plf_av_source.h	/^		PLF_AVPin_e fb_pin;$/;"	m	struct:__anon142::__anon143
fbp	player.c	/^	unsigned char *fbp;$/;"	m	struct:video_fb	file:
fdwFlags	wave_fmt.h	/^    UINT32	fdwFlags			;\/\/__attribute__ ((packed));$/;"	m	struct:mpeglayer3waveformat_tag
file_iformat	ffplay.c	/^static AVInputFormat *file_iformat;$/;"	v	file:
filename	avplayer.c	/^	char            filename[1024];$/;"	m	struct:VideoState	file:
filename	ffplay.c	/^    char filename[1024];$/;"	m	struct:VideoState	file:
filename	tutorial08.c	/^	char            filename[1024];$/;"	m	struct:VideoState	file:
fill_rectangle	ffplay.c	/^static inline void fill_rectangle(SDL_Surface *screen,$/;"	f	file:	signature:(SDL_Surface *screen, int x, int y, int w, int h, int color)
finfo	player.c	/^	struct fb_fix_screeninfo finfo;$/;"	m	struct:video_fb	typeref:struct:video_fb::fb_fix_screeninfo	file:
finput	player.c	/^	char finput[256];$/;"	m	struct:options	file:
first_pkt	avplayer.c	/^    AVPacketList *first_pkt, *last_pkt;$/;"	m	struct:PacketQueue	file:
first_pkt	ffplay.c	/^    AVPacketList *first_pkt, *last_pkt;$/;"	m	struct:PacketQueue	file:
first_pkt	tutorial08.c	/^	AVPacketList *first_pkt, *last_pkt;$/;"	m	struct:PacketQueue	file:
flush_pkt	avplayer.c	/^static AVPacket flush_pkt;$/;"	v	file:
flush_pkt	ffplay.c	/^static AVPacket flush_pkt;$/;"	v	file:
flush_pkt	tutorial08.c	/^AVPacket flush_pkt;$/;"	v
format	player.c	/^	int format;$/;"	m	struct:audio_dsp	file:
foutput1	player.c	/^	char foutput1[256];$/;"	m	struct:options	file:
foutput2	player.c	/^	char foutput2[256];$/;"	m	struct:options	file:
frame	ffplay.c	/^    AVFrame *frame;$/;"	m	struct:__anon5	file:
frameRGB	player.c	/^	AVFrame *frameRGB;$/;"	m	struct:video_fb	file:
frame_height	ffplay.c	/^static int frame_height = 0;$/;"	v	file:
frame_last_delay	avplayer.c	/^	double          frame_last_delay;$/;"	m	struct:VideoState	file:
frame_last_delay	ffplay.c	/^    double frame_last_delay;$/;"	m	struct:VideoState	file:
frame_last_delay	tutorial08.c	/^	double          frame_last_delay;$/;"	m	struct:VideoState	file:
frame_last_pts	avplayer.c	/^	double          frame_last_pts;$/;"	m	struct:VideoState	file:
frame_last_pts	ffplay.c	/^    double frame_last_pts;$/;"	m	struct:VideoState	file:
frame_last_pts	tutorial08.c	/^	double          frame_last_pts;$/;"	m	struct:VideoState	file:
frame_pix_fmt	ffplay.c	/^static enum PixelFormat frame_pix_fmt = PIX_FMT_NONE;$/;"	v	typeref:enum:PixelFormat	file:
frame_timer	avplayer.c	/^	double          frame_timer;$/;"	m	struct:VideoState	file:
frame_timer	ffplay.c	/^    double frame_timer;$/;"	m	struct:VideoState	file:
frame_timer	tutorial08.c	/^	double          frame_timer;$/;"	m	struct:VideoState	file:
frame_width	ffplay.c	/^static int frame_width = 0;$/;"	v	file:
framedrop	ffplay.c	/^static int framedrop=-1;$/;"	v	file:
frames	player.c	/^	int frames;$/;"	m	struct:options	file:
free_subpicture	ffplay.c	/^static void free_subpicture(SubPicture *sp)$/;"	f	file:	signature:(SubPicture *sp)
fs_pin	plf_av_source.h	/^		PLF_AVPin_e fs_pin;$/;"	m	struct:__anon142::__anon143
fs_pin	plf_av_source.h	/^		PLF_AVPin_e fs_pin;$/;"	m	struct:__anon142::__anon144
fs_pin	plf_av_source.h	/^		PLF_AVPin_e fs_pin;$/;"	m	struct:__anon142::__anon145
fs_screen_height	ffplay.c	/^static int fs_screen_height;$/;"	v	file:
fs_screen_width	ffplay.c	/^static int fs_screen_width;$/;"	v	file:
fwHeadFlags	wave_fmt.h	/^    UINT16	fwHeadFlags		;\/\/__attribute__ ((packed));$/;"	m	struct:mpeg1waveformat_tag
fwHeadLayer	wave_fmt.h	/^    UINT16	fwHeadLayer		;\/\/__attribute__ ((packed));$/;"	m	struct:mpeg1waveformat_tag
fwHeadMode	wave_fmt.h	/^    UINT16	fwHeadMode		;\/\/__attribute__ ((packed));$/;"	m	struct:mpeg1waveformat_tag
fwHeadModeExt	wave_fmt.h	/^    UINT16	fwHeadModeExt	;\/\/__attribute__ ((packed));$/;"	m	struct:mpeg1waveformat_tag
g_AudioSoundModeEqualizerSetting	audio_api.c	/^TVFE_Audio_Equalizer_Config_t g_AudioSoundModeEqualizerSetting[APP_AUDIO_MODE_MAX] =$/;"	v
g_AudioSoundModeEqualizerSetting_Surround_ON	audio_api.c	/^TVFE_Audio_Equalizer_Config_t g_AudioSoundModeEqualizerSetting_Surround_ON[APP_AUDIO_MODE_MAX] =$/;"	v
g_AudioSoundModeSetting	audio_api.c	/^APP_AudioSoundModeSetting_t g_AudioSoundModeSetting[APP_AUDIO_MODE_MAX - 1] =$/;"	v
g_opt_saveframe	avplayer.c	/^static g_opt_saveframe = 0;$/;"	v	file:
g_pin	plf_av_source.h	/^		PLF_AVPin_e g_pin;$/;"	m	struct:__anon142::__anon143
g_pin	plf_av_source.h	/^		PLF_AVPin_e g_pin;$/;"	m	struct:__anon142::__anon148
genpts	ffplay.c	/^static int genpts = 0;$/;"	v	file:
get_audio_clock	avplayer.c	/^static double get_audio_clock(VideoState *is) {$/;"	f	file:	signature:(VideoState *is)
get_audio_clock	ffplay.c	/^static double get_audio_clock(VideoState *is)$/;"	f	file:	signature:(VideoState *is)
get_audio_clock	tutorial08.c	/^double get_audio_clock(VideoState *is) {$/;"	f	signature:(VideoState *is)
get_external_clock	avplayer.c	/^static double get_external_clock(VideoState *is) {$/;"	f	file:	signature:(VideoState *is)
get_external_clock	ffplay.c	/^static double get_external_clock(VideoState *is)$/;"	f	file:	signature:(VideoState *is)
get_external_clock	tutorial08.c	/^double get_external_clock(VideoState *is) {$/;"	f	signature:(VideoState *is)
get_master_clock	avplayer.c	/^static double get_master_clock(VideoState *is) {$/;"	f	file:	signature:(VideoState *is)
get_master_clock	ffplay.c	/^static double get_master_clock(VideoState *is)$/;"	f	file:	signature:(VideoState *is)
get_master_clock	tutorial08.c	/^double get_master_clock(VideoState *is) {$/;"	f	signature:(VideoState *is)
get_video_clock	avplayer.c	/^static double get_video_clock(VideoState *is) {$/;"	f	file:	signature:(VideoState *is)
get_video_clock	ffplay.c	/^static double get_video_clock(VideoState *is)$/;"	f	file:	signature:(VideoState *is)
get_video_clock	tutorial08.c	/^double get_video_clock(VideoState *is) {$/;"	f	signature:(VideoState *is)
get_video_frame	ffplay.c	/^static int get_video_frame(VideoState *is, AVFrame *frame, int64_t *pts, AVPacket *pkt)$/;"	f	file:	signature:(VideoState *is, AVFrame *frame, int64_t *pts, AVPacket *pkt)
global_video_pkt_pts	avplayer.c	/^uint64_t global_video_pkt_pts = AV_NOPTS_VALUE;$/;"	v
global_video_pkt_pts	tutorial08.c	/^uint64_t global_video_pkt_pts = AV_NOPTS_VALUE;$/;"	v
global_video_state	avplayer.c	/^VideoState *global_video_state;$/;"	v
global_video_state	ffplay.c	/^static VideoState *global_video_state;$/;"	v	file:
global_video_state	tutorial08.c	/^VideoState *global_video_state;$/;"	v
hdmi	plf_av_source.h	/^	} hdmi;$/;"	m	union:__anon142	typeref:struct:__anon142::__anon150
height	avplayer.c	/^    int width, height; \/* source height & width *\/$/;"	m	struct:VideoPicture	file:
height	ffplay.c	/^    int width, height, xleft, ytop;$/;"	m	struct:VideoState	file:
height	ffplay.c	/^    int width, height; \/* source height & width *\/$/;"	m	struct:VideoPicture	file:
height	tutorial08.c	/^	int width, height; \/* source height & width *\/$/;"	m	struct:VideoPicture	file:
help	cyg-resolve-mips.pl	/^sub help()$/;"	s
i	playback.c	/^int             i,videoCount,audioCount, videoStream,audioStream;$/;"	v
ic	ffplay.c	/^    AVFormatContext *ic;$/;"	m	struct:VideoState	file:
idct	ffplay.c	/^static int idct = FF_IDCT_AUTO;$/;"	v	file:
iformat	ffplay.c	/^    AVInputFormat *iformat;$/;"	m	struct:VideoState	file:
img_convert_ctx	ffplay.c	/^    struct SwsContext *img_convert_ctx;$/;"	m	struct:VideoState	typeref:struct:VideoState::SwsContext	file:
input_config_props	ffplay.c	/^static int input_config_props(AVFilterLink *link)$/;"	f	file:	signature:(AVFilterLink *link)
input_filename	ffplay.c	/^static const char *input_filename;$/;"	v	file:
input_filter	ffplay.c	/^static AVFilter input_filter =$/;"	v	file:
input_get_buffer	ffplay.c	/^static int input_get_buffer(AVCodecContext *codec, AVFrame *pic)$/;"	f	file:	signature:(AVCodecContext *codec, AVFrame *pic)
input_init	ffplay.c	/^static int input_init(AVFilterContext *ctx, const char *args, void *opaque)$/;"	f	file:	signature:(AVFilterContext *ctx, const char *args, void *opaque)
input_mode	wave_fmt.h	/^	UINT16       input_mode;$/;"	m	struct:tEncodeMPEGWAVEFORMAT
input_query_formats	ffplay.c	/^static int input_query_formats(AVFilterContext *ctx)$/;"	f	file:	signature:(AVFilterContext *ctx)
input_reget_buffer	ffplay.c	/^static int input_reget_buffer(AVCodecContext *codec, AVFrame *pic)$/;"	f	file:	signature:(AVCodecContext *codec, AVFrame *pic)
input_release_buffer	ffplay.c	/^static void input_release_buffer(AVCodecContext *codec, AVFrame *pic)$/;"	f	file:	signature:(AVCodecContext *codec, AVFrame *pic)
input_request_frame	ffplay.c	/^static int input_request_frame(AVFilterLink *link)$/;"	f	file:	signature:(AVFilterLink *link)
input_uninit	ffplay.c	/^static void input_uninit(AVFilterContext *ctx)$/;"	f	file:	signature:(AVFilterContext *ctx)
is	ffplay.c	/^    VideoState *is;$/;"	m	struct:__anon5	file:
is_full_screen	ffplay.c	/^static int is_full_screen;$/;"	v	file:
last_i_start	ffplay.c	/^    int last_i_start;$/;"	m	struct:VideoState	file:
last_paused	ffplay.c	/^    int last_paused;$/;"	m	struct:VideoState	file:
last_pkt	avplayer.c	/^    AVPacketList *first_pkt, *last_pkt;$/;"	m	struct:PacketQueue	file:
last_pkt	ffplay.c	/^    AVPacketList *first_pkt, *last_pkt;$/;"	m	struct:PacketQueue	file:
last_pkt	tutorial08.c	/^	AVPacketList *first_pkt, *last_pkt;$/;"	m	struct:PacketQueue	file:
level	cyg-profile.c	/^static int level=0;$/;"	v	file:
location	mtrace-mips	/^sub location {$/;"	s
log_callback	player.c	/^static void log_callback(void* ptr, int level, const char* fmt, va_list vl)$/;"	f	file:	signature:(void* ptr, int level, const char* fmt, va_list vl)
logfile	cyg-profile.c	/^static FILE *logfile=NULL;$/;"	v	file:
loop	ffplay.c	/^static int loop=1;$/;"	v	file:
lowres	ffplay.c	/^static int lowres = 0;$/;"	v	file:
lstart	player.c	/^	int64_t lstart;$/;"	m	struct:options	file:
main	audio_api.c	/^int main()$/;"	f
main	avplayer.c	/^int main (int argc, char **argv)$/;"	f	signature:(int argc, char **argv)
main	cyg-resolve-mips.pl	/^sub main()$/;"	s
main	dsp_ioctl.c	/^int main (int argc, char **argv)$/;"	f	signature:(int argc, char **argv)
main	ffplay.c	/^int main(int argc, char **argv)$/;"	f	signature:(int argc, char **argv)
main	mediainfo.c	/^int main(int argc, char *argv[]) {$/;"	f	signature:(int argc, char *argv[])
main	playback.c	/^int main (int argc, char **argv)$/;"	f	signature:(int argc, char **argv)
main	player.c	/^int main(int argc, char **argv)$/;"	f	signature:(int argc, char **argv)
main	tutorial08.c	/^int main(int argc, char *argv[]) {$/;"	f	signature:(int argc, char *argv[])
main	tutorial08.c	24;"	d	file:
main_phase	tvfe_audio.h	/^    TVFE_Audio_Pcm_Output_Phase_e main_phase;$/;"	m	struct:_TVFE_Audio_Pcm_Output_Phase_Config_t
map_formats	player.c	/^int map_formats(enum SampleFormat format)$/;"	f	signature:(enum SampleFormat format)
mpeg1waveformat_tag	wave_fmt.h	/^typedef struct mpeg1waveformat_tag {$/;"	s
mpeg_param_st	tvfe_api.h	/^} mpeg_param_st;$/;"	t	typeref:struct:__anon109
mpeglayer3waveformat_tag	wave_fmt.h	/^typedef struct mpeglayer3waveformat_tag {$/;"	s
mute	dsp_ioctl.h	/^		TVFE_BOOL mute;$/;"	m	struct:TVFE_Audio_CMD::__anon46
mute	dsp_ioctl.h	/^		TVFE_BOOL mute;$/;"	m	struct:TVFE_Audio_CMD::__anon47
mutex	avplayer.c	/^    pthread_mutex_t mutex;$/;"	m	struct:PacketQueue	file:
mutex	ffplay.c	/^    SDL_mutex *mutex;$/;"	m	struct:PacketQueue	file:
mutex	tutorial08.c	/^	SDL_mutex *mutex;$/;"	m	struct:PacketQueue	file:
nAvgBytesPerSec	wave_fmt.h	/^    UINT32	nAvgBytesPerSec  ;$/;"	m	struct:tWAVEFORMATEX2
nAvgBytesPerSec	wave_fmt.h	/^    UINT32	nAvgBytesPerSec  ;\/\/__attribute__ ((packed));   \/* for buffer estimation *\/$/;"	m	struct:tWAVEFORMATEX
nBlockAlign	wave_fmt.h	/^    UINT16	nBlockAlign      ;$/;"	m	struct:tWAVEFORMATEX2
nBlockAlign	wave_fmt.h	/^    UINT16	nBlockAlign     ; \/\/__attribute__ ((packed));   \/* block size of data *\/$/;"	m	struct:tWAVEFORMATEX
nBlockSize	wave_fmt.h	/^    UINT16	nBlockSize			;\/\/__attribute__ ((packed));$/;"	m	struct:mpeglayer3waveformat_tag
nChannelMask	wave_fmt.h	/^    UINT16      nChannelMask;$/;"	m	struct:tWMAPROWAVEFORMAT
nChannels	wave_fmt.h	/^    UINT16	nChannels        ;\/\/__attribute__ ((packed));   \/* number of channels (i.e. mono, stereo...) *\/$/;"	m	struct:tWAVEFORMATEX
nChannels	wave_fmt.h	/^    UINT16	nChannels       ; $/;"	m	struct:tWAVEFORMATEX2
nCodecDelay	wave_fmt.h	/^    UINT16	nCodecDelay			;\/\/__attribute__ ((packed));$/;"	m	struct:mpeglayer3waveformat_tag
nEncodeOpt	wave_fmt.h	/^    UINT16      nEncodeOpt;$/;"	m	struct:tWMAPROWAVEFORMAT
nFrameBits	wave_fmt.h	/^	UINT16   nFrameBits;$/;"	m	struct:tRAwaveformat_tag
nFramesPerBlock	wave_fmt.h	/^    UINT16	nFramesPerBlock		;\/\/__attribute__ ((packed));$/;"	m	struct:mpeglayer3waveformat_tag
nRegions	wave_fmt.h	/^	UINT16   nRegions;$/;"	m	struct:tRAwaveformat_tag
nSamples	wave_fmt.h	/^	UINT16   nSamples;	$/;"	m	struct:tRAwaveformat_tag
nSamplesPerBlock	wave_fmt.h	/^	UINT16	nSamplesPerBlock;$/;"	m	struct:tPCMwaveformat_tag
nSamplesPerSec	wave_fmt.h	/^    UINT32	nSamplesPerSec   ;$/;"	m	struct:tWAVEFORMATEX2
nSamplesPerSec	wave_fmt.h	/^    UINT32	nSamplesPerSec   ;\/\/__attribute__ ((packed));   \/* sample rate *\/$/;"	m	struct:tWAVEFORMATEX
nb_packets	avplayer.c	/^    int nb_packets;$/;"	m	struct:PacketQueue	file:
nb_packets	ffplay.c	/^    int nb_packets;$/;"	m	struct:PacketQueue	file:
nb_packets	tutorial08.c	/^	int nb_packets;$/;"	m	struct:PacketQueue	file:
no_background	ffplay.c	/^    int no_background;$/;"	m	struct:VideoState	file:
nodec	player.c	/^	int nodec;$/;"	m	struct:options	file:
numBytes	avplayer.c	/^	int             numBytes;$/;"	m	struct:VideoState	file:
open_video	player.c	/^int open_video(struct video_fb *fb, int x, int y)$/;"	f	signature:(struct video_fb *fb, int x, int y)
openlogfile	cyg-profile.c	/^openlogfile (const char *filename)$/;"	f	file:	signature:(const char *filename)
openlogfile	cyg-profile.c	/^static FILE *openlogfile (const char *filename)$/;"	p	file:	signature:(const char *filename)
opt_duration	ffplay.c	/^static int opt_duration(const char *opt, const char *arg)$/;"	f	file:	signature:(const char *opt, const char *arg)
opt_format	ffplay.c	/^static int opt_format(const char *opt, const char *arg)$/;"	f	file:	signature:(const char *opt, const char *arg)
opt_frame_pix_fmt	ffplay.c	/^static int opt_frame_pix_fmt(const char *opt, const char *arg)$/;"	f	file:	signature:(const char *opt, const char *arg)
opt_frame_size	ffplay.c	/^static int opt_frame_size(const char *opt, const char *arg)$/;"	f	file:	signature:(const char *opt, const char *arg)
opt_height	ffplay.c	/^static int opt_height(const char *opt, const char *arg)$/;"	f	file:	signature:(const char *opt, const char *arg)
opt_help	ffplay.c	/^static int opt_help(const char *opt, const char *arg)$/;"	f	file:	signature:(const char *opt, const char *arg)
opt_help	ffplay.c	/^static int opt_help(const char *opt, const char *arg);$/;"	p	file:	signature:(const char *opt, const char *arg)
opt_input_file	ffplay.c	/^static int opt_input_file(const char *opt, const char *filename)$/;"	f	file:	signature:(const char *opt, const char *filename)
opt_seek	ffplay.c	/^static int opt_seek(const char *opt, const char *arg)$/;"	f	file:	signature:(const char *opt, const char *arg)
opt_show_mode	ffplay.c	/^static int opt_show_mode(const char *opt, const char *arg)$/;"	f	file:	signature:(const char *opt, const char *arg)
opt_sync	ffplay.c	/^static int opt_sync(const char *opt, const char *arg)$/;"	f	file:	signature:(const char *opt, const char *arg)
opt_thread_count	ffplay.c	/^static int opt_thread_count(const char *opt, const char *arg)$/;"	f	file:	signature:(const char *opt, const char *arg)
opt_width	ffplay.c	/^static int opt_width(const char *opt, const char *arg)$/;"	f	file:	signature:(const char *opt, const char *arg)
optimize_st	tvfe_api.h	/^} optimize_st;$/;"	t	typeref:struct:__anon106
options	ffplay.c	/^static const OptionDef options[] = {$/;"	v	file:
options	player.c	/^struct options$/;"	s	file:
our_get_buffer	avplayer.c	/^int our_get_buffer(struct AVCodecContext *c, AVFrame *pic) $/;"	f	signature:(struct AVCodecContext *c, AVFrame *pic)
our_get_buffer	tutorial08.c	/^int our_get_buffer(struct AVCodecContext *c, AVFrame *pic) {$/;"	f	signature:(struct AVCodecContext *c, AVFrame *pic)
our_release_buffer	avplayer.c	/^void our_release_buffer(struct AVCodecContext *c, AVFrame *pic) $/;"	f	signature:(struct AVCodecContext *c, AVFrame *pic)
our_release_buffer	tutorial08.c	/^void our_release_buffer(struct AVCodecContext *c, AVFrame *pic) {$/;"	f	signature:(struct AVCodecContext *c, AVFrame *pic)
out_video_filter	ffplay.c	/^    AVFilterContext *out_video_filter;          \/\/\/<the last filter in the video chain$/;"	m	struct:VideoState	file:
pCodec	playback.c	/^AVCodec         *pCodec;$/;"	v
pCodecCtx	playback.c	/^AVCodecContext  *pCodecCtx;$/;"	v
pExternal_Mute_Control	tvfe_audio.h	/^	TVFE_Audio_MuteFunctionPtr	pExternal_Mute_Control;	\/\/mute control for external device$/;"	m	struct:_TVFE_Audio_Mute_t
pFormatCtx	avplayer.c	/^	AVFormatContext *pFormatCtx;$/;"	m	struct:VideoState	file:
pFormatCtx	playback.c	/^AVFormatContext *pFormatCtx;$/;"	v
pFormatCtx	tutorial08.c	/^	AVFormatContext *pFormatCtx;$/;"	m	struct:VideoState	file:
pFrame	playback.c	/^AVFrame         *pFrame; $/;"	v
pFrameRGB	avplayer.c	/^	AVFrame         *pFrameRGB;$/;"	m	struct:VideoState	file:
pFrameRGB	playback.c	/^AVFrame         *pFrameRGB;$/;"	v
pVideoCodecCtx	avplayer.c	/^	AVCodecContext  *pVideoCodecCtx;$/;"	m	struct:VideoState	file:
packet	playback.c	/^AVPacket        packet;$/;"	v
packet_queue_abort	avplayer.c	/^static void packet_queue_abort(PacketQueue *q)$/;"	f	file:	signature:(PacketQueue *q)
packet_queue_abort	ffplay.c	/^static void packet_queue_abort(PacketQueue *q)$/;"	f	file:	signature:(PacketQueue *q)
packet_queue_end	avplayer.c	/^static void packet_queue_end(PacketQueue *q)$/;"	f	file:	signature:(PacketQueue *q)
packet_queue_end	ffplay.c	/^static void packet_queue_end(PacketQueue *q)$/;"	f	file:	signature:(PacketQueue *q)
packet_queue_flush	avplayer.c	/^static void packet_queue_flush(PacketQueue *q)$/;"	f	file:	signature:(PacketQueue *q)
packet_queue_flush	ffplay.c	/^static void packet_queue_flush(PacketQueue *q)$/;"	f	file:	signature:(PacketQueue *q)
packet_queue_flush	tutorial08.c	/^static void packet_queue_flush(PacketQueue *q) {$/;"	f	file:	signature:(PacketQueue *q)
packet_queue_get	avplayer.c	/^static int packet_queue_get(PacketQueue *q, AVPacket *pkt, int block)$/;"	f	file:	signature:(PacketQueue *q, AVPacket *pkt, int block)
packet_queue_get	ffplay.c	/^static int packet_queue_get(PacketQueue *q, AVPacket *pkt, int block)$/;"	f	file:	signature:(PacketQueue *q, AVPacket *pkt, int block)
packet_queue_get	tutorial08.c	/^static int packet_queue_get(PacketQueue *q, AVPacket *pkt, int block) {$/;"	f	file:	signature:(PacketQueue *q, AVPacket *pkt, int block)
packet_queue_init	avplayer.c	/^static void packet_queue_init(PacketQueue *q)$/;"	f	file:	signature:(PacketQueue *q)
packet_queue_init	ffplay.c	/^static void packet_queue_init(PacketQueue *q)$/;"	f	file:	signature:(PacketQueue *q)
packet_queue_init	tutorial08.c	/^void packet_queue_init(PacketQueue *q) {$/;"	f	signature:(PacketQueue *q)
packet_queue_put	avplayer.c	/^static int packet_queue_put(PacketQueue *q, AVPacket *pkt)$/;"	f	file:	signature:(PacketQueue *q, AVPacket *pkt)
packet_queue_put	ffplay.c	/^static int packet_queue_put(PacketQueue *q, AVPacket *pkt)$/;"	f	file:	signature:(PacketQueue *q, AVPacket *pkt)
packet_queue_put	tutorial08.c	/^int packet_queue_put(PacketQueue *q, AVPacket *pkt) {$/;"	f	signature:(PacketQueue *q, AVPacket *pkt)
parse_options	player.c	/^int parse_options(struct options *opts, int argc, char** argv)$/;"	f	signature:(struct options *opts, int argc, char** argv)
parse_tid	avplayer.c	/^	pthread_t      	parse_tid;$/;"	m	struct:VideoState	file:
parse_tid	tutorial08.c	/^	SDL_Thread      *parse_tid;$/;"	m	struct:VideoState	file:
parser_done	avplayer.c	/^	int             parser_done;$/;"	m	struct:VideoState	file:
paused	ffplay.c	/^    int paused;$/;"	m	struct:VideoState	file:
pb_pin	plf_av_source.h	/^		PLF_AVPin_e pb_pin;$/;"	m	struct:__anon142::__anon149
pic_format	player.c	/^enum pic_format$/;"	g	file:
picref	ffplay.c	/^    AVFilterBufferRef *picref;$/;"	m	struct:VideoPicture	file:
pictq	avplayer.c	/^	VideoPicture    pictq[VIDEO_PICTURE_QUEUE_SIZE];$/;"	m	struct:VideoState	file:
pictq	ffplay.c	/^    VideoPicture pictq[VIDEO_PICTURE_QUEUE_SIZE];$/;"	m	struct:VideoState	file:
pictq	tutorial08.c	/^	VideoPicture    pictq[VIDEO_PICTURE_QUEUE_SIZE];$/;"	m	struct:VideoState	file:
pictq_cond	avplayer.c	/^	pthread_cond_t  *pictq_cond;$/;"	m	struct:VideoState	file:
pictq_cond	ffplay.c	/^    SDL_cond *pictq_cond;$/;"	m	struct:VideoState	file:
pictq_cond	tutorial08.c	/^	SDL_cond        *pictq_cond;$/;"	m	struct:VideoState	file:
pictq_mutex	avplayer.c	/^	pthread_mutex_t *pictq_mutex;$/;"	m	struct:VideoState	file:
pictq_mutex	ffplay.c	/^    SDL_mutex *pictq_mutex;$/;"	m	struct:VideoState	file:
pictq_mutex	tutorial08.c	/^	SDL_mutex       *pictq_mutex;$/;"	m	struct:VideoState	file:
pictq_rindex	avplayer.c	/^	int             pictq_size, pictq_rindex, pictq_windex;$/;"	m	struct:VideoState	file:
pictq_rindex	ffplay.c	/^    int pictq_size, pictq_rindex, pictq_windex;$/;"	m	struct:VideoState	file:
pictq_rindex	tutorial08.c	/^	int             pictq_size, pictq_rindex, pictq_windex;$/;"	m	struct:VideoState	file:
pictq_size	avplayer.c	/^	int             pictq_size, pictq_rindex, pictq_windex;$/;"	m	struct:VideoState	file:
pictq_size	ffplay.c	/^    int pictq_size, pictq_rindex, pictq_windex;$/;"	m	struct:VideoState	file:
pictq_size	tutorial08.c	/^	int             pictq_size, pictq_rindex, pictq_windex;$/;"	m	struct:VideoState	file:
pictq_windex	avplayer.c	/^	int             pictq_size, pictq_rindex, pictq_windex;$/;"	m	struct:VideoState	file:
pictq_windex	ffplay.c	/^    int pictq_size, pictq_rindex, pictq_windex;$/;"	m	struct:VideoState	file:
pictq_windex	tutorial08.c	/^	int             pictq_size, pictq_rindex, pictq_windex;$/;"	m	struct:VideoState	file:
pin	plf_av_source.h	/^		PLF_AVPin_e pin;$/;"	m	struct:__anon142::__anon146
pin	plf_av_source.h	/^		PLF_AVPin_e pin;$/;"	m	struct:__anon142::__anon150
pin	plf_av_source.h	/^		PLF_AVPin_e pin;$/;"	m	struct:__anon142::__anon151
pix_fmt	avplayer.c	/^    enum PixelFormat pix_fmt;$/;"	m	struct:VideoPicture	typeref:enum:VideoPicture::PixelFormat	file:
pix_fmt	ffplay.c	/^    enum PixelFormat pix_fmt;$/;"	m	struct:VideoPicture	typeref:enum:VideoPicture::PixelFormat	file:
play_pcm	player.c	/^int play_pcm(struct audio_dsp* dsp, unsigned char *buf, int size)$/;"	f	signature:(struct audio_dsp* dsp, unsigned char *buf, int size)
polarity	tvfe_api.h	/^	} polarity;$/;"	m	struct:__anon103	typeref:struct:__anon103::__anon104
pos	avplayer.c	/^    int64_t pos;            \/\/\/<byte position in file$/;"	m	struct:VideoPicture	file:
pos	ffplay.c	/^    int64_t pos;                                 \/\/\/<byte position in file$/;"	m	struct:VideoPicture	file:
pr_pin	plf_av_source.h	/^		PLF_AVPin_e pr_pin;$/;"	m	struct:__anon142::__anon149
program_birth_year	ffplay.c	/^const int program_birth_year = 2003;$/;"	v
program_name	ffplay.c	/^const char program_name[] = "ffplay";$/;"	v
pts	avplayer.c	/^    double pts;             \/\/\/<presentation time stamp for this picture$/;"	m	struct:VideoPicture	file:
pts	avplayer.c	/^    double pts; \/* presentation time stamp for this picture *\/$/;"	m	struct:SubPicture	file:
pts	ffplay.c	/^    double pts;                                  \/\/\/<presentation time stamp for this picture$/;"	m	struct:VideoPicture	file:
pts	ffplay.c	/^    double pts; \/* presentation time stamp for this picture *\/$/;"	m	struct:SubPicture	file:
pts	tutorial08.c	/^	double pts;$/;"	m	struct:VideoPicture	file:
queue_picture	ffplay.c	/^static int queue_picture(VideoState *is, AVFrame *src_frame, double pts1, int64_t pos)$/;"	f	file:	signature:(VideoState *is, AVFrame *src_frame, double pts1, int64_t pos)
queue_picture	tutorial08.c	/^int queue_picture(VideoState *is, AVFrame *pFrame, double pts) {$/;"	f	signature:(VideoState *is, AVFrame *pFrame, double pts)
quit	avplayer.c	/^	int             quit;$/;"	m	struct:VideoState	file:
quit	tutorial08.c	/^	int             quit;$/;"	m	struct:VideoState	file:
r_pin	plf_av_source.h	/^		PLF_AVPin_e r_pin;$/;"	m	struct:__anon142::__anon143
r_pin	plf_av_source.h	/^		PLF_AVPin_e r_pin;$/;"	m	struct:__anon142::__anon148
ramp_flag	dsp_ioctl.h	/^		UINT8 ramp_flag;$/;"	m	struct:TVFE_Audio_CMD::__anon40
rcsid	audio_api.c	/^static char const rcsid[] = "$Id: audio_api, v0.0.0.1 " __DATE__ " " __TIME__ " Mark Exp $";$/;"	v	file:
rcsid	avplayer.c	/^static char const rcsid[] = "$Id: avplayer, v0.1.0.0 " __DATE__ " " __TIME__ " Mark Exp $";$/;"	v	file:
rcsid	dsp_ioctl.c	/^static char const rcsid[] = "$Id: dsp_ioctl, v0.0.0.1 " __DATE__ " " __TIME__ " Mark Exp $";$/;"	v	file:
rcsid	mediainfo.c	/^static char const rcsid[] = "$Id: mediainfo, v0.0.0.1 " __DATE__ " " __TIME__ " Mark Exp $";$/;"	v	file:
rcsid	playback.c	/^static char const rcsid[] = "$Id: playback, v0.0.0.1 " __DATE__ " " __TIME__ " Mark Exp $";$/;"	v	file:
rdft	ffplay.c	/^    RDFTContext *rdft;$/;"	m	struct:VideoState	file:
rdft_bits	ffplay.c	/^    int rdft_bits;$/;"	m	struct:VideoState	file:
rdft_data	ffplay.c	/^    FFTSample *rdft_data;$/;"	m	struct:VideoState	file:
rdftspeed	ffplay.c	/^static int rdftspeed=20;$/;"	v	file:
read_pause_return	ffplay.c	/^    int read_pause_return;$/;"	m	struct:VideoState	file:
read_thread	ffplay.c	/^static int read_thread(void *arg)$/;"	f	file:	signature:(void *arg)
read_tid	ffplay.c	/^    SDL_Thread *read_tid;$/;"	m	struct:VideoState	file:
recoding_mode	wave_fmt.h	/^	UINT16       recoding_mode;$/;"	m	struct:tEncodeMPEGWAVEFORMAT
reformat_ctx	ffplay.c	/^    AVAudioConvert *reformat_ctx;$/;"	m	struct:VideoState	file:
refresh	ffplay.c	/^    int refresh;$/;"	m	struct:VideoState	file:
refresh_thread	ffplay.c	/^static int refresh_thread(void *opaque)$/;"	f	file:	signature:(void *opaque)
refresh_tid	ffplay.c	/^    SDL_Thread *refresh_tid;$/;"	m	struct:VideoState	file:
reserve	wave_fmt.h	/^    UINT8           reserve[30];$/;"	m	struct:tWAVFORMATMACRO
reserve0	wave_fmt.h	/^    UINT8       reserve0[10];$/;"	m	struct:tWMAPROWAVEFORMAT
reverb_gain	dsp_ioctl.h	/^    AUDIF_SUNSUR_Gain_e reverb_gain;$/;"	m	struct:__anon23
reverb_gain	tvfe_audio.h	/^    TVFE_Audio_SUNSUR_Gain_e reverb_gain;$/;"	m	struct:__anon155
rgb	plf_av_source.h	/^	} rgb;$/;"	m	union:__anon142	typeref:struct:__anon142::__anon148
sample_array	ffplay.c	/^    int16_t sample_array[SAMPLE_ARRAY_SIZE];$/;"	m	struct:VideoState	file:
sample_array_index	ffplay.c	/^    int sample_array_index;$/;"	m	struct:VideoState	file:
scart_av	plf_av_source.h	/^	} scart_av;$/;"	m	union:__anon142	typeref:struct:__anon142::__anon144
scart_av_rgb	plf_av_source.h	/^	} scart_av_rgb;$/;"	m	union:__anon142	typeref:struct:__anon142::__anon143
scart_sv	plf_av_source.h	/^	} scart_sv;$/;"	m	union:__anon142	typeref:struct:__anon142::__anon145
schedule_refresh	tutorial08.c	/^static void schedule_refresh(VideoState *is, int delay) {$/;"	f	file:	signature:(VideoState *is, int delay)
screen	ffplay.c	/^static SDL_Surface *screen;$/;"	v	file:
screen	tutorial08.c	/^SDL_Surface     *screen;$/;"	v
screen_height	ffplay.c	/^static int screen_height = 0;$/;"	v	file:
screen_width	ffplay.c	/^static int screen_width = 0;$/;"	v	file:
sdl_audio_callback	ffplay.c	/^static void sdl_audio_callback(void *opaque, Uint8 *stream, int len)$/;"	f	file:	signature:(void *opaque, Uint8 *stream, int len)
sdl_refresh_timer_cb	tutorial08.c	/^static Uint32 sdl_refresh_timer_cb(Uint32 interval, void *opaque) {$/;"	f	file:	signature:(Uint32 interval, void *opaque)
seek_by_bytes	ffplay.c	/^static int seek_by_bytes=-1;$/;"	v	file:
seek_flags	avplayer.c	/^	int             seek_flags;$/;"	m	struct:VideoState	file:
seek_flags	ffplay.c	/^    int seek_flags;$/;"	m	struct:VideoState	file:
seek_flags	tutorial08.c	/^	int             seek_flags;$/;"	m	struct:VideoState	file:
seek_pos	avplayer.c	/^	int64_t         seek_pos;$/;"	m	struct:VideoState	file:
seek_pos	ffplay.c	/^    int64_t seek_pos;$/;"	m	struct:VideoState	file:
seek_pos	tutorial08.c	/^	int64_t         seek_pos;$/;"	m	struct:VideoState	file:
seek_rel	ffplay.c	/^    int64_t seek_rel;$/;"	m	struct:VideoState	file:
seek_req	avplayer.c	/^	int             seek_req;$/;"	m	struct:VideoState	file:
seek_req	ffplay.c	/^    int seek_req;$/;"	m	struct:VideoState	file:
seek_req	tutorial08.c	/^	int             seek_req;$/;"	m	struct:VideoState	file:
set_audio	player.c	/^int set_audio(struct audio_dsp* dsp)$/;"	f	signature:(struct audio_dsp* dsp)
show_help	player.c	/^void show_help(char* program)$/;"	f	signature:(char* program)
show_mode	ffplay.c	/^    } show_mode;$/;"	m	struct:VideoState	typeref:enum:VideoState::ShowMode	file:
show_mode	ffplay.c	/^static enum ShowMode show_mode = SHOW_MODE_NONE;$/;"	v	typeref:enum:ShowMode	file:
show_status	ffplay.c	/^static int show_status = 1;$/;"	v	file:
show_usage	ffplay.c	/^static void show_usage(void)$/;"	f	file:	signature:(void)
size	avplayer.c	/^    int size;$/;"	m	struct:PacketQueue	file:
size	ffplay.c	/^    int size;$/;"	m	struct:PacketQueue	file:
size	tutorial08.c	/^	int size;$/;"	m	struct:PacketQueue	file:
skip_frame	ffplay.c	/^static enum AVDiscard skip_frame= AVDISCARD_DEFAULT;$/;"	v	typeref:enum:AVDiscard	file:
skip_frames	ffplay.c	/^    float skip_frames;$/;"	m	struct:VideoState	file:
skip_frames_index	ffplay.c	/^    float skip_frames_index;$/;"	m	struct:VideoState	file:
skip_idct	ffplay.c	/^static enum AVDiscard skip_idct= AVDISCARD_DEFAULT;$/;"	v	typeref:enum:AVDiscard	file:
skip_loop_filter	ffplay.c	/^static enum AVDiscard skip_loop_filter= AVDISCARD_DEFAULT;$/;"	v	typeref:enum:AVDiscard	file:
sog	tvfe_api.h	/^	} sog;$/;"	m	struct:__anon103	typeref:struct:__anon103::__anon105
sog_pin	plf_av_source.h	/^		PLF_AVPin_e sog_pin;$/;"	m	struct:__anon142::__anon148
soy_pin	plf_av_source.h	/^		PLF_AVPin_e soy_pin;$/;"	m	struct:__anon142::__anon149
speed	player.c	/^	int speed;$/;"	m	struct:audio_dsp	file:
start_time	ffplay.c	/^static int64_t start_time = AV_NOPTS_VALUE;$/;"	v	file:
step	ffplay.c	/^static int step = 0;$/;"	v	file:
step_to_next_frame	ffplay.c	/^static void step_to_next_frame(void)$/;"	f	file:	signature:(void)
streamId	player.c	/^	int streamId;$/;"	m	struct:options	file:
stream_close	ffplay.c	/^static void stream_close(VideoState *is)$/;"	f	file:	signature:(VideoState *is)
stream_component_close	ffplay.c	/^static void stream_component_close(VideoState *is, int stream_index)$/;"	f	file:	signature:(VideoState *is, int stream_index)
stream_component_open	ffplay.c	/^static int stream_component_open(VideoState *is, int stream_index)$/;"	f	file:	signature:(VideoState *is, int stream_index)
stream_component_open	tutorial08.c	/^int stream_component_open(VideoState *is, int stream_index) {$/;"	f	signature:(VideoState *is, int stream_index)
stream_cycle_channel	ffplay.c	/^static void stream_cycle_channel(VideoState *is, int codec_type)$/;"	f	file:	signature:(VideoState *is, int codec_type)
stream_open	ffplay.c	/^static VideoState *stream_open(const char *filename, AVInputFormat *iformat)$/;"	f	file:	signature:(const char *filename, AVInputFormat *iformat)
stream_seek	avplayer.c	/^void stream_seek(VideoState *is, int64_t pos, int rel) {$/;"	f	signature:(VideoState *is, int64_t pos, int rel)
stream_seek	ffplay.c	/^static void stream_seek(VideoState *is, int64_t pos, int64_t rel, int seek_by_bytes)$/;"	f	file:	signature:(VideoState *is, int64_t pos, int64_t rel, int seek_by_bytes)
stream_seek	tutorial08.c	/^void stream_seek(VideoState *is, int64_t pos, int rel) {$/;"	f	signature:(VideoState *is, int64_t pos, int rel)
stream_toggle_pause	ffplay.c	/^static void stream_toggle_pause(VideoState *is)$/;"	f	file:	signature:(VideoState *is)
sub	avplayer.c	/^    AVSubtitle sub;$/;"	m	struct:SubPicture	file:
sub	ffplay.c	/^    AVSubtitle sub;$/;"	m	struct:SubPicture	file:
subpq	ffplay.c	/^    SubPicture subpq[SUBPICTURE_QUEUE_SIZE];$/;"	m	struct:VideoState	file:
subpq_cond	ffplay.c	/^    SDL_cond *subpq_cond;$/;"	m	struct:VideoState	file:
subpq_mutex	ffplay.c	/^    SDL_mutex *subpq_mutex;$/;"	m	struct:VideoState	file:
subpq_rindex	ffplay.c	/^    int subpq_size, subpq_rindex, subpq_windex;$/;"	m	struct:VideoState	file:
subpq_size	ffplay.c	/^    int subpq_size, subpq_rindex, subpq_windex;$/;"	m	struct:VideoState	file:
subpq_windex	ffplay.c	/^    int subpq_size, subpq_rindex, subpq_windex;$/;"	m	struct:VideoState	file:
subtitle_st	ffplay.c	/^    AVStream *subtitle_st;$/;"	m	struct:VideoState	file:
subtitle_stream	ffplay.c	/^    int subtitle_stream;$/;"	m	struct:VideoState	file:
subtitle_stream_changed	ffplay.c	/^    int subtitle_stream_changed;$/;"	m	struct:VideoState	file:
subtitle_thread	ffplay.c	/^static int subtitle_thread(void *arg)$/;"	f	file:	signature:(void *arg)
subtitle_tid	ffplay.c	/^    SDL_Thread *subtitle_tid;$/;"	m	struct:VideoState	file:
subtitleq	ffplay.c	/^    PacketQueue subtitleq;$/;"	m	struct:VideoState	file:
svideo	plf_av_source.h	/^	} svideo;$/;"	m	union:__anon142	typeref:struct:__anon142::__anon147
sws_flags	ffplay.c	/^static int sws_flags = SWS_BICUBIC;$/;"	v	file:
synchronize_audio	ffplay.c	/^static int synchronize_audio(VideoState *is, short *samples,$/;"	f	file:	signature:(VideoState *is, short *samples, int samples_size1, double pts)
synchronize_audio	tutorial08.c	/^int synchronize_audio(VideoState *is, short *samples,$/;"	f	signature:(VideoState *is, short *samples, int samples_size, double pts)
synchronize_video	avplayer.c	/^double synchronize_video(VideoState *is, AVFrame *src_frame, double pts) $/;"	f	signature:(VideoState *is, AVFrame *src_frame, double pts)
synchronize_video	tutorial08.c	/^double synchronize_video(VideoState *is, AVFrame *src_frame, double pts) {$/;"	f	signature:(VideoState *is, AVFrame *src_frame, double pts)
tAACWAVEFORMAT	wave_fmt.h	/^typedef struct tAACWAVEFORMAT$/;"	s
tBDLPCMWAVEFORMAT	wave_fmt.h	/^typedef struct tBDLPCMWAVEFORMAT $/;"	s
tEncodeMPEGWAVEFORMAT	wave_fmt.h	/^typedef struct tEncodeMPEGWAVEFORMAT$/;"	s
tPCMwaveformat_tag	wave_fmt.h	/^typedef struct tPCMwaveformat_tag $/;"	s
tRAwaveformat_tag	wave_fmt.h	/^typedef struct tRAwaveformat_tag $/;"	s
tWAVEFORMATEX	wave_fmt.h	/^typedef struct tWAVEFORMATEX$/;"	s
tWAVEFORMATEX2	wave_fmt.h	/^typedef struct tWAVEFORMATEX2$/;"	s
tWAVFORMATMACRO	wave_fmt.h	/^typedef struct tWAVFORMATMACRO$/;"	s
tWMAPROWAVEFORMAT	wave_fmt.h	/^typedef struct tWMAPROWAVEFORMAT$/;"	s
tWMAUDIO2WAVEFORMAT	wave_fmt.h	/^typedef struct tWMAUDIO2WAVEFORMAT$/;"	s
target_clock	avplayer.c	/^    double target_clock;    \/\/\/<av_gettime() time at which this should be displayed ideally$/;"	m	struct:VideoPicture	file:
target_clock	ffplay.c	/^    double target_clock;                         \/\/\/<av_gettime() time at which this should be displayed ideally$/;"	m	struct:VideoPicture	file:
thread_attr	avplayer.c	/^	pthread_attr_t 	thread_attr;$/;"	m	struct:VideoState	file:
thread_count	ffplay.c	/^static int thread_count = 1;$/;"	v	file:
thread_count	player.c	/^	int thread_count;$/;"	m	struct:options	file:
tmds_param_st	tvfe_api.h	/^} tmds_param_st;$/;"	t	typeref:struct:__anon108
toggle_audio_display	ffplay.c	/^static void toggle_audio_display(void)$/;"	f	file:	signature:(void)
toggle_full_screen	ffplay.c	/^static void toggle_full_screen(void)$/;"	f	file:	signature:(void)
toggle_pause	ffplay.c	/^static void toggle_pause(void)$/;"	f	file:	signature:(void)
tvdec_optimize_st	tvfe_api.h	/^} tvdec_optimize_st;$/;"	t	typeref:struct:__anon102
tvdec_param_st	tvfe_api.h	/^} tvdec_param_st;$/;"	t	typeref:struct:__anon101
tvfe_mpeg_task_global_variable_st	tvfe_api.h	/^} tvfe_mpeg_task_global_variable_st;$/;"	t	typeref:struct:__anon111
tvfe_scart_task_global_variable_st	tvfe_api.h	/^} tvfe_scart_task_global_variable_st;$/;"	t	typeref:struct:__anon112
update_sample_display	ffplay.c	/^static void update_sample_display(VideoState *is, short *samples, int samples_size)$/;"	f	file:	signature:(VideoState *is, short *samples, int samples_size)
usage	mtrace-mips	/^sub usage {$/;"	s
use_dr1	ffplay.c	/^    int use_dr1;$/;"	m	struct:__anon5	file:
vfilters	ffplay.c	/^static char *vfilters = NULL;$/;"	v	file:
video	plf_av_source.h	/^	PLF_VideoConf_st 	video;$/;"	m	struct:__anon152
videoCount	playback.c	/^int             i,videoCount,audioCount, videoStream,audioStream;$/;"	v
videoStream	avplayer.c	/^	int             videoStream, audioStream;$/;"	m	struct:VideoState	file:
videoStream	playback.c	/^int             i,videoCount,audioCount, videoStream,audioStream;$/;"	v
videoStream	tutorial08.c	/^	int             videoStream, audioStream;$/;"	m	struct:VideoState	file:
video_audio_display	ffplay.c	/^static void video_audio_display(VideoState *s)$/;"	f	file:	signature:(VideoState *s)
video_clock	avplayer.c	/^	double          video_clock; \/\/\/<pts of last decoded frame \/ predicted pts of next decoded frame$/;"	m	struct:VideoState	file:
video_clock	ffplay.c	/^    double video_clock;                          \/\/\/<pts of last decoded frame \/ predicted pts of next decoded frame$/;"	m	struct:VideoState	file:
video_clock	tutorial08.c	/^	double          video_clock; \/\/\/<pts of last decoded frame \/ predicted pts of next decoded frame$/;"	m	struct:VideoState	file:
video_current_pos	ffplay.c	/^    int64_t video_current_pos;                   \/\/\/<current displayed file pos$/;"	m	struct:VideoState	file:
video_current_pts	avplayer.c	/^	double          video_current_pts; \/\/\/<current displayed pts (different from video_clock if frame fifos are used)$/;"	m	struct:VideoState	file:
video_current_pts	ffplay.c	/^    double video_current_pts;                    \/\/\/<current displayed pts (different from video_clock if frame fifos are used)$/;"	m	struct:VideoState	file:
video_current_pts	tutorial08.c	/^	double          video_current_pts; \/\/\/<current displayed pts (different from video_clock if frame fifos are used)$/;"	m	struct:VideoState	file:
video_current_pts_drift	ffplay.c	/^    double video_current_pts_drift;              \/\/\/<video_current_pts - time (av_gettime) at which we updated video_current_pts - used to have running video pts$/;"	m	struct:VideoState	file:
video_current_pts_time	avplayer.c	/^	int64_t         video_current_pts_time;  \/\/\/<time (av_gettime) at which we updated video_current_pts - used to have running video pts$/;"	m	struct:VideoState	file:
video_current_pts_time	tutorial08.c	/^	int64_t         video_current_pts_time;  \/\/\/<time (av_gettime) at which we updated video_current_pts - used to have running video pts$/;"	m	struct:VideoState	file:
video_disable	ffplay.c	/^static int video_disable;$/;"	v	file:
video_display	ffplay.c	/^static void video_display(VideoState *is)$/;"	f	file:	signature:(VideoState *is)
video_display	tutorial08.c	/^void video_display(VideoState *is) {$/;"	f	signature:(VideoState *is)
video_fb	player.c	/^struct video_fb$/;"	s	file:
video_fd	player.c	/^	int video_fd;$/;"	m	struct:video_fb	file:
video_image_display	ffplay.c	/^static void video_image_display(VideoState *is)$/;"	f	file:	signature:(VideoState *is)
video_open	ffplay.c	/^static int video_open(VideoState *is){$/;"	f	file:	signature:(VideoState *is)
video_pos	player.c	/^	} video_pos;$/;"	m	struct:video_fb	typeref:struct:video_fb::__anon156	file:
video_refresh	ffplay.c	/^static void video_refresh(void *opaque)$/;"	f	file:	signature:(void *opaque)
video_refresh_timer	tutorial08.c	/^void video_refresh_timer(void *userdata) {$/;"	f	signature:(void *userdata)
video_st	avplayer.c	/^	AVStream        *video_st;$/;"	m	struct:VideoState	file:
video_st	ffplay.c	/^    AVStream *video_st;$/;"	m	struct:VideoState	file:
video_st	playback.c	/^AVStream		*video_st,*audio_st;$/;"	v
video_st	tutorial08.c	/^	AVStream        *video_st;$/;"	m	struct:VideoState	file:
video_stream	ffplay.c	/^    int video_stream;$/;"	m	struct:VideoState	file:
video_thread	ffplay.c	/^static int video_thread(void *arg)$/;"	f	file:	signature:(void *arg)
video_thread	tutorial08.c	/^int video_thread(void *arg) {$/;"	f	signature:(void *arg)
video_tid	avplayer.c	/^	pthread_t      	video_tid;$/;"	m	struct:VideoState	file:
video_tid	ffplay.c	/^    SDL_Thread *video_tid;$/;"	m	struct:VideoState	file:
video_tid	tutorial08.c	/^	SDL_Thread      *video_tid;$/;"	m	struct:VideoState	file:
videoq	avplayer.c	/^	PacketQueue     videoq;$/;"	m	struct:VideoState	file:
videoq	ffplay.c	/^    PacketQueue videoq;$/;"	m	struct:VideoState	file:
videoq	tutorial08.c	/^	PacketQueue     videoq;$/;"	m	struct:VideoState	file:
vinfo	player.c	/^	struct fb_var_screeninfo vinfo;$/;"	m	struct:video_fb	typeref:struct:video_fb::fb_var_screeninfo	file:
wBitsPerSample	wave_fmt.h	/^    UINT16	wBitsPerSample   ;$/;"	m	struct:tWAVEFORMATEX2
wBitsPerSample	wave_fmt.h	/^    UINT16	wBitsPerSample   ;\/\/__attribute__ ((packed));   \/* Number of bits per sample of mono data *\/$/;"	m	struct:tWAVEFORMATEX
wBlockAlign	wave_fmt.h	/^	UINT16	wBlockAlign;$/;"	m	struct:_wmaheader
wEncOption	wave_fmt.h	/^	UINT16	wEncOption;$/;"	m	struct:_wmaheader
wEncodeOptions	wave_fmt.h	/^    UINT16      wEncodeOptions;$/;"	m	struct:tWMAUDIO2WAVEFORMAT
wEncodeOptions	wave_fmt.h	/^    UINT16  wEncodeOptions;$/;"	m	struct:tWAVEFORMATEX2
wFormatTag	wave_fmt.h	/^	UINT16	wFormatTag;$/;"	m	struct:_wmaheader
wFormatTag	wave_fmt.h	/^    UINT16	wFormatTag       ;\/\/__attribute__ ((packed));   \/* format type *\/$/;"	m	struct:tWAVEFORMATEX
wFormatTag	wave_fmt.h	/^    UINT16	wFormatTag    ;   $/;"	m	struct:tWAVEFORMATEX2
wHStart_x1	tvfe_api.h	/^	UINT16 wHStart_x1; \/* H start position of 1X timing *\/$/;"	m	struct:__anon101
wHStart_x1_5	tvfe_api.h	/^	UINT16 wHStart_x1_5; \/*  H start position of 1.5X timing *\/$/;"	m	struct:__anon101
wHeadEmphasis	wave_fmt.h	/^    UINT16	wHeadEmphasis	;\/\/__attribute__ ((packed));$/;"	m	struct:mpeg1waveformat_tag
wID	wave_fmt.h	/^    UINT16	wID					;\/\/__attribute__ ((packed));$/;"	m	struct:mpeglayer3waveformat_tag
wPC_ADCLK_MAX	tvfe_api.h	/^    UINT16  wPC_ADCLK_MAX;$/;"	m	struct:__anon119
wPC_HSYNC_MAX	tvfe_api.h	/^    UINT16  wPC_HSYNC_MAX;$/;"	m	struct:__anon119
wPC_HSYNC_MIN	tvfe_api.h	/^    UINT16  wPC_HSYNC_MIN;$/;"	m	struct:__anon119
wPC_VSYNC_MAX	tvfe_api.h	/^    UINT16  wPC_VSYNC_MAX;$/;"	m	struct:__anon119
wPC_VSYNC_MIN	tvfe_api.h	/^    UINT16  wPC_VSYNC_MIN;$/;"	m	struct:__anon119
wReserve1	wave_fmt.h	/^	UINT16	wReserve1;		\/\/ nChannels+nBitsPerSample$/;"	m	struct:_wmaheader
wReserved1	wave_fmt.h	/^    UINT16  wReserved1;$/;"	m	struct:tWAVEFORMATEX2
wReserved2	wave_fmt.h	/^    UINT16  wReserved2;$/;"	m	struct:tWAVEFORMATEX2
wTag	wave_fmt.h	/^	UINT16	wTag;$/;"	m	struct:_wmaheader
wanted_stream	ffplay.c	/^static int wanted_stream[AVMEDIA_TYPE_NB]={$/;"	v	file:
wfx	wave_fmt.h	/^	WAVEFORMATEX  wfx;$/;"	m	struct:tBDLPCMWAVEFORMAT
wfx	wave_fmt.h	/^	WAVEFORMATEX  wfx;$/;"	m	struct:tPCMwaveformat_tag
wfx	wave_fmt.h	/^	WAVEFORMATEX  wfx;$/;"	m	struct:tRAwaveformat_tag
wfx	wave_fmt.h	/^    WAVEFORMATEX    wfx				;\/\/__attribute__ ((packed));$/;"	m	struct:mpeg1waveformat_tag
wfx	wave_fmt.h	/^    WAVEFORMATEX    wfx;$/;"	m	struct:tWAVFORMATMACRO
wfx	wave_fmt.h	/^    WAVEFORMATEX  wfx			;\/\/__attribute__ ((packed));$/;"	m	struct:mpeglayer3waveformat_tag
wfx	wave_fmt.h	/^    WAVEFORMATEX wfx;$/;"	m	struct:tAACWAVEFORMAT
wfx	wave_fmt.h	/^    WAVEFORMATEX wfx;$/;"	m	struct:tEncodeMPEGWAVEFORMAT
wfx	wave_fmt.h	/^    WAVEFORMATEX wfx;$/;"	m	struct:tWMAPROWAVEFORMAT
wfx	wave_fmt.h	/^    WAVEFORMATEX wfx;$/;"	m	struct:tWMAUDIO2WAVEFORMAT
width	avplayer.c	/^    int width, height; \/* source height & width *\/$/;"	m	struct:VideoPicture	file:
width	ffplay.c	/^    int width, height, xleft, ytop;$/;"	m	struct:VideoState	file:
width	ffplay.c	/^    int width, height; \/* source height & width *\/$/;"	m	struct:VideoPicture	file:
width	tutorial08.c	/^	int width, height; \/* source height & width *\/$/;"	m	struct:VideoPicture	file:
window_title	ffplay.c	/^static const char *window_title;$/;"	v	file:
workaround_bugs	ffplay.c	/^static int workaround_bugs = 1;$/;"	v	file:
x	player.c	/^		int x;$/;"	m	struct:video_fb::__anon156	file:
xleft	ffplay.c	/^    int width, height, xleft, ytop;$/;"	m	struct:VideoState	file:
xpos	ffplay.c	/^    int xpos;$/;"	m	struct:VideoState	file:
y	player.c	/^		int y;$/;"	m	struct:video_fb::__anon156	file:
y_pin	plf_av_source.h	/^		PLF_AVPin_e y_pin;$/;"	m	struct:__anon142::__anon145
y_pin	plf_av_source.h	/^		PLF_AVPin_e y_pin;$/;"	m	struct:__anon142::__anon147
y_pin	plf_av_source.h	/^		PLF_AVPin_e y_pin;$/;"	m	struct:__anon142::__anon149
ypbpr	plf_av_source.h	/^	} ypbpr;$/;"	m	union:__anon142	typeref:struct:__anon142::__anon149
ytop	ffplay.c	/^    int width, height, xleft, ytop;$/;"	m	struct:VideoState	file:
