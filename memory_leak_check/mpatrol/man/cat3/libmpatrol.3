


LIBMPATROL(3)            mpatrol library            LIBMPATROL(3)


NNAAMMEE
       libmpatrol - dynamic memory allocation and tracing library

SSYYNNOOPPSSIISS
       #include <mpatrol.h>

       void *malloc(size_t size);
       void *calloc(size_t nelem, size_t size);
       void *memalign(size_t align, size_t size);
       void *valloc(size_t size);
       void *pvalloc(size_t size);
       void *alloca(size_t size);
       char *strdup(const char *str);
       char *strndup(const char *str, size_t size);
       char *strsave(const char *str);
       char *strnsave(const char *str, size_t size);
       char *strdupa(const char *str);
       char *strndupa(const char *str, size_t size);
       void *realloc(void *ptr, size_t size);
       void *reallocf(void *ptr, size_t size);
       void *recalloc(void *ptr, size_t nelem, size_t size);
       void *expand(void *ptr, size_t size);
       void free(void *ptr);
       void cfree(void *ptr, size_t nelem, size_t size);
       void dealloca(void *ptr);

       void *xmalloc(size_t size);
       void *xcalloc(size_t nelem, size_t size);
       char *xstrdup(const char *str);
       void *xrealloc(void *ptr, size_t size);
       void xfree(void *ptr);

       void *operator new(size_t size) throw(std::bad_alloc);
       void *operator new(size_t size, const std::nothrow_t&)
             throw();
       void *operator new[](size_t size) throw(std::bad_alloc);
       void *operator new[](size_t size, const std::nothrow_t&)
             throw();
       void operator delete(void *ptr) throw();
       void operator delete(void *ptr, const std::nothrow_t&)
            throw();
       void operator delete[](void *ptr) throw();
       void operator delete[](void *ptr, const std::nothrow_t&)
            throw();
       std::new_handler std::set_new_handler(std::new_handler func)
                        throw();

       void *memset(void *ptr, int byte, size_t size);
       void bzero(void *ptr, size_t size);
       void *memccpy(void *dest, const void *src, int byte,
                     size_t size);
       void *memcpy(void *dest, const void *src, size_t size);
       void *memmove(void *dest, const void *src, size_t size);
       void bcopy(const void *src, void *dest, size_t size);
       int memcmp(const void *ptr1, const void *ptr2,
                  size_t size);
       int bcmp(const void *ptr1, const void *ptr2, size_t size);
       void *memchr(const void *ptr, int byte, size_t size);
       void *memmem(const void *ptr1, size_t size1,
                    const void *ptr2, size_t size2);

       int __mp_atexit(void (*func)(void));
       unsigned long __mp_setoption(long opt, unsigned long val);
       int __mp_getoption(long opt, unsigned long *val);
       unsigned long __mp_libversion(void);
       const char *__mp_strerror(__mp_errortype err);
       const char *__mp_function(__mp_alloctype func);
       int __mp_setuser(const void *ptr, const void *data);
       int __mp_setmark(const void *ptr);
       int __mp_info(const void *ptr, __mp_allocinfo *info);
       int __mp_syminfo(const void *ptr, __mp_symbolinfo *info);
       const char *__mp_symbol(const void *ptr);
       int __mp_printinfo(const void *ptr);
       unsigned long __mp_snapshot(void);
       size_t __mp_iterate(int (*func)(const void *, void *),
                           void *data, unsigned long event);
       size_t __mp_iterateall(int (*func)(const void *, void *),
                              void *data);
       int __mp_addallocentry(const char *file, unsigned long line,
                              size_t size);
       int __mp_addfreeentry(const char *file, unsigned long line,
                             size_t size);
       void __mp_clearleaktable(void);
       int __mp_startleaktable(void);
       int __mp_stopleaktable(void);
       void __mp_leaktable(size_t size, int opt,
                           unsigned char flags);
       void __mp_memorymap(int stats);
       void __mp_summary(void);
       int __mp_stats(__mp_heapinfo *info);
       void __mp_check(void);
       __mp_prologuehandler __mp_prologue(const
                                          __mp_prologuehandler);
       __mp_epiloguehandler __mp_epilogue(const
                                          __mp_epiloguehandler);
       __mp_nomemoryhandler __mp_nomemory(const
                                          __mp_nomemoryhandler);
       int __mp_printf(const char *fmt, ...);
       int __mp_vprintf(const char *fmt, va_list args);
       void __mp_locprintf(const char *fmt, ...);
       void __mp_vlocprintf(const char *fmt, va_list args);
       void __mp_logmemory(const void *ptr, size_t size);
       int __mp_logstack(size_t frames);
       int __mp_logaddr(const void *ptr);
       int __mp_edit(const char *file, unsigned long line);
       int __mp_list(const char *file, unsigned long line);
       int __mp_view(const char *file, unsigned long line);
       int __mp_readcontents(const char *file, void *ptr);
       int __mp_writecontents(const char *file, const void *ptr);
       long __mp_cmpcontents(const char *file, const void *ptr);
       int __mp_remcontents(const char *file, const void *ptr);

       __mp_errortype __mp_errno;

DDEESSCCRRIIPPTTIIOONN
       The _m_p_a_t_r_o_l _l_i_b_r_a_r_y contains  implementations  of  dynamic
       memory  allocation  functions  for  C and C++ suitable for
       tracing and debugging, and is available on UNIX,  AmigaOS,
       Windows and Netware platforms.  The library is intended to
       be used without requiring any  changes  to  existing  user
       source  code  except the inclusion of the _m_p_a_t_r_o_l_._h header
       file, although additional functions are supplied for extra
       tracing and control.  Note that the current version of the
       mpatrol library is contained in the  MMPPAATTRROOLL__VVEERRSSIIOONN  pre-
       processor macro.

       All  of  the function definitions in _m_p_a_t_r_o_l_._h can be dis-
       abled by defining the NNDDEEBBUUGG preprocessor macro, which  is
       the same macro used to control the behaviour of the aasssseerrtt
       function.  If NNDDEEBBUUGG is defined then no macro redefinition
       of  functions  will  take  place  and  all special mpatrol
       library functions will evaluate to empty statements.   The
       _m_p_a_l_l_o_c_._h  header file will also be included in this case.
       It is intended  that  the  NNDDEEBBUUGG  preprocessor  macro  be
       defined in release builds.

       The  MMPP__MMAALLLLOOCC  family  of  functions  that are defined in
       _m_p_a_l_l_o_c_._h are also defined in _m_p_a_t_r_o_l_._h when NNDDEEBBUUGG is not
       defined.   The mpatrol versions of these functions contain
       more debugging information than the mpalloc  versions  do,
       but  they  do not call the allocation failure handler when
       no more memory is available (they cause the  _O_U_T_M_E_M  error
       message  to  be  given  instead).   See mmppaalllloocc(3) for the
       descriptions of the MMPP__MMAALLLLOOCC family of functions.

       All diagnostics are sent to the file  _m_p_a_t_r_o_l_._l_o_g  in  the
       current  directory  by  default but this can be changed at
       run-time.  Additional configuration options  can  also  be
       changed  at  run-time  by  setting  and  altering the MMPPAA--
       TTRROOLL__OOPPTTIIOONNSS environment variable.  In addition, the  LLOOGG--
       FFIILLEE,  PPRROOFFFFIILLEE  and TTRRAACCEEFFIILLEE options are affected by the
       LLOOGGDDIIRR, PPRROOFFDDIIRR and TTRRAACCEEDDIIRR environment variables respec-
       tively.  See EENNVVIIRROONNMMEENNTT below for more details.

       Details  of  memory allocations and free memory are stored
       internally as a tree structure for speed and also to allow
       the  best  fit allocation algorithm to be used.  This also
       enables the library to  perform  intelligent  resizing  of
       memory allocations and can be used to quickly determine if
       an address has been allocated on the heap.

       On systems that support  memory  protection,  the  library
       attempts to detect any illegal memory accesses and display
       as much information as it can obtain about the address  in
       question and where the illegal memory access occurred.

       Stack traceback information for every memory allocation is
       available on some supported platforms, which is useful for
       determining  exactly  where  a  memory allocation was per-
       formed or for adding meaning to tracing.  Symbol names are
       read  from  the executable file and also possibly from any
       required shared libraries, and if the UUSSEEDDEEBBUUGG  option  is
       used  and  is  available then the debugging section in the
       executable file  will  be  read  to  determine  additional
       source-level information.

       On systems that support it, global functions (with C link-
       age) in an executable file or shared library  whose  names
       begin  with  ____mmpp__iinniitt__  will  be  noted  when the mpatrol
       library first starts up and is reading the symbols.   Such
       functions  will  then  be  called  as  soon as the mpatrol
       library is initialised, which can be useful  if  the  ini-
       tialisation occurs before mmaaiinn is called.  These functions
       must accept no arguments and must return no value.   Simi-
       lar  behaviour  exists  for  global  functions whose names
       begin with ____mmpp__ffiinnii__, except that such functions will  be
       executed  when  the mpatrol library terminates.  Note that
       this feature will have no effect if the  symbol  table  is
       stripped from the executable file or shared library before
       the program is run, and the order in which such  functions
       will  be called if there are more than one is unspecified.

       On UNIX platforms, the ffoorrkk function can cause problems if
       it  is  used  to make a copy of the parent process without
       immediately calling one of the eexxeecc family  of  functions.
       This is because the child process inherits all of the mem-
       ory allocations of the parent process, but  also  inherits
       the  log,  profile  and  trace files as well.  If both the
       parent and child processes make subsequent memory  alloca-
       tions there will be multiple entries with the same alloca-
       tion indices written to the log, profile or  trace  files.
       This  can  be  most  confusing when processing these files
       afterwards!  As a workaround,  the  mpatrol  library  will
       always check the current process identifier every time one
       of its functions is called if the CCHHEECCKKFFOORRKK option is used
       and  will  open  new log, profile or trace files if it has
       determined that the  process  has  been  forked.   If  the
       CCHHEECCKKFFOORRKK  option  is  not used then a call to ____mmpp__rreeiinniitt
       should be added as the first function call  in  the  child
       process  in order to duplicate the behaviour of the CCHHEECCKK--
       FFOORRKK option.

       Memory allocation profiling is supported, with  statistics
       about  every  memory  allocation and deallocation that was
       made during the execution of a program being written to  a
       file  at  program  termination if the PPRROOFF option is used.
       The information stored in this file can then  be  used  by
       the  mmpprrooff  command  to display various tables summarising
       the memory allocation behaviour of the program  that  pro-
       duced  it.   Memory  allocation tracing is also supported,
       where a trace of all memory allocations, reallocations and
       deallocations can be written to a tracing output file in a
       concise encoded format for later processing by the mmppttrraaccee
       command.  This is controlled with the TTRRAACCEE option.

FFUUNNCCTTIIOONNSS
       The  following  19 functions are available as replacements
       for existing C library functions.  To use these  you  must
       include  _m_p_a_t_r_o_l_._h before all other header files, although
       on UNIX and Windows platforms (and AmigaOS when using ggcccc)
       they  will be used anyway, albeit with slightly less trac-
       ing information.  If aallllooccaa is being used and _a_l_l_o_c_a_._h  is
       included  then _m_p_a_t_r_o_l_._h must appear after _a_l_l_o_c_a_._h other-
       wise the debugging version of aallllooccaa will not be used:

       mmaalllloocc Allocates _s_i_z_e uninitialised bytes  from  the  heap
              and  returns  a  pointer  to  the first byte of the
              allocation.  The pointer returned will be  suitably
              aligned  for casting to any type and can be used to
              store data of up to _s_i_z_e bytes in length.  If  _s_i_z_e
              is  _0  then the memory allocated will be implicitly
              rounded up to _1 byte.  If there is not enough space
              in  the heap then the null pointer will be returned
              and eerrrrnnoo will be set  to  EENNOOMMEEMM.   The  allocated
              memory must be deallocated with ffrreeee or reallocated
              with rreeaalllloocc.

       ccaalllloocc Allocates _n_e_l_e_m elements of  _s_i_z_e  zero-initialised
              bytes  from  the  heap and returns a pointer to the
              first byte of the allocation.  The pointer returned
              will  be  suitably  aligned for casting to any type
              and can be used to store data of up to _n_e_l_e_m _* _s_i_z_e
              bytes  in  length.   If  _n_e_l_e_m _* _s_i_z_e is _0 then the
              amount  of  memory  allocated  will  be  implicitly
              rounded up to _1 byte.  If there is not enough space
              in the heap then the null pointer will be  returned
              and  eerrrrnnoo  will  be  set to EENNOOMMEEMM.  The allocated
              memory must be deallocated with ffrreeee or reallocated
              with rreeaalllloocc.

       mmeemmaalliiggnn
              Allocates  _s_i_z_e  uninitialised  bytes from the heap
              and returns a pointer to  the  first  byte  of  the
              allocation.   The  pointer returned will be aligned
              to _a_l_i_g_n bytes and can be used to store data of  up
              to _s_i_z_e bytes in length.  If _a_l_i_g_n is zero then the
              default system alignment will be used.  If _a_l_i_g_n is
              not  a  power  of two then it will be rounded up to
              the nearest power of two.  If _a_l_i_g_n is greater than
              the  system  page size then it will be truncated to
              that value.  If _s_i_z_e is _0 then the memory allocated
              will  be implicitly rounded up to _1 byte.  If there
              is not enough space  in  the  heap  then  the  null
              pointer  will  be returned and eerrrrnnoo will be set to
              EENNOOMMEEMM.  The allocated memory must  be  deallocated
              with ffrreeee or reallocated with rreeaalllloocc, although the
              latter  will  not  guarantee  the  preservation  of
              alignment.

       vvaalllloocc Allocates  _s_i_z_e  uninitialised  bytes from the heap
              and returns a pointer to  the  first  byte  of  the
              allocation.   The  pointer returned will be aligned
              to the system page size and can be  used  to  store
              data  of  up to _s_i_z_e bytes in length.  If _s_i_z_e is _0
              then  the  memory  allocated  will  be   implicitly
              rounded up to _1 byte.  If there is not enough space
              in the heap then the null pointer will be  returned
              and  eerrrrnnoo  will  be  set to EENNOOMMEEMM.  The allocated
              memory must be deallocated with ffrreeee or reallocated
              with  rreeaalllloocc, although the latter will not guaran-
              tee the preservation of alignment.

       ppvvaalllloocc
              Allocates _s_i_z_e uninitialised bytes  from  the  heap
              and  returns  a  pointer  to  the first byte of the
              allocation.  The pointer returned will  be  aligned
              to  the  system  page size and can be used to store
              data of up to _s_i_z_e bytes in length.  If _s_i_z_e  is  _0
              then   the  memory  allocated  will  be  implicitly
              rounded up  to  _1  page,  otherwise  _s_i_z_e  will  be
              implicitly  rounded  up to a multiple of the system
              page size.  If there is not  enough  space  in  the
              heap  then  the  null  pointer will be returned and
              eerrrrnnoo will be set to EENNOOMMEEMM.  The allocated  memory
              must  be  deallocated with ffrreeee or reallocated with
              rreeaalllloocc, although the latter will not guarantee the
              preservation of alignment.

       aallllooccaa Allocates  _s_i_z_e  temporary uninitialised bytes from
              the heap and returns a pointer to the first byte of
              the allocation.  The pointer returned will be suit-
              ably aligned for casting to any  type  and  can  be
              used  to  store data of up to _s_i_z_e bytes in length.
              If _s_i_z_e is _0 then  the  memory  allocated  will  be
              implicitly  rounded  up to _1 byte.  If there is not
              enough space in the heap then the program  will  be
              terminated and the _O_U_T_M_E_M error will be given.  The
              aallllooccaa function normally allocates its memory  from
              the  stack,  with  the result that all such alloca-
              tions will be  freed  when  the  function  returns.
              This  version  of  aallllooccaa allocates its memory from
              the heap in order to provide better debugging,  but
              the  allocations may not necessarily be freed imme-
              diately when the function returns.   The  allocated
              memory can be deallocated explicitly with ddeeaallllooccaa,
              but may not be reallocated or  deallocated  in  any
              other  way.   This  function is available for back-
              wards compatibility with older C  source  code  and
              should not be used in new code.

       ssttrrdduupp Allocates  exactly  enough  memory from the heap to
              duplicate _s_t_r (including the terminating nul  char-
              acter)  and  returns a pointer to the first byte of
              the allocation after copying _s_t_r to the newly-allo-
              cated  memory.   The  pointer returned will have no
              alignment constraints and  can  be  used  to  store
              character  data up to the length of _s_t_r.  If _s_t_r is
              NNUULLLL then an error  will  be  given  and  the  null
              pointer  will  be returned.  If there is not enough
              space in the heap then the  null  pointer  will  be
              returned  and  eerrrrnnoo  will  be  set to EENNOOMMEEMM.  The
              allocated memory must be deallocated with  ffrreeee  or
              reallocated with rreeaalllloocc.

       ssttrrnndduupp
              Allocates  exactly  enough  memory from the heap to
              duplicate _s_t_r (including the terminating nul  char-
              acter)  and  returns a pointer to the first byte of
              the allocation after copying _s_t_r to the newly-allo-
              cated  memory.   The  pointer returned will have no
              alignment constraints and  can  be  used  to  store
              character  data up to the length of _s_t_r.  If _s_t_r is
              NNUULLLL and _s_i_z_e is non-zero then  an  error  will  be
              given  and  the  null pointer will be returned.  If
              the length of _s_t_r is greater than  _s_i_z_e  then  only
              _s_i_z_e  characters will be allocated and copied, with
              one additional byte  for  the  nul  character.   If
              there is not enough space in the heap then the null
              pointer will be returned and eerrrrnnoo will be  set  to
              EENNOOMMEEMM.   The  allocated memory must be deallocated
              with ffrreeee or reallocated with rreeaalllloocc.  This  func-
              tion  is available for backwards compatibility with
              older C libraries and should not  be  used  in  new
              code.

       ssttrrssaavvee
              Allocates  exactly  enough  memory from the heap to
              duplicate _s_t_r (including the terminating nul  char-
              acter)  and  returns a pointer to the first byte of
              the allocation after copying _s_t_r to the newly-allo-
              cated  memory.   The  pointer returned will have no
              alignment constraints and  can  be  used  to  store
              character  data up to the length of _s_t_r.  If _s_t_r is
              NNUULLLL then an error  will  be  given  and  the  null
              pointer  will  be returned.  If there is not enough
              space in the heap then the  null  pointer  will  be
              returned  and  eerrrrnnoo  will  be  set to EENNOOMMEEMM.  The
              allocated memory must be deallocated with  ffrreeee  or
              reallocated  with rreeaalllloocc.  This function is avail-
              able  for  backwards  compatibility  with  older  C
              libraries and should not be used in new code.

       ssttrrnnssaavvee
              Allocates  exactly  enough  memory from the heap to
              duplicate _s_t_r (including the terminating nul  char-
              acter)  and  returns a pointer to the first byte of
              the allocation after copying _s_t_r to the newly-allo-
              cated  memory.   The  pointer returned will have no
              alignment constraints and  can  be  used  to  store
              character  data up to the length of _s_t_r.  If _s_t_r is
              NNUULLLL and _s_i_z_e is non-zero then  an  error  will  be
              given  and  the  null pointer will be returned.  If
              the length of _s_t_r is greater than  _s_i_z_e  then  only
              _s_i_z_e  characters will be allocated and copied, with
              one additional byte  for  the  nul  character.   If
              there is not enough space in the heap then the null
              pointer will be returned and eerrrrnnoo will be  set  to
              EENNOOMMEEMM.   The  allocated memory must be deallocated
              with ffrreeee or reallocated with rreeaalllloocc.  This  func-
              tion  is available for backwards compatibility with
              older C libraries and should not  be  used  in  new
              code.

       ssttrrdduuppaa
              Allocates  exactly enough temporary memory from the
              heap to duplicate _s_t_r  (including  the  terminating
              nul  character)  and returns a pointer to the first
              byte of the allocation after  copying  _s_t_r  to  the
              newly-allocated  memory.  The pointer returned will
              have no alignment constraints and can  be  used  to
              store  character  data up to the length of _s_t_r.  If
              _s_t_r is NNUULLLL then an error will  be  given  and  the
              null  pointer  will  be  returned.  If there is not
              enough space in the heap then the program  will  be
              terminated and the _O_U_T_M_E_M error will be given.  The
              ssttrrdduuppaa function normally allocates its memory from
              the  stack,  with  the result that all such alloca-
              tions will be  freed  when  the  function  returns.
              This  version  of ssttrrdduuppaa allocates its memory from
              the heap in order to provide better debugging,  but
              the  allocations may not necessarily be freed imme-
              diately when the function returns.   The  allocated
              memory can be deallocated explicitly with ddeeaallllooccaa,
              but may not be reallocated or  deallocated  in  any
              other  way.   This  function is available for back-
              wards compatibility with older C  source  code  and
              should not be used in new code.

       ssttrrnndduuppaa
              Allocates  exactly enough temporary memory from the
              heap to duplicate _s_t_r  (including  the  terminating
              nul  character)  and returns a pointer to the first
              byte of the allocation after  copying  _s_t_r  to  the
              newly-allocated  memory.  The pointer returned will
              have no alignment constraints and can  be  used  to
              store  character  data up to the length of _s_t_r.  If
              _s_t_r is NNUULLLL and _s_i_z_e is non-zero then an error will
              be given and the null pointer will be returned.  If
              the length of _s_t_r is greater than  _s_i_z_e  then  only
              _s_i_z_e  characters will be allocated and copied, with
              one additional byte  for  the  nul  character.   If
              there is not enough space in the heap then the pro-
              gram will be terminated and the _O_U_T_M_E_M  error  will
              be given.  The ssttrrnndduuppaa function normally allocates
              its memory from the stack, with the result that all
              such  allocations  will  be freed when the function
              returns.  This version of  ssttrrnndduuppaa  allocates  its
              memory  from  the  heap  in order to provide better
              debugging, but the allocations may not  necessarily
              be  freed  immediately  when  the function returns.
              The allocated memory can be deallocated  explicitly
              with  ddeeaallllooccaa, but may not be reallocated or deal-
              located in any other way.  This function is  avail-
              able  for  backwards  compatibility  with  older  C
              source code and should not be used in new code.

       rreeaalllloocc
              Resizes the memory allocation beginning at  _p_t_r  to
              _s_i_z_e  bytes and returns a pointer to the first byte
              of the new allocation  after  copying  _p_t_r  to  the
              newly-allocated  memory, which will be truncated if
              _s_i_z_e is smaller than the original allocation.   The
              pointer returned will be suitably aligned for cast-
              ing to any type and can be used to store data of up
              to  _s_i_z_e  bytes in length.  If _p_t_r is NNUULLLL then the
              call will be equivalent to mmaalllloocc.  If  _s_i_z_e  is  _0
              then  the  existing memory allocation will be freed
              and the null pointer will be returned.  If _s_i_z_e  is
              greater than the original allocation then the extra
              space will be filled with uninitialised bytes.   If
              there is not enough space in the heap then the null
              pointer will be returned and eerrrrnnoo will be  set  to
              EENNOOMMEEMM.   The  allocated memory must be deallocated
              with ffrreeee and can be reallocated again  with  rreeaall--
              lloocc.

       rreeaallllooccff
              Resizes  the  memory allocation beginning at _p_t_r to
              _s_i_z_e bytes and returns a pointer to the first  byte
              of  the  new  allocation  after  copying _p_t_r to the
              newly-allocated memory, which will be truncated  if
              _s_i_z_e  is smaller than the original allocation.  The
              pointer returned will be suitably aligned for cast-
              ing to any type and can be used to store data of up
              to _s_i_z_e bytes in length.  If _p_t_r is NNUULLLL  then  the
              call  will  be  equivalent to mmaalllloocc.  If _s_i_z_e is _0
              then the existing memory allocation will  be  freed
              and  the null pointer will be returned.  If _s_i_z_e is
              greater than the original allocation then the extra
              space  will be filled with uninitialised bytes.  If
              there is not enough space in the heap then the null
              pointer  will  be returned, the original allocation
              will be freed and eerrrrnnoo will be set to EENNOOMMEEMM.  The
              allocated  memory must be deallocated with ffrreeee and
              can be reallocated again with rreeaalllloocc.  This  func-
              tion  is available for backwards compatibility with
              older C libraries and should not  be  used  in  new
              code.

       rreeccaalllloocc
              Resizes  the  memory allocation beginning at _p_t_r to
              _n_e_l_e_m elements of _s_i_z_e bytes and returns a  pointer
              to the first byte of the new allocation after copy-
              ing _p_t_r to the newly-allocated memory,  which  will
              be  truncated  if  _n_e_l_e_m * _s_i_z_e is smaller than the
              original allocation.  The pointer returned will  be
              suitably aligned for casting to any type and can be
              used to store data of up to _n_e_l_e_m * _s_i_z_e  bytes  in
              length.   If  _p_t_r  is  NNUULLLL  then  the call will be
              equivalent to ccaalllloocc.  If _n_e_l_e_m * _s_i_z_e  is  _0  then
              the  existing  memory  allocation will be freed and
              the null pointer will be returned.  If _n_e_l_e_m * _s_i_z_e
              is  greater  than  the original allocation then the
              extra space will be  filled  with  zero-initialised
              bytes.   If  there  is not enough space in the heap
              then the null pointer will be  returned  and  eerrrrnnoo
              will  be  set to EENNOOMMEEMM.  The allocated memory must
              be deallocated with ffrreeee  and  can  be  reallocated
              again with rreeaalllloocc.  This function is available for
              backwards compatibility with older C libraries  and
              ccaalllloocc and should not be used in new code.

       eexxppaanndd Attempts  to resize the memory allocation beginning
              at _p_t_r to _s_i_z_e bytes  and  either  returns  _p_t_r  if
              there was enough space to resize it, or NNUULLLL if the
              block could not be resized for a particular reason.
              If  _p_t_r is NNUULLLL then the call will be equivalent to
              mmaalllloocc.  If _s_i_z_e is  00  then  the  existing  memory
              allocation  will be freed and the NNUULLLL pointer will
              be returned.  If _s_i_z_e is greater than the  original
              allocation then the extra space will be filled with
              uninitialised bytes and if _s_i_z_e is  less  than  the
              original  allocation  then the memory block will be
              truncated.  If there is not  enough  space  in  the
              heap  then  the  NNUULLLL  pointer will be returned and
              eerrrrnnoo will be set to EENNOOMMEEMM.  The allocated  memory
              must  be  deallocated  with ffrreeee and can be reallo-
              cated again with rreeaalllloocc.  This function is  avail-
              able  for  backwards  compatibility  with  older  C
              libraries and should not be used in new code.

       ffrreeee   Frees the memory allocation beginning at _p_t_r so the
              memory  can  be  reused by another call to allocate
              memory.  If _p_t_r is NNUULLLL  then  no  memory  will  be
              freed.   All  of  the  previous  contents  will  be
              destroyed.

       ccffrreeee  Frees the memory allocation beginning at _p_t_r so the
              memory  can  be  reused by another call to allocate
              memory.  If _p_t_r is NNUULLLL  then  no  memory  will  be
              freed.   All  of  the  previous  contents  will  be
              destroyed.   The  _n_e_l_e_m  and  _s_i_z_e  parameters  are
              ignored  in  this implementation.  This function is
              available for backwards compatibility with older  C
              libraries  and ccaalllloocc and should not be used in new
              code.

       ddeeaallllooccaa
              Explicitly frees the  temporary  memory  allocation
              beginning  at  _p_t_r  so  the memory can be reused by
              another call to allocate memory.  If  _p_t_r  is  NNUULLLL
              then  no  memory  will be explicitly freed.  All of
              the previous  contents  will  be  destroyed.   This
              function  can  only be used to free memory that was
              allocated with the  aallllooccaa,  ssttrrdduuppaa  and  ssttrrnndduuppaa
              functions,  but is only really required if the mpa-
              trol library does not automatically free such  mem-
              ory   allocations   when  the  allocating  function
              returns.  This  function  is  mpatrol-specific  and
              should not be used in release code.

       The  following  5  functions are available as replacements
       for existing C library  extension  functions  that  always
       abort  and never return NNUULLLL if there is insufficient mem-
       ory to fulfil a request.  To use these  you  must  include
       _m_p_a_t_r_o_l_._h  before all other header files, although on UNIX
       and Windows platforms (and AmigaOS when  using  ggcccc)  they
       will  be  used  anyway,  albeit with slightly less tracing
       information:

       xxmmaalllloocc
              Allocates _s_i_z_e uninitialised bytes  from  the  heap
              and  returns  a  pointer  to  the first byte of the
              allocation.  The pointer returned will be  suitably
              aligned  for casting to any type and can be used to
              store data of up to _s_i_z_e bytes in length.  If  _s_i_z_e
              is  _0  then the memory allocated will be implicitly
              rounded up to _1 byte.  If there is not enough space
              in the heap then the program will be terminated and
              the _O_U_T_M_E_M error will be given.  The allocated mem-
              ory  must  be deallocated with xxffrreeee or reallocated
              with xxrreeaalllloocc.

       xxccaalllloocc
              Allocates _n_e_l_e_m elements of  _s_i_z_e  zero-initialised
              bytes  from  the  heap and returns a pointer to the
              first byte of the allocation.  The pointer returned
              will  be  suitably  aligned for casting to any type
              and can be used to store data of up to _n_e_l_e_m _* _s_i_z_e
              bytes  in  length.   If  _n_e_l_e_m _* _s_i_z_e is _0 then the
              amount  of  memory  allocated  will  be  implicitly
              rounded up to _1 byte.  If there is not enough space
              in the heap then the program will be terminated and
              the _O_U_T_M_E_M error will be given.  The allocated mem-
              ory must be deallocated with xxffrreeee  or  reallocated
              with xxrreeaalllloocc.

       xxssttrrdduupp
              Allocates  exactly  enough  memory from the heap to
              duplicate _s_t_r (including the terminating nul  char-
              acter)  and  returns a pointer to the first byte of
              the allocation after copying _s_t_r to the newly-allo-
              cated  memory.   The  pointer returned will have no
              alignment constraints and  can  be  used  to  store
              character  data up to the length of _s_t_r.  If _s_t_r is
              NNUULLLL then an error  will  be  given  and  the  null
              pointer  will  be returned.  If there is not enough
              space in the heap then the program will  be  termi-
              nated  and  the  _O_U_T_M_E_M  error  will be given.  The
              allocated memory must be deallocated with xxffrreeee  or
              reallocated with xxrreeaalllloocc.

       xxrreeaalllloocc
              Resizes  the  memory allocation beginning at _p_t_r to
              _s_i_z_e bytes and returns a pointer to the first  byte
              of  the  new  allocation  after  copying _p_t_r to the
              newly-allocated memory, which will be truncated  if
              _s_i_z_e  is smaller than the original allocation.  The
              pointer returned will be suitably aligned for cast-
              ing to any type and can be used to store data of up
              to _s_i_z_e bytes in length.  If _p_t_r is NNUULLLL  then  the
              call  will  be equivalent to xxmmaalllloocc.  If _s_i_z_e is _0
              then it will be implictly rounded up to _1.  If _s_i_z_e
              is  greater  than  the original allocation then the
              extra  space  will  be  filled  with  uninitialised
              bytes.   If  there  is not enough space in the heap
              then the program will be terminated and the  _O_U_T_M_E_M
              error  will be given.  The allocated memory must be
              deallocated with xxffrreeee and can be reallocated again
              with xxrreeaalllloocc.

       xxffrreeee  Frees the memory allocation beginning at _p_t_r so the
              memory can be reused by another  call  to  allocate
              memory.   If  _p_t_r  is  NNUULLLL  then no memory will be
              freed.   All  of  the  previous  contents  will  be
              destroyed.

       The  following  5  functions are available as replacements
       for existing C++ library functions, but  the  replacements
       in  _m_p_a_t_r_o_l_._h will only be used if the MMPP__NNOOCCPPLLUUSSPPLLUUSS pre-
       processor macro is not defined.  The replacement operators
       make  use  of  the preprocessor in order to obtain source-
       level information.   If  this  causes  problems  then  you
       should  define  the  MMPP__NNOONNEEWWDDEELLEETTEE preprocessor macro and
       use  the  MMPP__NNEEWW,  MMPP__NNEEWW__NNOOTTHHRROOWW  and  MMPP__DDEELLEETTEE   macros
       instead of nneeww and ddeelleettee directly.  To use these C++ fea-
       tures you must include _m_p_a_t_r_o_l_._h before all  other  header
       files, although on UNIX and Windows platforms (and AmigaOS
       when using ggcccc) they will  be  used  anyway,  albeit  with
       slightly less tracing information:

       ooppeerraattoorr nneeww
              Allocates  _s_i_z_e  uninitialised  bytes from the heap
              and returns a pointer to  the  first  byte  of  the
              allocation.   The pointer returned will be suitably
              aligned for casting to any type and can be used  to
              store  data of up to _s_i_z_e bytes in length.  If _s_i_z_e
              is _0 then the memory allocated will  be  implicitly
              rounded up to _1 byte.  If there is not enough space
              in the heap then either the  _s_t_d_:_:_b_a_d___a_l_l_o_c  excep-
              tion  will  be  thrown  or the null pointer will be
              returned and eerrrrnnoo will be  set  to  EENNOOMMEEMM  -  the
              behaviour depends on whether the nothrow version of
              the operator is used.  The allocated memory must be
              deallocated with ooppeerraattoorr ddeelleettee.

       ooppeerraattoorr nneeww[[]]
              Allocates  _s_i_z_e  uninitialised  bytes from the heap
              and returns a pointer to  the  first  byte  of  the
              allocation.   The pointer returned will be suitably
              aligned for casting to any type and can be used  to
              store  data of up to _s_i_z_e bytes in length.  If _s_i_z_e
              is _0 then the memory allocated will  be  implicitly
              rounded up to _1 byte.  If there is not enough space
              in the heap then either the  _s_t_d_:_:_b_a_d___a_l_l_o_c  excep-
              tion  will  be  thrown  or the null pointer will be
              returned and eerrrrnnoo will be  set  to  EENNOOMMEEMM  -  the
              behaviour depends on whether the nothrow version of
              the operator is used.  The allocated memory must be
              deallocated with ooppeerraattoorr ddeelleettee[[]].

       ooppeerraattoorr ddeelleettee
              Frees the memory allocation beginning at _p_t_r so the
              memory can be reused by another  call  to  allocate
              memory.   If  _p_t_r  is  NNUULLLL  then no memory will be
              freed.   All  of  the  previous  contents  will  be
              destroyed.   This  function  must only be used with
              memory allocated by ooppeerraattoorr nneeww.

       ooppeerraattoorr ddeelleettee[[]]
              Frees the memory allocation beginning at _p_t_r so the
              memory  can  be  reused by another call to allocate
              memory.  If _p_t_r is NNUULLLL  then  no  memory  will  be
              freed.   All  of  the  previous  contents  will  be
              destroyed.  This function must only  be  used  with
              memory allocated by ooppeerraattoorr nneeww[[]].

       sseett__nneeww__hhaannddlleerr
              Installs  a low-memory handler specifically for use
              with ooppeerraattoorr nneeww and ooppeerraattoorr nneeww[[]] and returns  a
              pointer to the previously installed handler, or the
              null pointer if  no  handler  had  been  previously
              installed.   This will be called repeatedly by both
              functions when they would normally return NNUULLLL, and
              this  loop will continue until they manage to allo-
              cate the requested space.  Note that this  function
              is equivalent to ____mmpp__nnoommeemmoorryy and will replace the
              handler installed by that function.

       The following 10 functions are available  as  replacements
       for existing C library memory operation functions.  To use
       these you must include _m_p_a_t_r_o_l_._h before all  other  header
       files, although on UNIX and Windows platforms (and AmigaOS
       when using ggcccc) they will  be  used  anyway,  albeit  with
       slightly less tracing information:

       mmeemmsseett Writes _s_i_z_e bytes of value _b_y_t_e to the memory loca-
              tion beginning at _p_t_r and returns _p_t_r.  If _s_i_z_e  is
              00  then no bytes will be written.  If the operation
              would affect an existing memory allocation  in  the
              heap  but  would  straddle that allocation's bound-
              aries then an error message will  be  generated  in
              the log file and no bytes will be written.

       bbzzeerroo  Writes  _s_i_z_e  zero  bytes  to  the  memory location
              beginning at _p_t_r.  If _s_i_z_e is 00 then no bytes  will
              be  written.   If  the  operation  would  affect an
              existing memory allocation in the  heap  but  would
              straddle that allocation's boundaries then an error
              message will be generated in the log  file  and  no
              bytes  will be written.  This function is available
              for backwards compatibility with older C  libraries
              and should not be used in new code.

       mmeemmccccppyy
              Copies  _s_i_z_e  bytes  from  _s_r_c  to _d_e_s_t and returns
              NNUULLLL, or copies the  number  of  bytes  up  to  and
              including  the  first  occurrence  of  _b_y_t_e if _b_y_t_e
              exists within the specified  range  and  returns  a
              pointer to the first byte after _b_y_t_e.  If _s_i_z_e is 00
              or _s_r_c is the same as _d_e_s_t then no  bytes  will  be
              copied.   The  source and destination ranges should
              not overlap, otherwise a warning will be written to
              the  log  file.   If  the operation would affect an
              existing memory allocation in the  heap  but  would
              straddle that allocation's boundaries then an error
              message will be generated in the log  file  and  no
              bytes will be copied.

       mmeemmccppyy Copies  _s_i_z_e  bytes  from  _s_r_c  to _d_e_s_t and returns
              _d_e_s_t.  If _s_i_z_e is 00 or _s_r_c is the same as _d_e_s_t then
              no  bytes  will be copied.  The source and destina-
              tion ranges should not overlap, otherwise a warning
              will  be written to the log file.  If the operation
              would affect an existing memory allocation  in  the
              heap  but  would  straddle that allocation's bound-
              aries then an error message will  be  generated  in
              the log file and no bytes will be copied.

       mmeemmmmoovvee
              Copies  _s_i_z_e  bytes  from  _s_r_c  to _d_e_s_t and returns
              _d_e_s_t.  If _s_i_z_e is 00 or _s_r_c is the same as _d_e_s_t then
              no  bytes  will  be copied.  If the operation would
              affect an existing memory allocation  in  the  heap
              but  would  straddle  that  allocation's boundaries
              then an error message will be generated in the  log
              file and no bytes will be copied.

       bbccooppyy  Copies  _s_i_z_e  bytes from _s_r_c to _d_e_s_t.  If _s_i_z_e is 00
              or _s_r_c is the same as _d_e_s_t then no  bytes  will  be
              copied.   If the operation would affect an existing
              memory allocation in the heap  but  would  straddle
              that  allocation's boundaries then an error message
              will be generated in the log file and no bytes will
              be  copied.   This  function is available for back-
              wards compatibility  with  older  C  libraries  and
              should not be used in new code.

       mmeemmccmmpp Compares  _s_i_z_e bytes from _p_t_r_1 and _p_t_r_2 and returns
              00 if all of the bytes are identical, or returns the
              byte  difference  of the first differing bytes.  If
              _s_i_z_e is 00 or _p_t_r_1 is the same as _p_t_r_2 then no bytes
              will be compared.  If the operation would read from
              an existing memory allocation in the heap but would
              straddle that allocation's boundaries then an error
              message will be generated in the log  file  and  no
              bytes will be compared.

       bbccmmpp   Compares  _s_i_z_e bytes from _p_t_r_1 and _p_t_r_2 and returns
              00 if all of the bytes are identical, or returns the
              byte  difference  of the first differing bytes.  If
              _s_i_z_e is 00 or _p_t_r_1 is the same as _p_t_r_2 then no bytes
              will be compared.  If the operation would read from
              an existing memory allocation in the heap but would
              straddle that allocation's boundaries then an error
              message will be generated in the log  file  and  no
              bytes will be compared.  This function is available
              for backwards compatibility with older C  libraries
              and should not be used in new code.

       mmeemmcchhrr Searches  up  to  _s_i_z_e  bytes  in _p_t_r for the first
              occurrence of _b_y_t_e and returns a pointer to  it  or
              NNUULLLL  if no such byte occurs.  If _s_i_z_e is 00 then no
              bytes will be searched.   If  the  operation  would
              affect  an  existing  memory allocation in the heap
              but would  straddle  that  allocation's  boundaries
              then  an error message will be generated in the log
              file and no bytes will be searched.

       mmeemmmmeemm Searches up to _s_i_z_e_1 bytes in _p_t_r_1  for  the  first
              occurrence of _p_t_r_2 (which is exactly _s_i_z_e_2 bytes in
              length) and returns a pointer to it or NNUULLLL  if  no
              such sequence of bytes occur.  If _s_i_z_e_1 or _s_i_z_e_2 is
              00 then no bytes will be searched.  If the operation
              would  affect  an existing memory allocation in the
              heap but would straddle  that  allocation's  bound-
              aries  then  an  error message will be generated in
              the log file and no bytes will be searched.

       The following 42 functions are available as  support  rou-
       tines  for  additional  control and tracing in the mpatrol
       library.  Although they are documented here as being  pre-
       fixed  by  ____mmpp__, their equivalent functions that are pre-
       fixed by mmppaattrrooll__ are also defined as aliases in the  _m_p_a_-
       _t_r_o_l_._h  header  file.  To use these you should include the
       _m_p_a_t_r_o_l_._h header file:

       ____mmpp__aatteexxiitt
              Installs a function to be called when  the  mpatrol
              library terminates.  Up to 32 such functions can be
              registered and will be called in reverse  order  of
              registration.   Returns  _1  on success or _0 if _f_u_n_c
              could not be registered.

       ____mmpp__sseettooppttiioonn
              Sets the value  of  an  mpatrol  option  after  the
              library has been initialised.  Options that require
              values  are  listed  in  _m_p_a_t_r_o_l_._h  prefixed   with
              _M_P___O_P_T___*.  The _o_p_t argument should be set to one of
              these macros, and the _v_a_l argument should be set to
              the option value, cast to an unsigned integer.  The
              return value will be _0 on success and _1 on failure.
              Options that are flags are listed in _m_p_a_t_r_o_l_._h pre-
              fixed with _M_P___F_L_G___*.  Multiple flags can be set  or
              unset   at   once  using  the  _M_P___O_P_T___S_E_T_F_L_A_G_S  and
              _M_P___O_P_T___U_N_S_E_T_F_L_A_G_S options  respectively,  with  the
              necessary flags specified in _v_a_l.  The return value
              will be _0 on success and a combination  of  all  of
              the  flags  that could not be set or unset on fail-
              ure.

       ____mmpp__ggeettooppttiioonn
              Gets the value  of  an  mpatrol  option  after  the
              library  has  been  initialised.  If _o_p_t is a valid
              option listed in _m_p_a_t_r_o_l_._h then _1 will be  returned
              and  the  associated  value will be returned in _v_a_l
              and cast to an unsigned integer, otherwise  _0  will
              be returned.  If _o_p_t is _M_P___O_P_T___S_E_T_F_L_A_G_S then all of
              the mpatrol library flags  that  are  set  will  be
              returned  in _v_a_l.  If _o_p_t is _M_P___O_P_T___U_N_S_E_T_F_L_A_G_S then
              all of the mpatrol library flags that are  not  set
              will be returned in _v_a_l.

       ____mmpp__lliibbvveerrssiioonn
              Returns  the version number of the mpatrol library.
              This can be useful for verifying that  the  version
              of  the  mpatrol  library  that a program is linked
              with is the one expected at compile-time.

       ____mmpp__ssttrreerrrroorr
              Returns the  error  message  corresponding  to  the
              error  code  _e_r_r  or  NNUULLLL  if  no  such error code
              exists.  The most recent error code recorded by the
              mpatrol   library  can  be  obtained  by  examining
              ____mmpp__eerrrrnnoo.

       ____mmpp__ffuunnccttiioonn
              Returns the name of the function  corresponding  to
              the allocation type _f_u_n_c or NNUULLLL if no such alloca-
              tion type exists.

       ____mmpp__sseettuusseerr
              Sets the user data for the memory  allocation  con-
              taining  _p_t_r.   The  contents  of _d_a_t_a are entirely
              application-specific as user  data  will  never  be
              examined  by  the  mpatrol  library.   Such data is
              associated with a memory allocation for its  entire
              lifetime  unless overridden by a subsequent call to
              ____mmpp__sseettuusseerr.  As such, the user data must be valid
              for  the  entire lifetime of the memory allocation,
              perhaps even after the allocation has been freed if
              the  NNOOFFRREEEE  option  is  being used.  This function
              returns _1 if there is  an  allocated  memory  block
              containing _p_t_r, and _0 otherwise.

       ____mmpp__sseettmmaarrkk
              Sets the marked flag for the memory allocation con-
              taining _p_t_r, indicating that the memory  allocation
              cannot  be  freed (but can be reallocated) and thus
              will not be listed as a memory leak.  This function
              returns  _1  if  there  is an allocated memory block
              containing _p_t_r, and _0 otherwise.  Note that a  mem-
              ory  allocation made by aallllooccaa, ssttrrdduuppaa or ssttrrnndduuppaa
              may not be marked.

       ____mmpp__iinnffoo
              Obtains information about a specific memory alloca-
              tion  by  placing statistics about _p_t_r in _i_n_f_o.  If
              _p_t_r does not belong to a previously allocated  mem-
              ory  allocation or free memory block then _0 will be
              returned, otherwise _1 will  be  returned  and  _i_n_f_o
              will contain the following information (note that a
              free memory block will only contain the  _b_l_o_c_k  and
              _s_i_z_e fields and can be identified by not having the
              _a_l_l_o_c_a_t_e_d flag set):

              FFiieelldd       DDeessccrriippttiioonn

              bblloocckk       Pointer to first byte of alloc.
              ssiizzee        Size of alloc in bytes.
              ttyyppee        Type of function which allocated memory.
              aalllloocc       Allocation index.
              rreeaalllloocc     Number of times reallocated.
              tthhrreeaadd      Thread identifier.
              eevveenntt       Event of last modification.
              ffuunncc        Function in which alloc took place.
              ffiillee        File in which alloc took place.
              lliinnee        Line number at which alloc took place.
              ssttaacckk       Pointer to function call stack.
              ttyyppeessttrr     Type stored in allocation.
              ttyyppeessiizzee    Size of type stored in allocation.
              uusseerrddaattaa    User data associated with allocation.
              aallllooccaatteedd   Indicates if alloc was allocated.
              ffrreeeedd       Indicates if alloc has been freed.
              mmaarrkkeedd      Indicates if alloc has been marked.
              pprrooffiilleedd    Indicates if alloc has been profiled.
              ttrraacceedd      Indicates if alloc has been traced.
              iinntteerrnnaall    Indicates if alloc is internal.

       ____mmpp__ssyymmiinnffoo
              Obtains symbolic information about a specific  code
              address  by  placing  statistics about _p_t_r in _i_n_f_o.
              If _p_t_r does not belong to a function symbol then  _0
              will  be returned, otherwise _1 will be returned and
              _i_n_f_o will contain the following information:

              FFiieelldd    DDeessccrriippttiioonn

              nnaammee     Name of symbol.
              oobbjjeecctt   File containing symbol.
              aaddddrr     Start address of symbol.
              ssiizzee     Size of symbol.
              ffiillee     Filename corresponding to address.
              lliinnee     Line number corresponding to address.

       ____mmpp__ssyymmbbooll
              Obtains the name of a  function  symbol  containing
              the code address specified in _p_t_r.  If _p_t_r does not
              belong to a  function  symbol  then  NNUULLLL  will  be
              returned.

       ____mmpp__pprriinnttiinnffoo
              Displays  information about a specific memory allo-
              cation containing _p_t_r to the  standard  error  file
              stream.   If  _p_t_r  does  not belong to a previously
              allocated memory allocation or  free  memory  block
              then  _0  will  be  returned,  otherwise  _1  will be
              returned.  This function is intended to  be  called
              from within a debugger.

       ____mmpp__ssnnaappsshhoott
              Returns  the current event number, effectively tak-
              ing a snapshot of the heap.  This number  can  then
              be used in later calls to ____mmpp__iitteerraattee.

       ____mmpp__iitteerraattee
              Iterates  over  all  of  the  current allocated and
              freed memory allocations,  calling  _f_u_n_c  with  the
              start  address  of every memory allocation that has
              been modified since event number _e_v_e_n_t.  If _f_u_n_c is
              NNUULLLL  then ____mmpp__pprriinnttiinnffoo will be used as the call-
              back function.  If eevveenntt is _0  then  _f_u_n_c  will  be
              called with the start address of every memory allo-
              cation.  If _f_u_n_c returns a negative number then the
              iteration  process will be stopped immediately.  If
              _f_u_n_c returns a  positive  number  above  zero  then
              ____mmpp__iitteerraattee  will  return the number of times _f_u_n_c
              returned a non-zero number after the iteration pro-
              cess  has  stopped.   The  _d_a_t_a  argument is passed
              directly to _f_u_n_c as its second argument and is  not
              read by the mpatrol library.

       ____mmpp__iitteerraatteeaallll
              Iterates  over  all  of  the  current allocated and
              freed  memory  allocations  and  any  free   memory
              blocks,  calling  _f_u_n_c  with  the  start address of
              every memory allocation or free block.  If _f_u_n_c  is
              NNUULLLL  then ____mmpp__pprriinnttiinnffoo will be used as the call-
              back function.  If _f_u_n_c returns a  negative  number
              then  the iteration process will be stopped immedi-
              ately.  If _f_u_n_c returns  a  positive  number  above
              zero  then  ____mmpp__iitteerraattee  will return the number of
              times _f_u_n_c returned a  non-zero  number  after  the
              iteration  process  has stopped.  The _d_a_t_a argument
              is passed directly to _f_u_n_c as its  second  argument
              and  is not read by the mpatrol library.  Note that
              unlike  ____mmpp__iitteerraattee,  this  function   will   also
              include  internal  memory  allocations  made by the
              mpatrol library and is  intended  for  walking  the
              entire heap.

       ____mmpp__aaddddaalllloocceennttrryy
              Adds  an  entry  representing an allocation of size
              _s_i_z_e to the leak table.   The  allocation  will  be
              associated  with  a  source  filename of _f_i_l_e and a
              line number of _l_i_n_e if the former is  non-NNUULLLL  and
              the  latter  is  non-zero.  If _f_i_l_e is non-NNUULLLL and
              _l_i_n_e is _0 then _f_i_l_e  represents  the  name  of  the
              function that made the allocation.  If _f_i_l_e is NNUULLLL
              and _l_i_n_e is non-zero then _l_i_n_e represents the  code
              address  at which the allocation was made.  If _f_i_l_e
              is NNUULLLL and _l_i_n_e is _0  then  the  location  of  the
              allocation  is unknown.  Returns _1 on success and _0
              if there  was  no  more  memory  available  to  add
              another entry to the leak table.

       ____mmpp__aaddddffrreeeeeennttrryy
              Adds  an  entry representing a deallocation of size
              _s_i_z_e to the leak table.  The deallocation  will  be
              associated  with  a  source  filename of _f_i_l_e and a
              line number of _l_i_n_e if the former is  non-NNUULLLL  and
              the  latter  is  non-zero.  If _f_i_l_e is non-NNUULLLL and
              _l_i_n_e is _0 then _f_i_l_e  represents  the  name  of  the
              function  that  made  the deallocation.  If _f_i_l_e is
              NNUULLLL and _l_i_n_e is non-zero then _l_i_n_e represents  the
              code  address  at  which the deallocation was made.
              If _f_i_l_e is NNUULLLL and _l_i_n_e is _0 then the location  of
              the  deallocation is unknown.  Returns _1 on success
              and _0 if there was no existing allocation from  the
              same location in the leak table.

       ____mmpp__cclleeaarrlleeaakkttaabbllee
              Deletes  all  of  the  existing entries in the leak
              table, making it empty.  This will also affect  the
              behaviour of the LLEEAAKKTTAABBLLEE option since that option
              will then only be able to show  a  summary  of  the
              entries in the leak table that were collected after
              the last call to this function rather than from the
              start of program execution.

       ____mmpp__ssttaarrttlleeaakkttaabbllee
              Starts  the automatic logging of all memory alloca-
              tions, reallocations and deallocations to the  leak
              table.  Returns _1 if such logging was already being
              performed and _0 otherwise.

       ____mmpp__ssttoopplleeaakkttaabbllee
              Stops the automatic logging of all  memory  alloca-
              tions,  reallocations and deallocations to the leak
              table.  Returns _1 if such logging was already being
              performed and _0 otherwise.

       ____mmpp__lleeaakkttaabbllee
              Displays  a  summary of up to _s_i_z_e entries from the
              leak table, or all entries if _s_i_z_e is _0.  If _o_p_t is
              _M_P___L_T___A_L_L_O_C_A_T_E_D  then all allocated entries will be
              displayed, if _o_p_t is  _M_P___L_T___F_R_E_E_D  then  all  freed
              entries   will   be   displayed   and   if  _o_p_t  is
              _M_P___L_T___U_N_F_R_E_E_D then all unfreed entries will be dis-
              played.  The summary is normally sorted in descend-
              ing order of total bytes from each entry, but  this
              can  be changed by setting _f_l_a_g_s to any combination
              of _M_P___L_T___C_O_U_N_T_S (to sort by the  number  of  occur-
              rences  in each entry) and _M_P___L_T___B_O_T_T_O_M (to sort in
              ascending order).

       ____mmpp__mmeemmoorryymmaapp
              If _s_t_a_t_s is non-zero then the current statistics of
              the mpatrol library will be displayed.  If the heap
              contains at least  one  allocated,  freed  or  free
              block  then  a map of the current heap will also be
              displayed.

       ____mmpp__ssuummmmaarryy
              Displays information about the current state of the
              mpatrol  library,  including  its  settings and any
              relevant statistics.

       ____mmpp__ssttaattss
              Obtains statistics about the current state  of  the
              heap  and places them in _i_n_f_o.  If this information
              could not be determined then _0  will  be  returned,
              otherwise  _1 will be returned and _i_n_f_o will contain
              the following information:

              FFiieelldd    DDeessccrriippttiioonn

              aaccoouunntt   Total number of allocated blocks.
              aattoottaall   Total size of allocated blocks.
              ffccoouunntt   Total number of free blocks.
              ffttoottaall   Total size of free blocks.
              ggccoouunntt   Total number of freed blocks.
              ggttoottaall   Total size of freed blocks.
              iiccoouunntt   Total number of internal blocks.
              iittoottaall   Total size of internal blocks.

              mmccoouunntt   Total number of marked blocks.
              mmttoottaall   Total size of marked blocks.

       ____mmpp__cchheecckk
              Forces the library to perform an immediate check of
              the overflow buffers of every memory allocation and
              to ensure that nothing  has  overwritten  any  free
              blocks.   If  any  memory  allocations  made by the
              aallllooccaa family of functions are out  of  scope  then
              this function will also cause them to be freed.

       ____mmpp__pprroolloogguuee
              Installs  a  prologue  function to be called before
              any memory allocation, reallocation or deallocation
              function.   This  function will return a pointer to
              the previously installed prologue function, or  the
              null  pointer if no prologue function had been pre-
              viously installed.  The following arguments will be
              used  to  call the prologue function (the last four
              arguments contain the  function  name,  file  name,
              line  number  and the return address of the calling
              function, or null pointers and zero if they  cannot
              be determined):

              AArrgguummeenntt 11   AArrgguummeenntt 22   AArrgguummeenntt 33   CCaalllleedd bbyy

                  _-_1          _s_i_z_e        _a_l_i_g_n      mmaalllloocc, etc.
                 _p_t_r          _s_i_z_e        _a_l_i_g_n      rreeaalllloocc, etc.
                 _p_t_r           _-_1           _0        ffrreeee, etc.
                 _p_t_r           _-_2           _1        ssttrrdduupp, etc.

       ____mmpp__eeppiilloogguuee
              Installs  an  epilogue  function to be called after
              any memory allocation, reallocation or deallocation
              function.   This  function will return a pointer to
              the previously installed epilogue function, or  the
              null  pointer if no epilogue function had been pre-
              viously installed.  The following arguments will be
              used  to  call the epilogue function (the last four
              arguments contain the  function  name,  file  name,
              line  number  and the return address of the calling
              function, or null pointers and zero if they  cannot
              be determined):

              AArrgguummeenntt   CCaalllleedd bbyy

                _p_t_r      mmaalllloocc, rreeaalllloocc, ssttrrdduupp, etc.
                 _-_1      ffrreeee, etc.

       ____mmpp__nnoommeemmoorryy
              Installs a low-memory handler and returns a pointer
              to the previously installed handler,  or  the  null
              pointer   if   no   handler   had  been  previously
              installed.  This will be called once  by  C  memory
              allocation  functions, and repeatedly by C++ memory
              allocation  functions,  when  they  would  normally
              return  NNUULLLL.  The four arguments contain the func-
              tion name, file name, line number  and  the  return
              address  of  the calling function, or null pointers
              and zero if they cannot be determined.   Note  that
              this  function is equivalent to sseett__nneeww__hhaannddlleerr and
              will replace the handler installed  by  that  func-
              tion.

       ____mmpp__pprriinnttff
              Writes format string _f_m_t with variable arguments to
              the log file, with each line prefixed  by  _>.   The
              final  length  of the string that is written to the
              log file must not exceed 1024 characters.   Returns
              the  number  of  characters  written, or a negative
              number upon error.

       ____mmpp__vvpprriinnttff
              Writes format string  _f_m_t  with  variable  argument
              list  _a_r_g_s to the log file, with each line prefixed
              by _>.  The final length of the string that is writ-
              ten  to  the  log file must not exceed 1024 charac-
              ters.  Returns the number of characters written, or
              a negative number upon error.

       ____mmpp__llooccpprriinnttff
              Writes format string _f_m_t with variable arguments to
              the log file, with each line prefixed  by  _>.   The
              final  length  of the string that is written to the
              log file must not exceed 1024 characters.  It  also
              writes  information to the log file about where the
              call to this function was made, which includes  the
              source file location and the call stack if they are
              available.

       ____mmpp__vvllooccpprriinnttff
              Writes format string  _f_m_t  with  variable  argument
              list  _a_r_g_s to the log file, with each line prefixed
              by _>.  The final length of the string that is writ-
              ten  to  the  log file must not exceed 1024 charac-
              ters.  It also writes information to the  log  file
              about  where  the  call  to this function was made,
              which includes the source  file  location  and  the
              call stack if they are available.

       ____mmpp__llooggmmeemmoorryy
              Displays  the  contents of a block of memory begin-
              ning at _p_t_r, dumping _s_i_z_e consecutive bytes to  the
              log file in hexadecimal format.

       ____mmpp__llooggssttaacckk
              Displays  the  current  call stack, skipping _f_r_a_m_e_s
              stack frames from the current  stack  frame  before
              writing  the  symbolic stack trace to the log file.
              Returns _1 if successful, or _0  if  the  call  stack
              could  not be determined or if _f_r_a_m_e_s was too large
              for the current call stack.

       ____mmpp__llooggaaddddrr
              Displays information about a specific memory  allo-
              cation containing _p_t_r to the log file.  If _p_t_r does
              not belong to a previously allocated memory alloca-
              tion  then  _0 will be returned, otherwise _1 will be
              returned.

       ____mmpp__eeddiitt
              Invokes a text editor to edit _f_i_l_e at  line  number
              _l_i_n_e via the mmppeeddiitt command.  Returns _1 if the text
              editor was successfully invoked, _-_1 if there was an
              error,  or  _0  if there is no support for this fea-
              ture.  This function will only  work  on  a  system
              where the EEDDIITT option works.

       ____mmpp__lliisstt
              Displays  a  context listing of _f_i_l_e at line number
              _l_i_n_e via the mmppeeddiitt  command.   Returns  _1  if  the
              listing was successfully performed, _-_1 if there was
              an error, or _0 if there is no support for this fea-
              ture.   This  function  will  only work on a system
              where the LLIISSTT option works.

       ____mmpp__vviieeww
              Either invokes a text editor to edit _f_i_l_e  at  line
              number  _l_i_n_e  or displays a context listing of _f_i_l_e
              at line number _l_i_n_e depending on the setting of the
              EEDDIITT and LLIISSTT options.  This is done via the mmppeeddiitt
              command and will have no effect  if  the  EEDDIITT  and
              LLIISSTT  options  are  not set or if these options are
              not supported on the system.  Returns _1 if the edit
              or  listing was successfully performed, _-_1 if there
              was an error, or _0 if neither of the  options  were
              set or if there is no support for this feature.

       ____mmpp__rreeaaddccoonntteennttss
              Reads  the contents of a memory allocation contents
              file into the  memory  allocation  containing  _p_t_r.
              The name of the file is composed of the _f_i_l_e string
              followed by the  allocation  index  of  the  memory
              allocation  separated  by  a  dot.  If _f_i_l_e is NNUULLLL
              then it is assumed to be _0 otherwise.

       ____mmpp__wwrriitteeccoonntteennttss
              Writes the contents of the memory  allocation  con-
              taining  _p_t_r  to  an allocation contents file.  The
              name of the file is composed  of  the  _f_i_l_e  string
              followed  by  the  allocation  index  of the memory
              allocation separated by a dot.   If  _f_i_l_e  is  NNUULLLL
              then  it  is  assumed to be _._m_p_a_t_r_o_l.  Returns _1 if
              the contents were written successfully and _0 other-
              wise.

       ____mmpp__ccmmppccoonntteennttss
              Compares the contents of the memory allocation con-
              taining _p_t_r with the contents of a previously writ-
              ten allocation contents file.  The name of the file
              is composed of the  _f_i_l_e  string  followed  by  the
              allocation index of the memory allocation separated
              by a dot.  If _f_i_l_e is NNUULLLL then it is assumed to be
              _._m_p_a_t_r_o_l.   Any differences are written to the mpa-
              trol log file.  Returns the number  of  differences
              found, or _-_1 if there was an error.

       ____mmpp__rreemmccoonntteennttss
              Removes  the  memory  allocation contents file that
              corresponds to  the  memory  allocation  containing
              _p_t_r.   The name of the file is composed of the _f_i_l_e
              string followed by the allocation index of the mem-
              ory allocation separated by a dot.  If _f_i_l_e is NNUULLLL
              then it is assumed to be _0 otherwise.

       The following global variable is available for  additional
       control  in  the  mpatrol  library.   To use it you should
       include the _m_p_a_t_r_o_l_._h header file:

       ____mmpp__eerrrrnnoo
              Contains the most recent error code encountered  by
              the  mpatrol  library.   Its  value can be reset to
              _M_P___E_T___N_O_N_E before calling an mpatrol library  func-
              tion,  and then examined afterwards, either by com-
              parison  with  the  known  error   codes   in   the
              _____m_p___e_r_r_o_r_t_y_p_e  enumeration, or with ____mmpp__ssttrreerrrroorr.


LLIINNKKIINNGG
       In order to use the mpatrol library on UNIX platforms, the
       following  libraries  must  be  linked in before any other
       library that defines dynamic memory  allocation  functions
       with the same names:

       LLiibbrraarryy            RReeaassoonn

       _-_l_m_p_a_t_r_o_l          To use this library.
       _-_l_m_p_a_t_r_o_l_m_t        To use the thread-safe mpatrol library.
       _-_l_m_p_a_l_l_o_c          To use the release library.
       _-_l_m_p_t_o_o_l_s          To use the mpatrol tools library.
       _-_l_l_d               If built with COFF or XCOFF support.
       _-_l_e_l_f              If built with ELF support.
       _-_l_b_f_d & _-_l_i_b_e_r_t_y   If built with BFD support.
       _-_l_c_l               If built on HP/UX.
       _-_l_e_x_c              If built on IRIX or Tru64.
       _-_l_i_m_a_g_e_h_l_p         If built on Windows.
       _-_l_p_t_h_r_e_a_d_s         If built on AIX with threads support.
       _-_l_t_h_r_e_a_d           If built on DG/UX with threads support.
       _-_l_p_t_h_r_e_a_d          If built on UNIX with threads support.

       On  UNIX platforms, if there were no calls to memory allo-
       cation functions before _-_l_m_p_a_t_r_o_l or  _-_l_m_p_a_t_r_o_l_m_t  appears
       on  the  link  line  then  the mpatrol library will not be
       linked in if it is an archive library.  However, this  can
       be  overridden by placing _-_u_m_a_l_l_o_c just before that point.

       You may also wish to set your core file size limit  to  be
       zero  before  running any programs linked with the mpatrol
       library as the extra memory that the library uses can make
       such  files  much larger than normal, and if you are plan-
       ning on using a symbolic debugger then you won't need  the
       core files anyway.

EENNVVIIRROONNMMEENNTT
       The  library  can read certain options at run-time from an
       environment variable called MMPPAATTRROOLL__OOPPTTIIOONNSS.   This  vari-
       able  must  contain one or more valid option keywords from
       the list below and must be no longer than 1024  characters
       in  length.  If MMPPAATTRROOLL__OOPPTTIIOONNSS is unset or empty then the
       default settings will be used.

       The  syntax  for  options  specified   within   the   MMPPAA--
       TTRROOLL__OOPPTTIIOONNSS    environment    variable   is   OOPPTTIIOONN   or
       OOPPTTIIOONN=_V_A_L_U_E, where OOPPTTIIOONN is  a  keyword  from  the  list
       below  and _V_A_L_U_E is the setting for that option.  If _V_A_L_U_E
       is numeric then it may be specified using  binary,  octal,
       decimal  or  hexadecimal  notation,  with  binary notation
       beginning with either _0_b or _0_B.  If _V_A_L_U_E is  a  character
       string  containing spaces then it may be quoted using dou-
       ble quotes.  No whitespace may appear between the _=  sign,
       but  whitespace  must  appear  between  different options.
       Note that option keywords can be  given  in  lowercase  as
       well as uppercase, or a mixture of both.

       AALLLLOOCCBBYYTTEE=_u_n_s_i_g_n_e_d _i_n_t_e_g_e_r
              Specifies  an 8-bit byte pattern with which to pre-
              fill newly-allocated memory.  This can be  used  to
              detect  the  use  of memory which has not been ini-
              tialised after allocation.  Note that this  setting
              will  not  affect  memory  allocated with ccaalllloocc or
              rreeccaalllloocc as these functions  always  prefill  allo-
              cated  memory  with  an 8-bit byte pattern of zero.
              Default value: AALLLLOOCCBBYYTTEE=_0_x_F_F.

       AALLLLOOCCSSTTOOPP=_u_n_s_i_g_n_e_d _i_n_t_e_g_e_r
              Specifies an allocation index at which to stop  the
              program  when it is being allocated.  When the num-
              ber of memory allocations reaches this  number  the
              program  will be halted, and its state may be exam-
              ined at that point by using  a  suitable  debugger.
              Note that this setting will be ignored if its value
              is zero.  Default value: AALLLLOOCCSSTTOOPP=_0.

       AALLLLOOWWOOFFLLOOWW
              Specifies that  a  warning  rather  than  an  error
              should be produced if any memory operation function
              overflows the boundaries of  a  memory  allocation,
              and  that  the operation should still be performed.
              This option is provided for circumstances where  it
              is  desirable  for  the memory operation to be per-
              formed, regardless of whether it  is  erroneous  or
              not.

       AAUUTTOOSSAAVVEE=_u_n_s_i_g_n_e_d _i_n_t_e_g_e_r
              Specifies  the  frequency  at which to periodically
              write the profiling data to  the  profiling  output
              file.   When  the  total  number of profiled memory
              allocations and deallocations is a multiple of this
              number  then the current profiling information will
              be written to  the  profiling  output  file.   This
              option  can be used to instruct the mpatrol library
              to dump out any profiling information just before a
              fatal error occurs in a program, for example.  Note
              that this setting will be ignored if its  value  is
              zero.  Default value: AAUUTTOOSSAAVVEE=_0.

       CCHHEECCKK=_u_n_s_i_g_n_e_d _r_a_n_g_e
              Specifies a range of allocation indices at which to
              check the integrity of  free  memory  and  overflow
              buffers.   The  range  must be specified as no more
              than two unsigned integers  separated  by  a  dash,
              followed  by  an  optional  forward  slash  and  an
              unsigned integer specifying an event checking  fre-
              quency.   If numbers on either the left side or the
              right side of the dash are omitted then  they  will
              be  assumed  to be _0 and _i_n_f_i_n_i_t_y respectively.  If
              the event checking frequency is omitted then it  is
              assumed to be _1.  A value of _0 on its own indicates
              that no such checking will ever be performed.  This
              option  can be used to speed up the execution speed
              of the library at the expense of checking.  Default
              value: CCHHEECCKK=_0.

       CCHHEECCKKAALLLL
              Equivalent   to   the  CCHHEECCKKAALLLLOOCCSS,  CCHHEECCKKRREEAALLLLOOCCSS,
              CCHHEECCKKFFRREEEESS  and   CCHHEECCKKMMEEMMOORRYY   options   specified
              together.

       CCHHEECCKKAALLLLOOCCSS
              Checks  that no attempt is made to allocate a block
              of memory of size zero.  A warning will  be  issued
              for every such case.

       CCHHEECCKKFFOORRKK
              Checks at every call to see if the process has been
              forked in case new log, profiling and tracing  out-
              put files need to be started.  This option only has
              an effect on UNIX platforms, but should not be used
              in multithreaded programs if each thread has a dif-
              ferent process identifier.

       CCHHEECCKKFFRREEEESS
              Checks that no attempt is made to deallocate a NNUULLLL
              pointer.   A  warning will be issued for every such
              case.

       CCHHEECCKKMMEEMMOORRYY
              Checks that no attempt is made to perform  a  zero-
              length memory operation on a NNUULLLL pointer.

       CCHHEECCKKRREEAALLLLOOCCSS
              Checks that no attempt is made to reallocate a NNUULLLL
              pointer or resize an existing block  of  memory  to
              size  zero.  Warnings will be issued for every such
              case.

       DDEEFFAALLIIGGNN=_u_n_s_i_g_n_e_d _i_n_t_e_g_e_r
              Specifies the default alignment for general-purpose
              memory  allocations,  which  must be a power of two
              (and will be rounded up to the nearest power of two
              if it is not).  The default alignment for a partic-
              ular system is calculated at run-time.

       EEDDIITT   Specifies that a text editor should be  invoked  to
              edit  any relevant source files that are associated
              with any warnings or errors when they occur.   Only
              diagnostics which occur at source lines in the pro-
              gram will be affected and only then if they contain
              source-level information.  This option is currently
              only available on UNIX platforms as it makes use of
              the   mmppeeddiitt   command.    It  also  overrides  the
              behaviour  of  the  LLIISSTT  option  and  affects  the
              behaviour of the ____mmpp__vviieeww function.

       FFAAIILLFFRREEQQ=_u_n_s_i_g_n_e_d _i_n_t_e_g_e_r
              Specifies the frequency at which all memory alloca-
              tions will randomly fail.  For example, a value  of
              _1_0  will  mean  that roughly 1 in 10 memory alloca-
              tions will fail, but a value of _0 will disable  all
              random  failures.   This  option  can be useful for
              stress-testing  an  application.   Default   value:
              FFAAIILLFFRREEQQ=_0.

       FFAAIILLSSEEEEDD=_u_n_s_i_g_n_e_d _i_n_t_e_g_e_r
              Specifies the random number seed which will be used
              when determining which memory allocations will ran-
              domly fail.  A value of _0 will instruct the library
              to pick a random seed every time it  is  run.   Any
              other value will mean that the random failures will
              be the same every time the program is run, but only
              as long as the seed stays the same.  Default value:
              FFAAIILLSSEEEEDD=_0.

       FFRREEEEBBYYTTEE=_u_n_s_i_g_n_e_d _i_n_t_e_g_e_r
              Specifies an 8-bit byte pattern with which to  pre-
              fill  newly-freed  memory.   This  can  be  used to
              detect the use of memory which has just been freed.
              It  is  also  used  internally to ensure that freed
              memory has not been  overwritten.   Note  that  the
              freed memory may be reused the next time a block of
              memory is allocated and so  once  memory  has  been
              freed its contents are not guaranteed to remain the
              same as the specified byte pattern.  Default value:
              FFRREEEEBBYYTTEE=_0_x_5_5.


       FFRREEEESSTTOOPP=_u_n_s_i_g_n_e_d _i_n_t_e_g_e_r
              Specifies  an allocation index at which to stop the
              program when it is being freed.   When  the  memory
              allocation  with  the specified allocation index is
              to be freed the program will  be  halted,  and  its
              state  may  be examined at that point using a suit-
              able debugger.  Note  that  this  setting  will  be
              ignored  if  its  value  is  zero.   Default value:
              FFRREEEESSTTOOPP=_0.

       HHEELLPP   Displays a quick-reference option  summary  to  the
              ssttddeerrrr file stream.

       LLAARRGGEEBBOOUUNNDD=_u_n_s_i_g_n_e_d _i_n_t_e_g_e_r
              Specifies  the  limit  in  bytes up to which memory
              allocations should be classified as  large  alloca-
              tions  for  profiling purposes.  This limit must be
              greater than the small and medium bounds.   Default
              value: LLAARRGGEEBBOOUUNNDD=_2_0_4_8.

       LLEEAAKKTTAABBLLEE
              Specifies  that  the leak table should be automati-
              cally used and a leak table summary should be  dis-
              played  at  the end of program execution.  The sum-
              mary shows a flat profile  of  all  unfreed  memory
              allocations  since  the  start  of  the program, or
              since the last call to ____mmpp__cclleeaarrlleeaakkttaabbllee if  that
              function was called.

       LLIIMMIITT=_u_n_s_i_g_n_e_d _i_n_t_e_g_e_r
              Specifies  the  limit  in bytes at which all memory
              allocations should fail if the total allocated mem-
              ory  should increase beyond this.  This can be used
              to stress-test software to see how  it  behaves  in
              low memory conditions.  The internal memory used by
              the library itself will not be counted as  part  of
              the  total heap size, but on some systems there may
              be a small amount of memory required to  initialise
              the library itself.  Note that this setting will be
              ignored if  its  value  is  zero.   Default  value:
              LLIIMMIITT=_0.

       LLIISSTT   Specifies  that  a  context listing should be shown
              for any relevant source files that  are  associated
              with  any warnings or errors when they occur.  Only
              diagnostics which occur at source lines in the pro-
              gram will be affected and only then if they contain
              source-level information.  This option is currently
              only available on UNIX platforms as it makes use of
              the  mmppeeddiitt  command.   It   also   overrides   the
              behaviour  of  the  EEDDIITT  option  and  affects  the
              behaviour of the ____mmpp__vviieeww function.

       LLOOGGAALLLL Equivalent to the LLOOGGAALLLLOOCCSS, LLOOGGRREEAALLLLOOCCSS,  LLOOGGFFRREEEESS
              and LLOOGGMMEEMMOORRYY options specified together.

       LLOOGGAALLLLOOCCSS
              Specifies  that  all  memory  allocations are to be
              logged and sent to the log  file.   Note  that  any
              memory  allocations  made internally by the library
              will not be logged.

       LLOOGGFFIILLEE=_s_t_r_i_n_g
              Specifies an alternative file in which to place all
              diagnostics  from  the  mpatrol  library.   If  the
              LLOOGGDDIIRR  environment  variable  is   set   and   the
              specified file does not contain a path component in
              its filename then the log file will be  located  in
              the  directory  specified in LLOOGGDDIIRR.  A filename of
              _s_t_d_e_r_r will send all diagnostics to the ssttddeerrrr file
              stream and a filename of _s_t_d_o_u_t will do the equiva-
              lent with the ssttddoouutt file stream.  Note that  if  a
              problem occurs while opening the log file or if any
              diagnostics require to be displayed before the  log
              file  has  had a chance to be opened then they will
              be sent to the ssttddeerrrr file stream.  Default  value:
              LLOOGGFFIILLEE=_m_p_a_t_r_o_l_._l_o_g  or  LLOOGGFFIILLEE=_%_n_._%_p_._l_o_g  if  the
              LLOOGGDDIIRR environment variable is set.

       LLOOGGFFRREEEESS
              Specifies that all memory deallocations are  to  be
              logged  and  sent  to  the log file.  Note that any
              memory deallocations made internally by the library
              will not be logged.

       LLOOGGMMEEMMOORRYY
              Specifies  that  all  memory  operations  are to be
              logged and sent to the log file.  These  operations
              will  be  made by calls to functions such as mmeemmsseett
              and mmeemmccppyy.  Note that any memory  operations  made
              internally by the library will not be logged.

       LLOOGGRREEAALLLLOOCCSS
              Specifies  that  all memory reallocations are to be
              logged and sent to the log  file.   Note  that  any
              memory reallocations made internally by the library
              will not be logged.

       MMEEDDIIUUMMBBOOUUNNDD=_u_n_s_i_g_n_e_d _i_n_t_e_g_e_r
              Specifies the limit in bytes  up  to  which  memory
              allocations  should be classified as medium alloca-
              tions for profiling purposes.  This limit  must  be
              greater  than  the  small  bound  but less than the
              large bound.  Default value: MMEEDDIIUUMMBBOOUUNNDD=_2_5_6.

       NNOOFFRREEEE=_u_n_s_i_g_n_e_d _i_n_t_e_g_e_r
              Specifies that a number  of  recently-freed  memory
              allocations should be prevented from being returned
              to the free memory pool.  Such freed memory alloca-
              tions will then be flagged as freed and can be used
              by the library to provide better  diagnostics.   If
              the  size  of  the freed queue is specified as zero
              then all freed memory will be immediately reused by
              the  mpatrol  library.  Note that if this option is
              given a non-zero value  then  the  mpatrol  library
              will always force a memory reallocation to return a
              pointer to newly-allocated memory, but  the  eexxppaanndd
              function  will  never  be  affected by this option.
              Default value: NNOOFFRREEEE=_0.

       NNOOPPRROOTTEECCTT
              Specifies that the mpatrol library's internal  data
              structures should not be made read-only after every
              memory allocation,  reallocation  or  deallocation.
              This  may significantly speed up execution but this
              will be at the expense of less safety if  the  pro-
              gram  accidentally overwrites some of the library's
              internal data structures.  Note  that  this  option
              has no effect on systems that do not support memory
              protection.


       OOFFLLOOWWBBYYTTEE=_u_n_s_i_g_n_e_d _i_n_t_e_g_e_r
              Specifies an 8-bit byte pattern with which to  fill
              the  overflow  buffers  of  all memory allocations.
              This is used internally to ensure that nothing  has
              been  written  beyond the beginning or the end of a
              block of allocated memory.  Note that this  setting
              will only have an effect if the OOFFLLOOWWSSIIZZEE option is
              in use.  Default value: OOFFLLOOWWBBYYTTEE=_0_x_A_A.

       OOFFLLOOWWSSIIZZEE=_u_n_s_i_g_n_e_d _i_n_t_e_g_e_r
              Specifies the size in bytes to use for all overflow
              buffers,  which must be a power of two (and will be
              rounded up to the nearest power of  two  if  it  is
              not).  This is used internally to ensure that noth-
              ing has been written beyond the  beginning  or  the
              end of a block of allocated memory.  Note that this
              setting specifies the size  for  only  one  of  the
              overflow  buffers  given to each memory allocation;
              the other overflow buffer will  have  an  identical
              size.   No  overflow  buffers  will be used if this
              setting is zero.  Default value: OOFFLLOOWWSSIIZZEE=_0.

       OOFFLLOOWWWWAATTCCHH
              Specifies that watch point areas should be used for
              overflow buffers rather than filling with the over-
              flow byte.  This can significantly reduce the speed
              of program execution.  Note that this option has no
              effect on systems that do not support  watch  point
              areas.

       PPAAGGEEAALLLLOOCC=_L_O_W_E_R|_U_P_P_E_R
              Specifies  that  each  individual memory allocation
              should occupy at least one page of  virtual  memory
              and should be placed at the lowest or highest point
              within these pages.  This  allows  the  library  to
              place an overflow buffer of one page on either side
              of every memory allocation and write-protect  these
              pages  as  well as all free and freed memory.  Note
              that this option has no effect on systems  that  do
              not  support  memory protection, and is disabled by
              default on other systems as it can  slow  down  the
              speed of program execution.

       PPRREESSEERRVVEE
              Specifies  that  any  reallocated  or  freed memory
              allocations should  preserve  their  original  con-
              tents.   This  option  must be used with the NNOOFFRREEEE
              option and has no effect otherwise.

       PPRROOFF   Specifies that all memory allocations and dealloca-
              tions  are to be profiled and sent to the profiling
              output file.  Memory reallocations are treated as a
              memory  deallocation immediately followed by a mem-
              ory allocation.

       PPRROOFFFFIILLEE=_s_t_r_i_n_g
              Specifies an alternative file in which to place all
              memory  allocation  profiling  information from the
              mpatrol library.  If the PPRROOFFDDIIRR environment  vari-
              able is set and the specified file does not contain
              a path component in its filename then the profiling
              output file will be located in the directory speci-
              fied in PPRROOFFDDIIRR.  A filename of  _s_t_d_e_r_r  will  send
              this  information  to  the ssttddeerrrr file stream and a
              filename of _s_t_d_o_u_t will do the equivalent with  the
              ssttddoouutt  file stream.  Note that if a problem occurs
              while opening the profiling output  file  then  the
              profiling  information will not be output.  Default
              value: PPRROOFFFFIILLEE=_m_p_a_t_r_o_l_._o_u_t  or  PPRROOFFFFIILLEE=_%_n_._%_p_._o_u_t
              if the PPRROOFFDDIIRR environment variable is set.

       PPRROOGGFFIILLEE=_s_t_r_i_n_g
              Specifies  an  alternative  filename  with which to
              locate the executable file containing the program's
              symbols.   On  most systems, the library will auto-
              matically be able to determine this  filename,  but
              on  a  few  systems this option may have to be used
              before any or all symbols can be read.

       RREEAALLLLOOCCSSTTOOPP=_u_n_s_i_g_n_e_d _i_n_t_e_g_e_r
              Specifies a reallocation index at which to stop the
              program  when  a memory allocation is being reallo-
              cated.  If the AALLLLOOCCSSTTOOPP option  is  non-zero  then
              the  program  will  be  halted  when the allocation
              matching that allocation index is  reallocated  the
              specified  number  of times.  Otherwise the program
              will be halted the first  time  any  allocation  is
              reallocated  the  specified  number of times.  Note
              that this setting will be ignored if its  value  is
              zero.  Default value: RREEAALLLLOOCCSSTTOOPP=_0.

       SSAAFFEESSIIGGNNAALLSS
              Instructs  the  library to save and replace certain
              signal handlers during  the  execution  of  library
              code  and to restore them afterwards.  This was the
              default behaviour in version  1.0  of  the  mpatrol
              library and was changed since some memory-intensive
              programs became very hard to  interrupt  using  the
              keyboard,  thus giving the impression that the pro-
              gram or system had hung.

       SSHHOOWWAALLLL
              Equivalent to the SSHHOOWWFFRREEEE, SSHHOOWWFFRREEEEDD, SSHHOOWWUUNNFFRREEEEDD,
              SSHHOOWWMMAAPP and SSHHOOWWSSYYMMBBOOLLSS options specified together.

       SSHHOOWWFFRREEEE
              Specifies that a summary of all of the free  memory
              blocks  should  be  displayed at the end of program
              execution.  This step will not be performed  if  an
              abnormal  termination  occurs  or  if there were no
              free memory blocks.

       SSHHOOWWFFRREEEEDD
              Specifies that a summary of all of the freed memory
              allocations  should be displayed at the end of pro-
              gram execution.  This option must be used  in  con-
              junction  with the NNOOFFRREEEE option and this step will
              not be performed if an abnormal termination  occurs
              or if there were no freed allocations.

       SSHHOOWWMMAAPP
              Specifies  that  a  memory  map  of the entire heap
              should be displayed at the end  of  program  execu-
              tion.  This step will not be performed if an abnor-
              mal termination occurs or if the heap is empty.

       SSHHOOWWSSYYMMBBOOLLSS
              Specifies that a summary of  all  of  the  function
              symbols  read  from  the  program's executable file
              should be displayed at the end  of  program  execu-
              tion.  This step will not be performed if an abnor-
              mal termination occurs or if no  symbols  could  be
              read from the executable file.

       SSHHOOWWUUNNFFRREEEEDD
              Specifies that a summary of all of the unfreed mem-
              ory allocations should be displayed at the  end  of
              program execution.  This step will not be performed
              if an abnormal termination occurs or if  there  are
              no  unfreed allocations.  Note that any marked mem-
              ory allocations will not be listed.

       SSMMAALLLLBBOOUUNNDD=_u_n_s_i_g_n_e_d _i_n_t_e_g_e_r
              Specifies the limit in bytes  up  to  which  memory
              allocations  should  be classified as small alloca-
              tions for profiling purposes.  This limit  must  be
              greater  than  zero  but  less  than the medium and
              large bounds.  Default value: SSMMAALLLLBBOOUUNNDD=_3_2.

       TTRRAACCEE  Specifies that all  memory  allocations,  realloca-
              tions  and  deallocations are to be traced and sent
              to the tracing output file.

       TTRRAACCEEFFIILLEE=_s_t_r_i_n_g
              Specifies an alternative file in which to place all
              memory allocation tracing information from the mpa-
              trol library.  If the TTRRAACCEEDDIIRR environment variable
              is  set  and  the specified file does not contain a
              path component in its  filename  then  the  tracing
              output file will be located in the directory speci-
              fied in TTRRAACCEEDDIIRR.  A filename of _s_t_d_e_r_r  will  send
              this  information  to  the ssttddeerrrr file stream and a
              filename of _s_t_d_o_u_t will do the equivalent with  the
              ssttddoouutt  file stream.  Note that if a problem occurs
              while opening the  tracing  output  file  then  the
              tracing  information  will  not be output.  Default
              value:    TTRRAACCEEFFIILLEE=_m_p_a_t_r_o_l_._t_r_a_c_e     or     TTRRAACCEE--
              FFIILLEE=_%_n_._%_p_._t_r_a_c_e  if the TTRRAACCEEDDIIRR environment vari-
              able is set.

       UUNNFFRREEEEDDAABBOORRTT=_u_n_s_i_g_n_e_d _i_n_t_e_g_e_r
              Specifies the minimum number of unfreed allocations
              at  which  to abort the program just before program
              termination.  A summary of all the allocations will
              be  displayed  on  the  standard  error file stream
              before aborting.  This option may be handy for  use
              in  batch  tests  as  it can force tests to fail if
              they do not free up  a  minimum  number  of  memory
              allocations,  although  marked allocations will not
              be considered as unfreed  allocations.   Note  that
              this  setting will be ignored if its value is zero.
              Default value: UUNNFFRREEEEDDAABBOORRTT=_0.

       UUSSEEDDEEBBUUGG
              Specifies that any  debugging  information  in  the
              executable file should be used to obtain additional
              source-level information.  This  option  will  only
              have  an  effect  if the executable file contains a
              compiler-generated line number table  and  will  be
              ignored if the mpatrol library was built to support
              an object file access library that cannot read line
              tables from object files.

       UUSSEEMMMMAAPP
              Specifies  that the library should use mmmmaapp instead
              of ssbbrrkk to allocate user memory on UNIX  platforms.
              This  option  should  be used if there are problems
              when using the mpatrol library in combination  with
              another  malloc library which uses ssbbrrkk to allocate
              its memory.  Memory internal to the mpatrol library
              is  allocated with mmmmaapp on systems where it is sup-
              ported in order to segregate it from  user  memory,
              and  this  behaviour  is  reversed with the UUSSEEMMMMAAPP
              option.  It is ignored on systems that do not  sup-
              port the mmmmaapp system call.

SSEEEE AALLSSOO
       mmppaattrrooll(1),   mmpprrooff(1),  mmppttrraaccee(1),  mmlleeaakk(1),  mmppssyymm(1),
       mmppeeddiitt(1), hheexxwwoorrddss(1), mmmmaapp(2),  ssbbrrkk(2),  lliibbmmppaalllloocc(3),
       mmaalllloocc(3),  nneeww(3c++),  aallllooccaa(3),  mmeemmoorryy(3),  ssttrriinngg(3),
       aasssseerrtt(3), eellff(3e), bbffdd(3).

       The mpatrol manual and reference card.

       http://www.cbmamiga.demon.co.uk/mpatrol/

AAUUTTHHOORR
       Graeme S. Roy <graeme.roy@analog.com>

CCOOPPYYRRIIGGHHTT
       Copyright (C) 1997-2002  Graeme  S.  Roy  <graeme.roy@ana-
       log.com>

       This  library  is  free  software; you can redistribute it
       and/or modify it under the terms of the GNU  Library  Gen-
       eral  Public  License  as  published  by the Free Software
       Foundation; either version 2 of the License, or  (at  your
       option) any later version.

       This  library  is  distributed in the hope that it will be
       useful, but WITHOUT ANY WARRANTY; without even the implied
       warranty  of  MERCHANTABILITY  or FITNESS FOR A PARTICULAR
       PURPOSE.  See the GNU Library General Public  License  for
       more details.

       You should have received a copy of the GNU Library General
       Public License along with this library; if not,  write  to
       the Free Software Foundation, Inc., 59 Temple Place, Suite
       330, Boston, MA 02111-1307, USA.



Release 1.4               8 January 2002                        1





















