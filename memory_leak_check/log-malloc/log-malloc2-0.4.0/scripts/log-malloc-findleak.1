.\" Automatically generated by Pod::Man 2.28 (Pod::Simple 3.29)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "LOG-MALLOC-FINDLEAK 1"
.TH LOG-MALLOC-FINDLEAK 1 "2015-08-03" "0.4.0" "log-malloc2"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
log\-malloc\-findleak \- find suspected memory leaks in log\-malloc2 trace file
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
log-malloc-findleak [ \s-1OPTIONS \s0] \fITRACE-FILE\fR
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This script analyzes input trace file (or part of it) produced by log\-malloc2 library, and prints out
suspected memory leaks along with translated backtrace path to code allocating that memory.
.PP
\&\s-1NOTE:\s0 This script can be also used as perl module.
.SH "ARGUMENTS"
.IX Header "ARGUMENTS"
.IP "\fITRACE-FILE\fR" 4
.IX Item "TRACE-FILE"
Path to file containing log\-malloc2 trace (can be only part of it).
.SH "OPTIONS"
.IX Header "OPTIONS"
.IP "\fB\-p\fR \fI\s-1PID\s0\fR" 4
.IX Item "-p PID"
.PD 0
.IP "\fB\-\-pid\fR \fI\s-1PID\s0\fR" 4
.IX Item "--pid PID"
.PD
Pid of a \fBstill\fR running process, that generated given trace. This is primarily needed for backtrace
to work if \s-1ASLR\s0 is enabled.
.IP "\fB\-\-full\-names\fR" 4
.IX Item "--full-names"
Will force full filenames with path to be shown in backtrace and not only filenames with parent directory.
.IP "\fB\-\-no\-translate\fR" 4
.IX Item "--no-translate"
Will not translate backtrace, but print only backtrace symbols as they are in trace file.
.IP "\fB\-h\fR" 4
.IX Item "-h"
.PD 0
.IP "\fB\-\-help\fR" 4
.IX Item "--help"
.PD
Print help.
.IP "\fB\-\-man\fR" 4
.IX Item "--man"
Show man page.
.SH "EXAMPLES"
.IX Header "EXAMPLES"
.Vb 9
\&        # full trace file (MEMORY MAP included)
\&        $ log\-malloc\-findleak /tmp/lm.trace
\&        SUSPECTED 1 LEAKS:
\&         0x7f00af5ac800 leaked 2000 bytes (1.95 KiB) allocated by malloc (line: 18)
\&                FUNCTION             FILE                      SYMBOL
\&                main                 examples/leak\-01.c:7      ./leak\-01(main+0x32)[0x7f00ad7a4af2]
\&                                                               /lib64/libc.so.6(_\|_libc_start_main+0x11b)[0x7f00acfe31cb]
\&                _start               ??:?                      ./leak\-01(+0x9a9)[0x7f00ad7a49a9]
\&                                                               [0x0]
\&
\&        # full trace file, but leak\-01 has been stripped
\&        SUSPECTED 1 LEAKS:
\&         0x7f00af5ac800 leaked 2000 bytes (1.95 KiB) allocated by malloc (line: 18)
\&                ./leak\-01(main+0x32)[0x7f00ad7a4af2]
\&                /lib64/libc.so.6(_\|_libc_start_main+0x11b)[0x7f00acfe31cb]
\&                ./leak\-01(+0x9a9)[0x7f00ad7a49a9]
\&                [0x0]
\&
\&        $ log\-malloc\-findleak /tmp/lm.trace \-\-no\-translate
\&        SUSPECTED 1 LEAKS:
\&         0x7f00af5ac800 leaked 2000 bytes (1.95 KiB) allocated by malloc (line: 18)
\&                ./leak\-01(main+0x32)[0x7f00ad7a4af2]
\&                /lib64/libc.so.6(_\|_libc_start_main+0x11b)[0x7f00acfe31cb]
\&                ./leak\-01(+0x9a9)[0x7f00ad7a49a9]
\&                [0x0]
\&
\&        # incomplete trace file, leak\-02 still running but PID is in trace file
\&        $ log\-malloc\-findleak /tmp/lm2.trace
\&        SUSPECTED 2 LEAKS:
\&         0x7fe0c69fc800 leaked 2000 bytes (1.95 KiB) allocated by malloc (line: 18)
\&                FUNCTION             FILE                      SYMBOL
\&                main                 examples/leak\-02.c:8      ./examples/leak\-02(main+0x32)[0x7fe0c59e1b42]
\&                                                               /lib64/libc.so.6(_\|_libc_start_main+0x11b)[0x7fe0c52201cb]
\&                _start               ??:?                      ./examples/leak\-02(+0x9f9)[0x7fe0c59e19f9]
\&                                                       [0x0]
\&         0x7fe0c69fd000 leaked 100 bytes (0.10 KiB) allocated by malloc (line: 23)
\&                FUNCTION             FILE                      SYMBOL
\&                main                 examples/leak\-02.c:10     ./examples/leak\-02(main+0x40)[0x7fe0c59e1b50]
\&                                                               /lib64/libc.so.6(_\|_libc_start_main+0x11b)[0x7fe0c52201cb]
\&                _start               ??:?                      ./examples/leak\-02(+0x9f9)[0x7fe0c59e19f9]
\&                                                       [0x0]
\&
\&        # excerpt of trace file, leak\-02 still running and no PID in trace file
\&        $ log\-malloc\-findleak /tmp/lm2.trace\-part \-\-pid 21134
\&        SUSPECTED 1 LEAKS:
\&         0x7f4688a04000 leaked 100 bytes (0.10 KiB) allocated by malloc (line: 1)
\&                FUNCTION             FILE                      SYMBOL
\&                main                 examples/leak\-02.c:10     ./examples/leak\-02(main+0x40)[0x7f4687a6fb50]
\&                                                               /lib64/libc.so.6(_\|_libc_start_main+0x11b)[0x7f46872ae1cb]
\&                _start               ??:?                      ./examples/leak\-02(+0x9f9)[0x7f4687a6f9f9]
\&                                                               [0x0]
.Ve
.SH "LICENSE"
.IX Header "LICENSE"
This script is released under \s-1GNU\s0 GPLv3 License.
See <http://www.gnu.org/licenses/gpl.html>.
.SH "AUTHOR"
.IX Header "AUTHOR"
Samuel Behan \- <http://devel.dob.sk/log\-malloc2/>, <https://github.com/samsk/log\-malloc2>
.SH "SEE ALSO"
.IX Header "SEE ALSO"
log-malloc
